import { storage } from "../server/storage";
import { readFileSync } from "fs";
import { join, dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

async function refreshDatabase() {
  console.log("üîÑ L√†m m·ªõi database v·ªõi ·∫£nh th·ª±c...\n");

  // Load image data
  const imagePath = join(__dirname, 'image_data.json');
  const imageData = JSON.parse(readFileSync(imagePath, "utf-8"));
  
  console.log("üì∏ ƒê√£ t·∫£i d·ªØ li·ªáu ·∫£nh:");
  console.log(`  - ${Object.keys(imageData.album || {}).length} ·∫£nh album`);
  console.log(`  - ${Object.keys(imageData.avatar || {}).length} ·∫£nh avatar`);
  console.log(`  - ${Object.keys(imageData.background || {}).length} ·∫£nh n·ªÅn`);
  console.log(`  - ${Object.keys(imageData.venue || {}).length} ·∫£nh nh√† h√†ng`);
  console.log(`  - ${Object.keys(imageData.bridesmaids || {}).length} ·∫£nh ph√π d√¢u`);
  console.log(`  - ${Object.keys(imageData.groomsmen || {}).length} ·∫£nh ph√π r·ªÉ`);
  console.log(`  - ${Object.keys(imageData.qr || {}).length} ·∫£nh QR code\n`);

  // Update couple info with real photos
  await storage.upsertCoupleInfo({
    brideName: "Xu√¢n L√¢m",
    groomName: "Xu√¢n L·ª£i",
    bridePhoto: imageData.avatar["codau.jpg"],
    groomPhoto: imageData.avatar["chure.jpg"],
    brideDescription: "C√¥ d√¢u Xu√¢n L√¢m - Ng∆∞·ªùi ph·ª• n·ªØ xinh ƒë·∫πp, d·ªãu d√†ng v√† tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng.",
    groomDescription: "Ch√∫ r·ªÉ Xu√¢n L·ª£i - Ch√†ng trai th√¥ng minh, tr√°ch nhi·ªám v√† lu√¥n t∆∞∆°i c∆∞·ªùi.",
    ourStory: "Ch√∫ng t√¥i g·∫∑p nhau l·∫ßn ƒë·∫ßu v√†o m√πa xu√¢n nƒÉm 2022. T·ª´ c√°i nh√¨n ƒë·∫ßu ti√™n, ch√∫ng t√¥i ƒë√£ c·∫£m nh·∫≠n ƒë∆∞·ª£c s·ª± k·∫øt n·ªëi ƒë·∫∑c bi·ªát. Sau nh·ªØng bu·ªïi h·∫πn h√≤ l√£ng m·∫°n, ch√∫ng t√¥i nh·∫≠n ra r·∫±ng m√¨nh l√† ng∆∞·ªùi tri k·ª∑ c·ªßa nhau.",
    weddingDate: new Date("2026-01-01"),
    heroImage: imageData.background["anhnen.jpg"],
  });
  console.log("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin c√¥ d√¢u ch√∫ r·ªÉ");

  // Update settings with real venue image and QR codes
  await storage.upsertSettings({
    venueName: "Rose Garden Estate",
    venueAddress: "Khu ƒë√¥ th·ªã C·ªï Nhu·∫ø, Ph∆∞·ªùng C·ªï Nhu·∫ø 1, Qu·∫≠n B·∫Øc T·ª´ Li√™m, H√† N·ªôi",
    venueMapLink: "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3724.4803982916854!2d105.84117207503217!3d21.01332968063466",
    venuePhone: "024 3868 9999",
    venueEmail: "contact@rosegarden.vn",
    venueImage: imageData.venue["1.jpg"],
    eventStartTime: new Date("2026-01-01T17:00:00"),
    eventEndTime: new Date("2026-01-01T21:00:00"),
    backgroundMusicUrl: "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
    backgroundMusicType: "upload",
    brideQrCodeUrl: imageData.qr["mungtiencodau.jpg"],
    groomQrCodeUrl: imageData.qr["mungtienchure.jpg"],
    brideBankInfo: "Ng√¢n h√†ng: Vietcombank\nS·ªë t√†i kho·∫£n: 1234567890\nCh·ªß t√†i kho·∫£n: Xu√¢n L√¢m",
    groomBankInfo: "Ng√¢n h√†ng: Techcombank\nS·ªë t√†i kho·∫£n: 0987654321\nCh·ªß t√†i kho·∫£n: Xu√¢n L·ª£i",
  });
  console.log("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãa ƒëi·ªÉm v√† QR code");

  // Clear existing photos and add real album photos
  const existingPhotos = await storage.getAllPhotos();
  for (const photo of existingPhotos) {
    await storage.deletePhoto(photo.id);
  }
  
  let order = 1;
  for (const [filename, url] of Object.entries(imageData.album)) {
    await storage.createPhoto({
      url,
      caption: `·∫¢nh c∆∞·ªõi ${order}`,
      category: "wedding",
      order: order++,
    });
  }
  console.log(`‚úÖ Th√™m ${Object.keys(imageData.album).length} ·∫£nh album`);

  // Update wedding party with real photos
  const existingMembers = await storage.getAllWeddingParty();
  for (const member of existingMembers) {
    await storage.deleteWeddingPartyMember(member.id);
  }

  const bridesmaidsPhotos = Object.values(imageData.bridesmaids);
  const groomsmenPhotos = Object.values(imageData.groomsmen);

  const bridesmaids = [
    { name: "Nguy·ªÖn Thanh T√¢m", role: "Ph√π D√¢u", description: "B·∫°n th√¢n t·ª´ th·ªùi c·∫•p 2", order: 1 },
    { name: "Tr·∫ßn H·ªìng Nhung", role: "Ph√π D√¢u", description: "Ch·ªã em h·ªç th√¢n thi·∫øt", order: 2 },
    { name: "L√™ Th·ªã Mai", role: "Ph√π D√¢u", description: "B·∫°n h·ªçc c√πng l·ªõp ƒë·∫°i h·ªçc", order: 3 },
  ];

  const groomsmen = [
    { name: "Ph·∫°m Qu·ªëc Tu·∫•n", role: "Ph√π R·ªÉ", description: "B·∫°n th√¢n t·ª´ thu·ªü nh·ªè", order: 4 },
    { name: "V≈© Minh Qu√¢n", role: "Ph√π R·ªÉ", description: "ƒê·ªìng nghi·ªáp th√¢n thi·∫øt", order: 5 },
    { name: "Ho√†ng VƒÉn Nam", role: "Ph√π R·ªÉ", description: "B·∫°n c√πng ph√≤ng ƒë·∫°i h·ªçc", order: 6 },
  ];

  for (let i = 0; i < bridesmaids.length; i++) {
    await storage.createWeddingPartyMember({
      ...bridesmaids[i],
      photoUrl: bridesmaidsPhotos[i] || bridesmaidsPhotos[0],
    });
  }

  for (let i = 0; i < groomsmen.length; i++) {
    await storage.createWeddingPartyMember({
      ...groomsmen[i],
      photoUrl: groomsmenPhotos[i] || groomsmenPhotos[0],
    });
  }
  
  console.log(`‚úÖ C·∫≠p nh·∫≠t ${bridesmaids.length + groomsmen.length} th√†nh vi√™n ƒëo√†n r∆∞·ªõc d√¢u`);

  console.log("\nüéâ Ho√†n th√†nh l√†m m·ªõi database v·ªõi ·∫£nh th·ª±c!");
}

refreshDatabase().catch(console.error);
