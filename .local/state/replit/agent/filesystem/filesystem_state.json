{"file_contents":{"client/src/components/MusicPlayer.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Play, Pause, Volume2, VolumeX, SkipBack, SkipForward, Music } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { MusicTrack } from \"@shared/schema\";\n\nexport default function MusicPlayer() {\n  const [isPlaying, setIsPlaying] = useState(() => {\n    const saved = localStorage.getItem('musicPlayer_isPlaying');\n    return saved === 'true';\n  });\n  const [isMuted, setIsMuted] = useState(() => {\n    const saved = localStorage.getItem('musicPlayer_isMuted');\n    return saved === 'true';\n  });\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [currentSongIndex, setCurrentSongIndex] = useState(() => {\n    const saved = localStorage.getItem('musicPlayer_currentSongIndex');\n    return saved ? parseInt(saved, 10) : 0;\n  });\n  const audioRef = useRef<HTMLAudioElement>(null);\n\n  const { data: musicTracks = [] } = useQuery<MusicTrack[]>({\n    queryKey: [\"/api/music-tracks\"],\n  });\n\n  // Build playlist from music tracks database\n  const playlist = (() => {\n    // If music tracks exist in database, use those\n    if (musicTracks && musicTracks.length > 0) {\n      const activeTracks = musicTracks.filter(track => track.isActive);\n      if (activeTracks.length > 0) {\n        return activeTracks.map(track => ({\n          title: track.title,\n          artist: track.artist || \"Đám Cưới\",\n          src: track.filename,\n          duration: track.duration ? `${Math.floor(track.duration / 60)}:${(track.duration % 60).toString().padStart(2, '0')}` : \"--:--\"\n        }));\n      }\n    }\n\n    // Fallback to default wedding playlist if no active custom tracks\n    return [\n      {\n        title: \"A Thousand Years\",\n        artist: \"Christina Perri\",\n        src: \"/music/a-thousand-years.mp3\",\n        duration: \"4:45\"\n      },\n      {\n        title: \"Perfect\",\n        artist: \"Ed Sheeran\",\n        src: \"/music/perfect.mp3\",\n        duration: \"4:23\"\n      },\n      {\n        title: \"Can't Help Falling In Love\",\n        artist: \"Kina Grannis\",\n        src: \"/music/cant-help-falling-in-love.mp3\",\n        duration: \"3:21\"\n      },\n      {\n        title: \"Marry Me\",\n        artist: \"Train\",\n        src: \"/music/marry-me.mp3\",\n        duration: \"3:52\"\n      }\n    ];\n  })();\n\n  // Validate and clamp currentSongIndex to prevent crashes when playlist length changes\n  useEffect(() => {\n    if (currentSongIndex >= playlist.length) {\n      setCurrentSongIndex(0);\n    }\n  }, [playlist.length, currentSongIndex]);\n\n  const currentSong = playlist[currentSongIndex] || playlist[0];\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const updateTime = () => setCurrentTime(audio.currentTime);\n    const updateDuration = () => setDuration(audio.duration);\n\n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('loadedmetadata', updateDuration);\n\n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('loadedmetadata', updateDuration);\n    };\n  }, []);\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    if (isPlaying) {\n      audio.play().catch(console.error);\n    } else {\n      audio.pause();\n    }\n  }, [isPlaying]);\n\n  // Reload audio and restart playback when music tracks change\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    // Force reload audio element when tracks change\n    audio.load();\n    \n    // Restart playback if music was playing\n    if (isPlaying) {\n      audio.play().catch(console.error);\n    }\n  }, [musicTracks]);\n\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    audio.muted = isMuted;\n  }, [isMuted]);\n\n  // Persist state to localStorage\n  useEffect(() => {\n    localStorage.setItem('musicPlayer_isPlaying', String(isPlaying));\n  }, [isPlaying]);\n\n  useEffect(() => {\n    localStorage.setItem('musicPlayer_isMuted', String(isMuted));\n  }, [isMuted]);\n\n  useEffect(() => {\n    localStorage.setItem('musicPlayer_currentSongIndex', String(currentSongIndex));\n  }, [currentSongIndex]);\n\n  // Auto-play after first user interaction\n  useEffect(() => {\n    const tryAutoPlay = async () => {\n      const audio = audioRef.current;\n      if (!audio) return;\n\n      try {\n        await audio.play();\n        setIsPlaying(true);\n      } catch (error) {\n        // If autoplay fails, set up listeners for user interaction\n        const enableAudio = async () => {\n          try {\n            await audio.play();\n            setIsPlaying(true);\n            // Remove listeners after successful play\n            document.removeEventListener('click', enableAudio);\n            document.removeEventListener('touchstart', enableAudio);\n            document.removeEventListener('scroll', enableAudio);\n          } catch (err) {\n            console.error('Failed to play audio:', err);\n          }\n        };\n\n        document.addEventListener('click', enableAudio, { once: true });\n        document.addEventListener('touchstart', enableAudio, { once: true });\n        document.addEventListener('scroll', enableAudio, { once: true });\n      }\n    };\n\n    // Try to autoplay after a short delay\n    const timer = setTimeout(tryAutoPlay, 1000);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const togglePlay = () => {\n    setIsPlaying(!isPlaying);\n  };\n\n  const toggleMute = () => {\n    setIsMuted(!isMuted);\n  };\n\n  const nextSong = () => {\n    setCurrentSongIndex((prev) => (prev + 1) % playlist.length);\n    setIsPlaying(true);\n  };\n\n  const prevSong = () => {\n    setCurrentSongIndex((prev) => (prev - 1 + playlist.length) % playlist.length);\n    setIsPlaying(true);\n  };\n\n  const handleProgressClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    const audio = audioRef.current;\n    if (!audio) return;\n\n    const rect = e.currentTarget.getBoundingClientRect();\n    const percent = (e.clientX - rect.left) / rect.width;\n    audio.currentTime = percent * duration;\n  };\n\n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <>\n      {/* Hidden Audio Element */}\n      <audio\n        ref={audioRef}\n        src={currentSong.src}\n        onEnded={nextSong}\n        preload=\"metadata\"\n        autoPlay\n        loop={playlist.length === 1}\n      />\n\n      {/* Music Player */}\n      <motion.div\n        className=\"fixed bottom-4 right-4 md:bottom-6 md:right-6 z-40\"\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ \n          type: \"spring\",\n          stiffness: 300,\n          damping: 20,\n          delay: 2 \n        }}\n      >\n        <motion.div\n          className={`bg-card/95 backdrop-blur-xl border border-card-border/50 shadow-2xl transition-all duration-300 ${\n            isExpanded ? \"rounded-2xl w-[90vw] max-w-sm md:w-80\" : \"rounded-2xl\"\n          }`}\n          layout\n        >\n          {/* Compact View */}\n          <AnimatePresence mode=\"wait\">\n            {!isExpanded ? (\n              <motion.div\n                key=\"compact\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"p-4\"\n              >\n                <div className=\"flex items-center gap-2 md:gap-3\">\n                  {/* Vinyl Record */}\n                  <motion.div\n                    className=\"relative cursor-pointer flex-shrink-0\"\n                    onClick={() => setIsExpanded(true)}\n                    whileHover={{ scale: 1.1 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <motion.div\n                      className={`w-10 h-10 md:w-12 md:h-12 rounded-full bg-gradient-to-br from-primary via-primary/80 to-primary/60 border-4 border-card shadow-lg flex items-center justify-center ${\n                        isPlaying ? \"animate-spin-slow\" : \"\"\n                      }`}\n                      animate={isPlaying ? { rotate: 360 } : {}}\n                      transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n                    >\n                      <div className=\"w-2 h-2 bg-card rounded-full\" />\n                    </motion.div>\n                    <motion.div\n                      className=\"absolute -top-1 -right-1 bg-primary rounded-full p-1 shadow-lg\"\n                      animate={{ scale: [1, 1.2, 1] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <Music size={8} className=\"text-white md:w-2.5 md:h-2.5\" />\n                    </motion.div>\n                  </motion.div>\n\n                  {/* Controls */}\n                  <div className=\"flex items-center gap-0.5 md:gap-1 flex-shrink-0\">\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={togglePlay}\n                      className=\"rounded-full w-9 h-9 md:w-8 md:h-8 touch-manipulation\"\n                      data-testid=\"button-toggle-music\"\n                    >\n                      <motion.div\n                        whileHover={{ scale: 1.2 }}\n                        whileTap={{ scale: 0.8 }}\n                      >\n                        {isPlaying ? <Pause size={16} className=\"md:w-3.5 md:h-3.5\" /> : <Play size={16} className=\"md:w-3.5 md:h-3.5\" />}\n                      </motion.div>\n                    </Button>\n                    <Button\n                      size=\"icon\"\n                      variant=\"ghost\"\n                      onClick={toggleMute}\n                      className=\"rounded-full w-9 h-9 md:w-8 md:h-8 touch-manipulation\"\n                      data-testid=\"button-toggle-mute\"\n                    >\n                      <motion.div\n                        whileHover={{ scale: 1.2 }}\n                        whileTap={{ scale: 0.8 }}\n                      >\n                        {isMuted ? <VolumeX size={16} className=\"md:w-3.5 md:h-3.5\" /> : <Volume2 size={16} className=\"md:w-3.5 md:h-3.5\" />}\n                      </motion.div>\n                    </Button>\n                  </div>\n\n                  {/* Now Playing - Compact */}\n                  <div \n                    className=\"flex-1 min-w-0 cursor-pointer hidden sm:block\"\n                    onClick={() => setIsExpanded(true)}\n                  >\n                    <p className=\"text-xs text-muted-foreground truncate\">Đang Phát</p>\n                    <p className=\"text-sm font-medium text-foreground truncate\">\n                      {currentSong.title}\n                    </p>\n                  </div>\n                </div>\n              </motion.div>\n            ) : (\n              /* Expanded View */\n              <motion.div\n                key=\"expanded\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n                className=\"p-6\"\n              >\n                {/* Header */}\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-semibold text-foreground flex items-center gap-2\">\n                    <Music size={16} />\n                    Wedding Playlist\n                  </h3>\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={() => setIsExpanded(false)}\n                    className=\"rounded-full w-6 h-6\"\n                  >\n                    <motion.div whileHover={{ rotate: 90 }} transition={{ duration: 0.2 }}>\n                      <Pause size={12} />\n                    </motion.div>\n                  </Button>\n                </div>\n\n                {/* Vinyl and Song Info */}\n                <div className=\"flex items-center gap-4 mb-6\">\n                  <motion.div\n                    className=\"flex-shrink-0\"\n                    animate={isPlaying ? { rotate: 360 } : {}}\n                    transition={{ duration: 8, repeat: Infinity, ease: \"linear\" }}\n                  >\n                    <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-primary via-primary/80 to-primary/60 border-4 border-card shadow-xl flex items-center justify-center\">\n                      <div className=\"w-3 h-3 bg-card rounded-full\" />\n                    </div>\n                  </motion.div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"font-semibold text-foreground text-lg truncate\">\n                      {currentSong.title}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground truncate\">\n                      {currentSong.artist}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {currentSong.duration}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Progress Bar */}\n                <div className=\"mb-4\">\n                  <div\n                    className=\"w-full h-1 bg-muted rounded-full cursor-pointer\"\n                    onClick={handleProgressClick}\n                  >\n                    <motion.div\n                      className=\"h-full bg-primary rounded-full\"\n                      initial={{ width: 0 }}\n                      animate={{ width: `${(currentTime / duration) * 100}%` }}\n                      transition={{ duration: 0.1 }}\n                    />\n                  </div>\n                  <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                    <span>{formatTime(currentTime)}</span>\n                    <span>{formatTime(duration)}</span>\n                  </div>\n                </div>\n\n                {/* Controls */}\n                <div className=\"flex items-center justify-center gap-3 md:gap-2 mb-4\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={prevSong}\n                    className=\"rounded-full w-11 h-11 md:w-10 md:h-10 touch-manipulation\"\n                  >\n                    <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n                      <SkipBack size={18} className=\"md:w-4 md:h-4\" />\n                    </motion.div>\n                  </Button>\n                  \n                  <Button\n                    size=\"icon\"\n                    onClick={togglePlay}\n                    className=\"rounded-full w-14 h-14 md:w-12 md:h-12 bg-primary hover:bg-primary/90 touch-manipulation\"\n                  >\n                    <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n                      {isPlaying ? <Pause size={22} className=\"md:w-5 md:h-5\" /> : <Play size={22} className=\"md:w-5 md:h-5\" />}\n                    </motion.div>\n                  </Button>\n                  \n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={nextSong}\n                    className=\"rounded-full w-11 h-11 md:w-10 md:h-10 touch-manipulation\"\n                  >\n                    <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n                      <SkipForward size={18} className=\"md:w-4 md:h-4\" />\n                    </motion.div>\n                  </Button>\n                </div>\n\n                {/* Volume and Mute */}\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={toggleMute}\n                    className=\"rounded-full w-8 h-8\"\n                  >\n                    <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n                      {isMuted ? <VolumeX size={14} /> : <Volume2 size={14} />}\n                    </motion.div>\n                  </Button>\n                  <div className=\"flex-1 h-1 bg-muted rounded-full\">\n                    <div className=\"h-full bg-primary rounded-full w-3/4\" />\n                  </div>\n                </div>\n\n                {/* Playlist */}\n                <div className=\"mt-4 space-y-2 max-h-32 overflow-y-auto\">\n                  {playlist.map((song, index) => (\n                    <motion.div\n                      key={song.title}\n                      className={`p-2 rounded-lg cursor-pointer text-sm ${\n                        index === currentSongIndex\n                          ? 'bg-primary/10 text-primary font-medium'\n                          : 'hover:bg-muted/50'\n                      }`}\n                      onClick={() => {\n                        setCurrentSongIndex(index);\n                        setIsPlaying(true);\n                      }}\n                      whileHover={{ x: 4 }}\n                      transition={{ type: \"spring\", stiffness: 400 }}\n                    >\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"truncate\">{song.title}</span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {song.duration}\n                        </span>\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </motion.div>\n      </motion.div>\n    </>\n  );\n}","size_bytes":17733},"client/src/pages/AdminGallery.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Image as ImageIcon, \n  Plus, \n  Trash2, \n  Pencil, \n  Eye, \n  Download, \n  Search, \n  Filter,\n  Upload,\n  X,\n  CloudUpload\n} from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Photo, InsertPhoto } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\n\nexport default function AdminGallery() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPhoto, setEditingPhoto] = useState<Photo | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [previewImage, setPreviewImage] = useState<string | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const { data: photos = [], isLoading } = useQuery<Photo[]>({\n    queryKey: [\"/api/photos\"],\n  });\n\n  // Filter photos based on search and category\n  const filteredPhotos = photos.filter(photo => {\n    const matchesSearch = photo.caption?.toLowerCase().includes(searchTerm.toLowerCase()) || \n                         photo.category?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || photo.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = Array.from(new Set(photos.map(photo => photo.category).filter(Boolean)));\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertPhoto) => {\n      return await apiRequest(\"POST\", \"/api/photos\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\"] });\n      toast({ \n        title: \"✅ Thêm ảnh thành công\",\n        description: \"Ảnh đã được thêm vào thư viện\"\n      });\n      setIsDialogOpen(false);\n      setUploading(false);\n      setUploadProgress(0);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể thêm ảnh\",\n        variant: \"destructive\",\n      });\n      setUploading(false);\n      setUploadProgress(0);\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertPhoto> }) => {\n      return await apiRequest(\"PATCH\", `/api/photos/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\"] });\n      toast({ \n        title: \"✅ Cập nhật ảnh thành công\",\n        description: \"Thông tin ảnh đã được cập nhật\"\n      });\n      setIsDialogOpen(false);\n      setEditingPhoto(null);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật ảnh\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/photos/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/photos\"] });\n      toast({ \n        title: \"🗑️ Xóa ảnh thành công\",\n        description: \"Ảnh đã được xóa khỏi thư viện\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa ảnh\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh (JPEG, PNG, WebP)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (10MB)\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(0);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file, (progress) => {\n        setUploadProgress(progress);\n      });\n\n      // Auto-fill the URL field with the uploaded image URL\n      const urlInput = document.getElementById('url') as HTMLInputElement;\n      if (urlInput) {\n        urlInput.value = imageUrl;\n      }\n\n      toast({\n        title: \"✅ Tải lên thành công!\",\n        description: \"Ảnh đã được tải lên Cloudinary\",\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      // Reset file input\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data: InsertPhoto = {\n      url: formData.get(\"url\") as string,\n      caption: formData.get(\"caption\") as string,\n      category: formData.get(\"category\") as string || \"gallery\",\n      order: parseInt(formData.get(\"order\") as string) || 0,\n    };\n\n    if (editingPhoto) {\n      updateMutation.mutate({ id: editingPhoto.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -8,\n      scale: 1.02,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Hidden file input */}\n      <input\n        type=\"file\"\n        ref={fileInputRef}\n        onChange={handleFileSelect}\n        accept=\"image/*\"\n        multiple\n        className=\"hidden\"\n      />\n\n      {/* Header */}\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div className=\"flex justify-between items-center mb-6\" variants={itemVariants}>\n          <div>\n            <h2 className=\"text-3xl font-serif mb-2 text-foreground\">📸 Thư Viện Ảnh</h2>\n            <p className=\"text-muted-foreground\">Quản lý ảnh đám cưới của bạn</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                onClick={() => setEditingPhoto(null)}\n                className=\"rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n              >\n                <Plus size={18} className=\"mr-2\" />\n                Thêm Ảnh\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  {editingPhoto ? \"✏️ Chỉnh Sửa Ảnh\" : \"🖼️ Thêm Ảnh Mới\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"url\" className=\"text-sm font-medium\">URL Hình Ảnh *</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      id=\"url\"\n                      name=\"url\"\n                      type=\"url\"\n                      required\n                      placeholder=\"https://example.com/photo.jpg\"\n                      defaultValue={editingPhoto?.url}\n                      className=\"flex-1\"\n                    />\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"icon\" \n                      onClick={triggerFileInput}\n                      disabled={uploading}\n                    >\n                      {uploading ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          ⏳\n                        </motion.div>\n                      ) : (\n                        <CloudUpload size={16} />\n                      )}\n                    </Button>\n                  </div>\n                  \n                  {/* Upload Progress */}\n                  {uploading && (\n                    <div className=\"space-y-2\">\n                      <Progress value={uploadProgress} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground text-center\">\n                        Đang tải lên... {Math.round(uploadProgress)}%\n                      </p>\n                    </div>\n                  )}\n\n                  {/* Upload Instructions */}\n                  <p className=\"text-xs text-muted-foreground\">\n                    Nhập URL hoặc tải lên từ thiết bị (JPEG, PNG, WebP, tối đa 10MB)\n                  </p>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"caption\" className=\"text-sm font-medium\">Chú Thích</Label>\n                  <Textarea\n                    id=\"caption\"\n                    name=\"caption\"\n                    rows={3}\n                    placeholder=\"Mô tả bức ảnh này...\"\n                    defaultValue={editingPhoto?.caption || \"\"}\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"category\" className=\"text-sm font-medium\">Danh Mục</Label>\n                    <Input\n                      id=\"category\"\n                      name=\"category\"\n                      placeholder=\"engagement, wedding, etc.\"\n                      defaultValue={editingPhoto?.category || \"gallery\"}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"order\" className=\"text-sm font-medium\">Thứ Tự</Label>\n                    <Input\n                      id=\"order\"\n                      name=\"order\"\n                      type=\"number\"\n                      min=\"0\"\n                      defaultValue={editingPhoto?.order || 0}\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsDialogOpen(false);\n                      setUploading(false);\n                      setUploadProgress(0);\n                    }}\n                    className=\"rounded-lg\"\n                  >\n                    Hủy\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"rounded-lg shadow-lg\"\n                    disabled={createMutation.isPending || updateMutation.isPending || uploading}\n                  >\n                    {editingPhoto ? \"💾 Cập Nhật\" : \"📤 Thêm\"} Ảnh\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </motion.div>\n\n        {/* Search and Filter */}\n        <motion.div className=\"flex flex-col sm:flex-row gap-4 mb-6\" variants={itemVariants}>\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\" size={18} />\n            <Input\n              placeholder=\"🔍 Tìm kiếm ảnh theo chú thích hoặc danh mục...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 rounded-xl\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n              <SelectTrigger className=\"w-40 rounded-xl\">\n                <Filter size={16} className=\"mr-2\" />\n                <SelectValue placeholder=\"Tất cả danh mục\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">🎯 Tất cả</SelectItem>\n                {categories.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </motion.div>\n\n        {/* Stats */}\n        <motion.div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\" variants={itemVariants}>\n          <Card className=\"bg-primary/5 border-primary/20 rounded-2xl\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-primary\">{photos.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Tổng số ảnh</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-blue-500/5 border-blue-500/20 rounded-2xl\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-blue-500\">{categories.length}</p>\n              <p className=\"text-sm text-muted-foreground\">Danh mục</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-green-500/5 border-green-500/20 rounded-2xl\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-green-500\">\n                {photos.filter(p => p.category === 'wedding').length}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Ảnh cưới</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-purple-500/5 border-purple-500/20 rounded-2xl\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-purple-500\">\n                {photos.filter(p => p.category === 'engagement').length}\n              </p>\n              <p className=\"text-sm text-muted-foreground\">Ảnh đính hôn</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n\n      {/* Gallery Grid */}\n      {isLoading ? (\n        <motion.div\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          {[...Array(8)].map((_, i) => (\n            <motion.div key={i} variants={itemVariants}>\n              <Card className=\"animate-pulse overflow-hidden rounded-2xl\">\n                <div className=\"aspect-square bg-muted\" />\n                <CardContent className=\"p-4 space-y-2\">\n                  <div className=\"h-4 bg-muted rounded w-3/4\" />\n                  <div className=\"h-3 bg-muted rounded w-1/2\" />\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n      ) : (\n        <motion.div\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <AnimatePresence>\n            {filteredPhotos.length === 0 ? (\n              <motion.div\n                className=\"col-span-full\"\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.6 }}\n              >\n                <Card className=\"border-dashed rounded-2xl\">\n                  <CardContent className=\"py-16 text-center text-muted-foreground\">\n                    <ImageIcon size={64} className=\"mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-lg mb-2\">Không tìm thấy ảnh nào</p>\n                    <p>Thử thay đổi bộ lọc hoặc thêm ảnh mới</p>\n                    <Button \n                      className=\"mt-4 rounded-xl\"\n                      onClick={() => setIsDialogOpen(true)}\n                    >\n                      <Plus size={18} className=\"mr-2\" />\n                      Thêm Ảnh Đầu Tiên\n                    </Button>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ) : (\n              filteredPhotos.map((photo, index) => (\n                <motion.div\n                  key={photo.id}\n                  variants={cardVariants}\n                  initial=\"hidden\"\n                  animate=\"visible\"\n                  whileHover=\"hover\"\n                  exit=\"hidden\"\n                  transition={{ delay: index * 0.1 }}\n                >\n                  <Card className=\"group overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 border-0 bg-card/50 backdrop-blur-sm rounded-2xl\">\n                    <div className=\"relative aspect-square overflow-hidden\">\n                      <motion.img\n                        src={photo.url}\n                        alt={photo.caption || \"Ảnh đám cưới\"}\n                        className=\"w-full h-full object-cover cursor-pointer\"\n                        whileHover={{ scale: 1.1 }}\n                        transition={{ duration: 0.3 }}\n                        onClick={() => setPreviewImage(photo.url)}\n                      />\n                      \n                      {/* Overlay Actions */}\n                      <motion.div\n                        className=\"absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-center justify-center gap-2\"\n                        initial={{ opacity: 0 }}\n                        whileHover={{ opacity: 1 }}\n                      >\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          className=\"rounded-full shadow-lg bg-white/20 hover:bg-white/30 backdrop-blur-sm\"\n                          onClick={() => setPreviewImage(photo.url)}\n                        >\n                          <Eye size={16} />\n                        </Button>\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          className=\"rounded-full shadow-lg bg-white/20 hover:bg-white/30 backdrop-blur-sm\"\n                          onClick={() => {\n                            setEditingPhoto(photo);\n                            setIsDialogOpen(true);\n                          }}\n                        >\n                          <Pencil size={16} />\n                        </Button>\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          className=\"rounded-full shadow-lg bg-destructive/20 hover:bg-destructive/30 backdrop-blur-sm\"\n                          onClick={() => {\n                            if (confirm(\"Bạn có chắc muốn xóa ảnh này?\")) {\n                              deleteMutation.mutate(photo.id);\n                            }\n                          }}\n                        >\n                          <Trash2 size={16} className=\"text-destructive\" />\n                        </Button>\n                      </motion.div>\n\n                      {/* Category Badge */}\n                      {photo.category && (\n                        <Badge \n                          variant=\"secondary\" \n                          className=\"absolute top-3 left-3 bg-black/70 text-white border-0 backdrop-blur-sm rounded-full px-3 py-1\"\n                        >\n                          {photo.category}\n                        </Badge>\n                      )}\n                    </div>\n                    \n                    <CardContent className=\"p-4\">\n                      {photo.caption && (\n                        <p className=\"text-sm text-foreground line-clamp-2 mb-2 font-medium\">\n                          {photo.caption}\n                        </p>\n                      )}\n                      <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                        <span>Thứ tự: {photo.order}</span>\n                        <span>\n                          {new Date(photo.createdAt!).toLocaleDateString('vi-VN')}\n                        </span>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))\n            )}\n          </AnimatePresence>\n        </motion.div>\n      )}\n\n      {/* Image Preview Dialog */}\n      <Dialog open={!!previewImage} onOpenChange={() => setPreviewImage(null)}>\n        <DialogContent className=\"max-w-4xl p-0 bg-transparent border-0 shadow-none\">\n          <div className=\"relative\">\n            {previewImage && (\n              <img\n                src={previewImage}\n                alt=\"Preview\"\n                className=\"w-full h-auto rounded-2xl shadow-2xl\"\n              />\n            )}\n            <Button\n              variant=\"secondary\"\n              size=\"icon\"\n              className=\"absolute top-4 right-4 rounded-full bg-black/50 hover:bg-black/70 text-white backdrop-blur-sm\"\n              onClick={() => setPreviewImage(null)}\n            >\n              <X size={20} />\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </motion.div>\n  );\n}","size_bytes":23607},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  username: string;\n  name?: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":334},"client/src/pages/AdminHome.tsx":{"content":"import { Users, MessageSquare, Calendar, Heart, Gift, Image, TrendingUp, Clock, CheckCircle, XCircle, Eye, LayoutDashboard } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { motion } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Rsvp, GuestMessage, Photo, RegistryItem, CoupleInfo } from \"@shared/schema\";\n\nexport default function AdminHome() {\n  // Fetch real data from database\n  const { data: rsvps = [] } = useQuery<Rsvp[]>({\n    queryKey: ['/api/rsvps'],\n  });\n\n  const { data: messages = [] } = useQuery<GuestMessage[]>({\n    queryKey: ['/api/messages'],\n  });\n\n  const { data: photos = [] } = useQuery<Photo[]>({\n    queryKey: ['/api/photos'],\n  });\n\n  const { data: registryItems = [] } = useQuery<RegistryItem[]>({\n    queryKey: ['/api/registry'],\n  });\n\n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: ['/api/couple'],\n  });\n\n  // Calculate real statistics\n  const attendingCount = rsvps.filter(r => r.attending).length;\n  const decliningCount = rsvps.filter(r => !r.attending).length;\n  const pendingMessages = messages.filter(m => !m.approved).length;\n  const purchasedItems = registryItems.filter(i => i.isPurchased).length;\n  const totalGuests = rsvps.reduce((sum, rsvp) => sum + (rsvp.attending ? rsvp.guestCount : 0), 0);\n  const responseRate = rsvps.length > 0 ? Math.round((rsvps.length / (rsvps.length + 25)) * 100) : 0; // Assuming 25 more expected\n  const purchaseProgress = registryItems.length > 0 ? Math.round((purchasedItems / registryItems.length) * 100) : 0;\n\n  // Calculate days until wedding\n  const weddingDate = coupleInfo?.weddingDate ? new Date(coupleInfo.weddingDate) : new Date('2025-06-15');\n  const today = new Date();\n  const daysUntilWedding = Math.max(0, Math.ceil((weddingDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24)));\n\n  const stats = [\n    {\n      title: \"Tổng Số RSVP\",\n      value: rsvps.length.toString(),\n      icon: Users,\n      description: `${attendingCount} tham dự, ${decliningCount} từ chối`,\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\",\n      borderColor: \"border-blue-500/20\",\n      trend: `${totalGuests} khách tổng`,\n      trendUp: true,\n      progress: attendingCount > 0 ? Math.round((attendingCount / rsvps.length) * 100) : 0\n    },\n    {\n      title: \"Tin Nhắn Khách Mời\",\n      value: messages.length.toString(),\n      icon: MessageSquare,\n      description: `${pendingMessages} chờ phê duyệt`,\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500/10\",\n      borderColor: \"border-green-500/20\",\n      trend: pendingMessages > 0 ? `+${pendingMessages} mới` : \"Đã xử lý hết\",\n      trendUp: messages.length > 0,\n      progress: messages.length > 0 ? Math.round(((messages.length - pendingMessages) / messages.length) * 100) : 100\n    },\n    {\n      title: \"Số Ngày Đến Đám Cưới\",\n      value: daysUntilWedding.toString(),\n      icon: Calendar,\n      description: weddingDate.toLocaleDateString('vi-VN', { day: '2-digit', month: 'long', year: 'numeric' }),\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\",\n      borderColor: \"border-orange-500/20\",\n      trend: \"Đang đếm ngược\",\n      trendUp: false,\n      progress: Math.max(0, 100 - Math.round((daysUntilWedding / 365) * 100))\n    },\n    {\n      title: \"Thư Viện Ảnh\",\n      value: photos.length.toString(),\n      icon: Image,\n      description: \"Ảnh đã tải lên\",\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\",\n      borderColor: \"border-purple-500/20\",\n      trend: photos.length > 0 ? `${photos.length} ảnh` : \"Chưa có ảnh\",\n      trendUp: photos.length > 0,\n      progress: Math.min(100, photos.length * 2)\n    },\n    {\n      title: \"Quà Đã Đăng Ký\",\n      value: registryItems.length.toString(),\n      icon: Gift,\n      description: `${purchasedItems} đã được mua`,\n      color: \"text-pink-500\",\n      bgColor: \"bg-pink-500/10\",\n      borderColor: \"border-pink-500/20\",\n      trend: `${purchaseProgress}% hoàn thành`,\n      trendUp: purchasedItems > 0,\n      progress: purchaseProgress\n    },\n    {\n      title: \"Tỷ Lệ Phản Hồi\",\n      value: `${responseRate}%`,\n      icon: TrendingUp,\n      description: `${rsvps.length} đã phản hồi`,\n      color: \"text-cyan-500\",\n      bgColor: \"bg-cyan-500/10\",\n      borderColor: \"border-cyan-500/20\",\n      trend: rsvps.length > 0 ? `${rsvps.length} phản hồi` : \"Chưa có phản hồi\",\n      trendUp: true,\n      progress: responseRate\n    },\n  ];\n\n  // Get recent RSVPs\n  const recentRsvps = [...rsvps]\n    .sort((a, b) => {\n      const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return dateB - dateA;\n    })\n    .slice(0, 5);\n\n  // Get recent messages\n  const recentMessages = [...messages]\n    .sort((a, b) => {\n      const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;\n      const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;\n      return dateB - dateA;\n    })\n    .slice(0, 3);\n\n  // Get recent activity - combine RSVPs and Messages\n  const recentActivity = [\n    ...recentRsvps\n      .filter(r => r.createdAt)\n      .map(r => ({\n        type: 'rsvp' as const,\n        name: r.guestName,\n        action: r.attending ? 'đã xác nhận tham dự' : 'đã từ chối tham dự',\n        time: formatTimeAgo(new Date(r.createdAt!)),\n        timestamp: new Date(r.createdAt!).getTime()\n      })),\n    ...recentMessages\n      .filter(m => m.createdAt)\n      .map(m => ({\n        type: 'message' as const,\n        name: m.guestName,\n        action: 'đã gửi lời chúc',\n        time: formatTimeAgo(new Date(m.createdAt!)),\n        timestamp: new Date(m.createdAt!).getTime()\n      })),\n  ].sort((a, b) => b.timestamp - a.timestamp).slice(0, 8);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.08\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -8,\n      scale: 1.02,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'rsvp': return <Users size={18} className=\"text-blue-500\" />;\n      case 'message': return <MessageSquare size={18} className=\"text-green-500\" />;\n      case 'gift': return <Gift size={18} className=\"text-pink-500\" />;\n      case 'photo': return <Image size={18} className=\"text-purple-500\" />;\n      default: return <Heart size={18} className=\"text-primary\" />;\n    }\n  };\n\n  const getActivityColor = (type: string) => {\n    switch (type) {\n      case 'rsvp': return 'bg-blue-500/10 text-blue-600 border-blue-500/20';\n      case 'message': return 'bg-green-500/10 text-green-600 border-green-500/20';\n      case 'gift': return 'bg-pink-500/10 text-pink-600 border-pink-500/20';\n      case 'photo': return 'bg-purple-500/10 text-purple-600 border-purple-500/20';\n      default: return 'bg-primary/10 text-primary border-primary/20';\n    }\n  };\n\n  function formatTimeAgo(date: Date): string {\n    const now = new Date();\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) return `${diffInSeconds} giây trước`;\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} phút trước`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} giờ trước`;\n    return `${Math.floor(diffInSeconds / 86400)} ngày trước`;\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"space-y-8\"\n    >\n      {/* Header */}\n      <motion.div \n        className=\"space-y-4\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div variants={itemVariants} className=\"flex items-center gap-4\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-rose-500 via-pink-500 to-rose-400 rounded-3xl flex items-center justify-center shadow-2xl ring-4 ring-rose-500/20\">\n            <LayoutDashboard size={32} className=\"text-white\" />\n          </div>\n          <div>\n            <h2 className=\"text-4xl font-serif font-bold text-foreground mb-2\">\n              Tổng Quan Bảng Điều Khiển\n            </h2>\n            <p className=\"text-lg text-muted-foreground\">\n              Chào mừng trở lại! Đây là tổng quan về đám cưới của bạn.\n            </p>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      {/* Stats Grid */}\n      <motion.div \n        className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        {stats.map((stat, index) => (\n          <motion.div\n            key={index}\n            variants={cardVariants}\n            whileHover=\"hover\"\n            className=\"h-full\"\n          >\n            <Card className={`border-2 ${stat.borderColor} ${stat.bgColor} backdrop-blur-sm relative overflow-hidden group h-full`}>\n              {/* Animated Background */}\n              <div className=\"absolute inset-0 bg-gradient-to-br from-transparent to-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n              \n              <CardContent className=\"p-6 relative z-10 h-full flex flex-col\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className={`p-3 rounded-2xl ${stat.bgColor} border ${stat.borderColor}`}>\n                    <stat.icon className={`h-6 w-6 ${stat.color}`} />\n                  </div>\n                  <Badge \n                    variant={stat.trendUp ? \"default\" : \"secondary\"} \n                    className={`text-xs font-medium ${\n                      stat.trendUp \n                        ? 'bg-green-500/20 text-green-600 hover:bg-green-500/30 border-green-500/30' \n                        : 'bg-orange-500/20 text-orange-600 hover:bg-orange-500/30 border-orange-500/30'\n                    }`}\n                  >\n                    {stat.trendUp ? \"↗\" : \"↘\"} {stat.trend}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-3 flex-1\">\n                  <div>\n                    <h3 className=\"text-sm font-medium text-foreground/80 mb-1\">\n                      {stat.title}\n                    </h3>\n                    <div className=\"text-3xl font-bold text-foreground mb-2\" data-testid={`stat-${stat.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {stat.value}\n                    </div>\n                    <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                      {stat.description}\n                    </p>\n                  </div>\n\n                  {stat.progress !== undefined && (\n                    <div className=\"space-y-2\">\n                      <Progress value={stat.progress} className=\"h-2 bg-muted/50\" />\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>Tiến độ</span>\n                        <span>{stat.progress}%</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n      </motion.div>\n\n      {/* Main Content Grid */}\n      <div className=\"grid gap-8 lg:grid-cols-2 xl:grid-cols-3\">\n        {/* Recent Activity */}\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"xl:col-span-2\"\n        >\n          <Card className=\"border-2 border-border/50 shadow-lg h-full\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"flex items-center gap-3 text-xl\">\n                  <div className=\"p-2 bg-blue-500/10 rounded-xl\">\n                    <Clock className=\"text-blue-500\" size={24} />\n                  </div>\n                  <div>\n                    Hoạt Động Gần Đây\n                    <CardDescription className=\"text-base mt-1\">\n                      Cập nhật mới nhất từ hệ thống\n                    </CardDescription>\n                  </div>\n                </CardTitle>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {recentActivity.length > 0 ? (\n                <div className=\"divide-y divide-border/50\">\n                  {recentActivity.map((activity, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"flex items-center gap-4 p-6 hover:bg-muted/30 transition-all duration-300 group\"\n                      variants={itemVariants}\n                      whileHover={{ x: 8 }}\n                    >\n                      <div className={`p-3 rounded-xl border ${getActivityColor(activity.type)}`}>\n                        {getActivityIcon(activity.type)}\n                      </div>\n                      <div className=\"flex-1 min-w-0 space-y-1\">\n                        <p className=\"font-semibold text-foreground text-base\">\n                          {activity.name}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground capitalize\">\n                          {activity.action}\n                        </p>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground whitespace-nowrap bg-muted/50 px-3 py-1 rounded-full\">\n                        {activity.time}\n                      </div>\n                    </motion.div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"p-12 text-center text-muted-foreground\">\n                  Chưa có hoạt động nào\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Right Column */}\n        <div className=\"space-y-8\">\n          {/* Recent RSVPs */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            <Card className=\"border-2 border-blue-500/20 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3 text-xl\">\n                  <div className=\"p-2 bg-blue-500/10 rounded-xl\">\n                    <Users className=\"text-blue-500\" size={24} />\n                  </div>\n                  <div>\n                    RSVP Gần Đây\n                    <CardDescription className=\"text-base mt-1\">\n                      Phản hồi mới nhất\n                    </CardDescription>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {recentRsvps.length > 0 ? (\n                  <div className=\"divide-y divide-border/50\">\n                    {recentRsvps.map((rsvp, i) => (\n                      <motion.div\n                        key={rsvp.id}\n                        className=\"flex items-center justify-between p-6 hover:bg-muted/30 transition-all duration-300 group\"\n                        variants={itemVariants}\n                      >\n                        <div className=\"flex items-center gap-4\">\n                          <div className={`p-2 rounded-xl ${\n                            rsvp.attending\n                              ? \"bg-green-500/10 text-green-600 border border-green-500/20\" \n                              : \"bg-red-500/10 text-red-600 border border-red-500/20\"\n                          }`}>\n                            {rsvp.attending ? \n                              <CheckCircle size={18} /> : \n                              <XCircle size={18} />\n                            }\n                          </div>\n                          <div className=\"space-y-1\">\n                            <p className=\"font-semibold text-foreground text-base\">{rsvp.guestName}</p>\n                            <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                              <span>{rsvp.attending ? \"Tham dự\" : \"Từ chối\"}</span>\n                              {rsvp.guestCount > 0 && rsvp.attending && (\n                                <>\n                                  <span>•</span>\n                                  <span>{rsvp.guestCount} khách</span>\n                                </>\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground whitespace-nowrap bg-muted/50 px-3 py-1 rounded-full\">\n                          {rsvp.createdAt ? formatTimeAgo(new Date(rsvp.createdAt)) : 'Vừa xong'}\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"p-8 text-center text-muted-foreground\">\n                    Chưa có RSVP nào\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Recent Messages */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            <Card className=\"border-2 border-green-500/20 shadow-lg\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center gap-3 text-xl\">\n                  <div className=\"p-2 bg-green-500/10 rounded-xl\">\n                    <MessageSquare className=\"text-green-500\" size={24} />\n                  </div>\n                  <div>\n                    Tin Nhắn Gần Đây\n                    <CardDescription className=\"text-base mt-1\">\n                      Lời chúc mới nhất\n                    </CardDescription>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                {recentMessages.length > 0 ? (\n                  <div className=\"divide-y divide-border/50\">\n                    {recentMessages.map((msg, i) => (\n                      <motion.div\n                        key={msg.id}\n                        className=\"p-6 hover:bg-muted/30 transition-all duration-300 group cursor-pointer\"\n                        variants={itemVariants}\n                        whileHover={{ x: 4 }}\n                      >\n                        <div className=\"flex items-start justify-between mb-3\">\n                          <p className=\"font-semibold text-foreground text-base\">{msg.guestName}</p>\n                          <div className=\"text-sm text-muted-foreground whitespace-nowrap bg-muted/50 px-3 py-1 rounded-full\">\n                            {msg.createdAt ? formatTimeAgo(new Date(msg.createdAt)) : 'Vừa xong'}\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed group-hover:text-foreground/80 transition-colors\">\n                          {msg.message}\n                        </p>\n                      </motion.div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"p-8 text-center text-muted-foreground\">\n                    Chưa có tin nhắn nào\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":20445},"client/src/components/LoadingScreen.tsx":{"content":"import { motion, AnimatePresence } from \"framer-motion\";\nimport { Heart } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\nexport default function LoadingScreen() {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Hide loading screen after 2 seconds\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 2000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <AnimatePresence>\n      {isLoading && (\n        <motion.div\n          className=\"fixed inset-0 z-[9999] flex items-center justify-center bg-gradient-to-br from-rose-100 via-pink-50 to-rose-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\"\n          initial={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <div className=\"text-center\">\n            {/* Animated Heart Logo */}\n            <motion.div\n              className=\"mb-8\"\n              initial={{ scale: 0.5, opacity: 0 }}\n              animate={{ \n                scale: [0.5, 1.2, 1],\n                opacity: 1,\n              }}\n              transition={{\n                duration: 1,\n                ease: \"easeOut\"\n              }}\n            >\n              <motion.div\n                animate={{\n                  scale: [1, 1.1, 1],\n                }}\n                transition={{\n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                <Heart \n                  className=\"mx-auto text-primary\" \n                  size={80} \n                  fill=\"currentColor\"\n                  strokeWidth={0}\n                />\n              </motion.div>\n            </motion.div>\n\n            {/* Loading Text */}\n            <motion.h2\n              className=\"font-cursive text-4xl md:text-5xl mb-4 bg-gradient-to-r from-primary via-pink-400 to-rose-500 bg-clip-text text-transparent\"\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ delay: 0.3, duration: 0.6 }}\n            >\n              Đang tải...\n            </motion.h2>\n\n            {/* Animated Dots */}\n            <div className=\"flex justify-center gap-2 mb-8\">\n              {[0, 1, 2].map((index) => (\n                <motion.div\n                  key={index}\n                  className=\"w-3 h-3 bg-primary rounded-full\"\n                  animate={{\n                    scale: [1, 1.5, 1],\n                    opacity: [0.3, 1, 0.3],\n                  }}\n                  transition={{\n                    duration: 1.5,\n                    delay: index * 0.2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\"\n                  }}\n                />\n              ))}\n            </div>\n\n            {/* Floating Hearts */}\n            <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n              {[...Array(8)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute text-primary/20\"\n                  style={{\n                    left: `${10 + i * 12}%`,\n                    top: '110%',\n                  }}\n                  animate={{\n                    y: [-100, -window.innerHeight - 100],\n                    x: [0, Math.sin(i) * 50],\n                    rotate: [0, 360],\n                    opacity: [0, 0.6, 0]\n                  }}\n                  transition={{\n                    duration: 3 + i * 0.5,\n                    delay: i * 0.3,\n                    repeat: Infinity,\n                    ease: \"linear\"\n                  }}\n                >\n                  <Heart fill=\"currentColor\" size={24 + Math.random() * 16} />\n                </motion.div>\n              ))}\n            </div>\n\n            {/* Progress Message */}\n            <motion.p\n              className=\"text-sm text-muted-foreground\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 0.8 }}\n            >\n              Chuẩn bị thiệp cưới của bạn...\n            </motion.p>\n          </div>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":4237},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/db.ts":{"content":"import * as dotenv from 'dotenv';\ndotenv.config();\n\nimport { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Optimized for Vercel Serverless Functions\n// Use minimal connections to avoid \"too many connections\" errors\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n  // Serverless optimization: Only 1 connection per instance\n  max: 1,\n  // Disable idle timeout - Vercel handles function lifecycle\n  idleTimeoutMillis: 0,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle(pool, { schema });\n\n// Optional: Test connection function (call manually in development)\nexport async function testConnection() {\n  try {\n    const client = await pool.connect();\n    console.log('✅ Connected to Neon database successfully!');\n    \n    const result = await client.query('SELECT NOW()');\n    console.log('📅 Database time:', result.rows[0].now);\n    \n    client.release();\n    return true;\n  } catch (error) {\n    console.error('❌ Failed to connect to database:', error);\n    return false;\n  }\n}\n\n// Only test connection in development mode, not in serverless\nif (process.env.NODE_ENV === 'development' && process.env.TEST_DB_CONNECTION !== 'false') {\n  testConnection();\n}","size_bytes":1498},"client/src/index.css":{"content":"/* Vietnamese Wedding Fonts - Support tiếng Việt \n * Fonts are now loaded dynamically via FontProvider based on admin settings\n * Default fallback fonts loaded here for initial render\n */\n@import url('https://fonts.googleapis.com/css2?family=Noto+Serif:ital,wght@0,400;0,500;0,600;0,700;1,400&family=Dancing+Script:wght@400;500;600;700&display=swap&subset=vietnamese');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Prevent horizontal scrollbar and enable smooth scrolling */\nhtml {\n  overflow-x: hidden !important;\n  overflow-y: scroll; /* Force single scrollbar */\n  max-width: 100vw;\n  width: 100%;\n  scroll-behavior: smooth; /* Smooth scrolling */\n}\n\nbody {\n  overflow-x: hidden !important;\n  max-width: 100vw;\n  width: 100%;\n  position: relative;\n}\n\n*, *::before, *::after {\n  box-sizing: border-box;\n}\n\n/* Ensure no element causes horizontal scroll */\nsection, div, main, article {\n  max-width: 100%;\n}\n\n/* LIGHT MODE + Font Families */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 240 10% 15%;\n\n  --border: 340 20% 90%;\n\n  --card: 340 40% 98%;\n\n  --card-foreground: 240 10% 15%;\n\n  --card-border: 340 25% 94%;\n\n  --sidebar: 340 35% 96%;\n\n  --sidebar-foreground: 240 10% 15%;\n\n  --sidebar-border: 340 30% 92%;\n\n  --sidebar-primary: 340 82% 52%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 340 30% 92%;\n\n  --sidebar-accent-foreground: 240 10% 20%;\n\n  --sidebar-ring: 340 82% 52%;\n\n  --popover: 340 35% 95%;\n\n  --popover-foreground: 240 10% 15%;\n\n  --popover-border: 340 28% 90%;\n\n  --primary: 340 82% 52%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 340 25% 88%;\n\n  --secondary-foreground: 240 10% 20%;\n\n  --muted: 340 18% 93%;\n\n  --muted-foreground: 240 6% 45%;\n\n  --accent: 200 18% 88%;\n\n  --accent-foreground: 240 10% 20%;\n\n  --destructive: 0 84% 48%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 10% 65%;\n  --ring: 340 82% 52%;\n  --chart-1: 340 82% 52%;\n  --chart-2: 45 93% 47%;\n  --chart-3: 200 18% 46%;\n  --chart-4: 280 65% 60%;\n  --chart-5: 25 85% 55%;\n\n  /* Font Families - Vietnamese wedding fonts (dynamically loaded via FontProvider) */\n  --font-sans: 'Noto Serif', Georgia, serif;\n  --font-serif: 'Noto Serif', Georgia, serif;\n  --font-cursive: 'Dancing Script', cursive;\n  --font-body: 'Noto Serif', Georgia, serif;\n  --font-serif-alt: 'Noto Serif', Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --font-admin: 'Times New Roman', Times, serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(340 40% 30% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(340 40% 30% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(340 40% 30% / 0.06), 0px 1px 2px -1px hsl(340 40% 30% / 0.08);\n  --shadow: 0px 4px 6px 0px hsl(340 40% 30% / 0.08), 0px 2px 4px -1px hsl(340 40% 30% / 0.10);\n  --shadow-md: 0px 6px 10px 0px hsl(340 40% 30% / 0.10), 0px 2px 6px -2px hsl(340 40% 30% / 0.12);\n  --shadow-lg: 0px 10px 15px -3px hsl(340 40% 30% / 0.12), 0px 4px 8px -2px hsl(340 40% 30% / 0.10);\n  --shadow-xl: 0px 20px 25px -5px hsl(340 40% 30% / 0.14), 0px 10px 12px -4px hsl(340 40% 30% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(340 40% 30% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 240 10% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 240 8% 18%;\n\n  --card: 240 8% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 240 8% 16%;\n\n  --sidebar: 240 8% 14%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 240 8% 18%;\n\n  --sidebar-primary: 340 70% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 240 8% 18%;\n\n  --sidebar-accent-foreground: 0 0% 88%;\n\n  --sidebar-ring: 340 70% 60%;\n\n  --popover: 240 8% 16%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 240 8% 20%;\n\n  --primary: 340 70% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 240 8% 20%;\n\n  --secondary-foreground: 0 0% 88%;\n\n  --muted: 240 8% 18%;\n\n  --muted-foreground: 240 6% 65%;\n\n  --accent: 200 15% 22%;\n\n  --accent-foreground: 0 0% 88%;\n\n  --destructive: 0 72% 52%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 8% 35%;\n  --ring: 340 70% 60%;\n  --chart-1: 340 75% 68%;\n  --chart-2: 45 90% 65%;\n  --chart-3: 200 40% 65%;\n  --chart-4: 280 60% 72%;\n  --chart-5: 25 80% 68%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.28);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.25), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 6px 10px 0px hsl(0 0% 0% / 0.28), 0px 2px 6px -2px hsl(0 0% 0% / 0.32);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.32), 0px 4px 8px -2px hsl(0 0% 0% / 0.28);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.36), 0px 10px 12px -4px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.45);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}\n\n.section-padding {\n  @apply py-20 md:py-32 px-4 relative;\n}\n\n.container-max {\n  @apply max-w-7xl mx-auto relative z-10;\n}\n\n.profile-image-container {\n  @apply w-64 h-64 md:w-80 md:h-80 rounded-full border-4 border-primary/20 shadow-xl cursor-pointer;\n}\n\n.profile-image {\n  @apply w-full h-full object-contain;\n}\n\n.profile-name {\n  @apply font-cursive text-4xl md:text-5xl mb-2 text-primary;\n}\n\n.profile-description {\n  @apply text-muted-foreground max-w-sm mx-auto leading-relaxed text-lg;\n}\n\n.story-content {\n  @apply mt-20 max-w-3xl mx-auto text-center;\n}\n\n.story-paragraph {\n  @apply text-lg md:text-xl leading-relaxed mb-6;\n}\n\n.section-heading {\n  @apply font-serif text-4xl md:text-5xl mb-4 text-foreground;\n}\n\n.section-divider {\n  @apply w-24 h-1 bg-primary mx-auto mt-4;\n}\n\n.social-icon {\n  @apply w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center \n         text-primary cursor-pointer transition-all duration-300 \n         shadow-lg hover:shadow-xl border border-primary/20;\n}\n\n.hover-elevate {\n  @apply transition-all duration-300 hover:shadow-lg hover:scale-110;\n}\n\n/* Admin pages - Times New Roman with larger sizes and bold */\n[class*=\"Admin\"],\n[data-admin-page=\"true\"],\n.admin-container {\n  font-family: var(--font-admin) !important;\n  font-size: 1.2rem !important;\n  font-weight: 600 !important;\n}\n\n.admin-page {\n  font-family: var(--font-admin) !important;\n  font-size: 1.2rem;\n  font-weight: 600;\n}\n\n.admin-page h1 {\n  font-size: 2.5rem !important;\n  font-weight: 700 !important;\n}\n\n.admin-page h2 {\n  font-size: 2rem !important;\n  font-weight: 700 !important;\n}\n\n.admin-page h3 {\n  font-size: 1.5rem !important;\n  font-weight: 700 !important;\n}\n\n.admin-heading {\n  font-family: var(--font-admin) !important;\n  font-size: 2.5rem;\n  font-weight: 700;\n}\n\n.admin-text {\n  font-family: var(--font-admin) !important;\n  font-size: 1.15rem;\n  font-weight: 600;\n}\n\n.admin-label {\n  font-family: var(--font-admin) !important;\n  font-size: 1.1rem;\n  font-weight: 700;\n}\n\n/* Landing/Homepage - Vietnamese-friendly fonts */\nbody {\n  font-family: var(--font-body);\n}\n\n.landing-text, \n.homepage-text {\n  font-family: var(--font-body);\n  font-size: 1.15rem;\n  line-height: 1.75;\n}\n","size_bytes":13915},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Lock, User as UserIcon, Sparkles, Eye, EyeOff, Gem, Crown, Calendar } from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [isFocused, setIsFocused] = useState({ username: false, password: false });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      const response = await fetch(\"/api/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (response.ok) {\n        // Animation success trước khi chuyển trang\n        setTimeout(() => {\n          setLocation(\"/admin\");\n        }, 1000);\n      } else {\n        const data = await response.json();\n        setError(data.message || \"Thông tin đăng nhập không hợp lệ\");\n      }\n    } catch (err) {\n      setError(\"Đăng nhập thất bại. Vui lòng thử lại.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.15,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { \n      opacity: 0, \n      y: 30,\n      scale: 0.9\n    },\n    visible: {\n      opacity: 1,\n      y: 0,\n      scale: 1,\n      transition: {\n        duration: 0.6,\n        ease: [0.25, 0.1, 0.25, 1]\n      }\n    }\n  };\n\n  const floatAnimation = {\n    y: [0, -15, 0],\n    transition: {\n      duration: 4,\n      repeat: Infinity,\n      ease: \"easeInOut\"\n    }\n  };\n\n  const pulseAnimation = {\n    scale: [1, 1.05, 1],\n    transition: {\n      duration: 3,\n      repeat: Infinity,\n      ease: \"easeInOut\"\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-rose-50 via-white to-cyan-50 p-4 relative overflow-hidden\">\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        {/* Floating Hearts */}\n        {[...Array(6)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute text-pink-200/40\"\n            style={{\n              top: `${20 + i * 15}%`,\n              left: `${10 + i * 15}%`,\n            }}\n            animate={{\n              y: [0, -40, 0],\n              rotate: [0, 180, 360],\n              opacity: [0.3, 0.7, 0.3],\n            }}\n            transition={{\n              duration: 8 + i * 2,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n              delay: i * 0.5\n            }}\n          >\n            <Heart size={24 + i * 4} fill=\"currentColor\" />\n          </motion.div>\n        ))}\n\n        {/* Sparkles */}\n        {[...Array(4)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute text-amber-200/50\"\n            style={{\n              top: `${30 + i * 10}%`,\n              right: `${5 + i * 20}%`,\n            }}\n            animate={{\n              scale: [0.8, 1.2, 0.8],\n              rotate: [0, 90, 180, 270, 360],\n            }}\n            transition={{\n              duration: 5 + i,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n          >\n            <Sparkles size={20 + i * 3} />\n          </motion.div>\n        ))}\n\n        {/* Wedding Icons */}\n        <motion.div\n          className=\"absolute bottom-32 left-16 text-purple-200/40\"\n          animate={floatAnimation}\n        >\n          <Calendar size={35} />\n        </motion.div>\n        <motion.div\n          className=\"absolute top-32 right-20 text-rose-200/40\"\n          animate={{\n            ...floatAnimation,\n            rotate: [0, 180, 360]\n          }}\n          transition={{\n            duration: 6,\n            repeat: Infinity,\n            ease: \"linear\"\n          }}\n        >\n          <Crown size={30} />\n        </motion.div>\n        \n        {/* Additional floating elements */}\n        <motion.div\n          className=\"absolute bottom-40 right-16 text-blue-200/30\"\n          animate={{\n            y: [0, -25, 0],\n            rotate: [0, 90, 180, 270, 360]\n          }}\n          transition={{\n            duration: 7,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        >\n          <Gem size={28} />\n        </motion.div>\n      </div>\n\n      {/* Main Card */}\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n        className=\"w-full max-w-md relative z-10\"\n      >\n        <motion.div\n          animate={pulseAnimation}\n          className=\"relative\"\n        >\n          {/* Glow Effect */}\n          <div className=\"absolute -inset-4 bg-gradient-to-r from-pink-400 to-purple-400 rounded-3xl blur-xl opacity-20 group-hover:opacity-30 transition duration-1000 group-hover:duration-200\"></div>\n          \n          <Card className=\"shadow-2xl border-2 border-white/60 bg-white/90 backdrop-blur-xl rounded-2xl overflow-hidden relative z-10\">\n            {/* Header Section */}\n            <CardHeader className=\"text-center space-y-4 pb-6 bg-gradient-to-br from-rose-400 via-pink-500 to-purple-500 text-white relative overflow-hidden\">\n              {/* Animated Gradient Overlay */}\n              <motion.div\n                className=\"absolute inset-0\"\n                animate={{\n                  backgroundPosition: ['0% 0%', '100% 100%'],\n                }}\n                transition={{\n                  duration: 15,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n                style={{\n                  background: 'linear-gradient(45deg, #ec4899, #8b5cf6, #06b6d4, #10b981, #f59e0b)',\n                  backgroundSize: '400% 400%',\n                  opacity: 0.7\n                }}\n              />\n              \n              {/* Floating Icons */}\n              <motion.div\n                className=\"absolute top-2 left-2 opacity-20\"\n                animate={{\n                  rotate: 360,\n                  scale: [1, 1.2, 1]\n                }}\n                transition={{\n                  duration: 8,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n              >\n                <Heart size={24} />\n              </motion.div>\n              \n              <motion.div\n                className=\"absolute bottom-2 right-2 opacity-20\"\n                animate={{\n                  rotate: -360,\n                  scale: [1.2, 1, 1.2]\n                }}\n                transition={{\n                  duration: 10,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n              >\n                <Calendar size={20} />\n              </motion.div>\n\n              {/* Main Icon */}\n              <motion.div\n                className=\"flex justify-center relative z-10\"\n                animate={{ \n                  scale: [1, 1.05, 1],\n                  y: [0, -5, 0]\n                }}\n                transition={{ \n                  duration: 4, \n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                <div className=\"relative\">\n                  <div className=\"absolute inset-0 bg-white/20 rounded-full blur-md\"></div>\n                  <Heart className=\"w-16 h-16 relative z-10\" fill=\"currentColor\" />\n                </div>\n              </motion.div>\n              \n              {/* Title */}\n              <motion.div \n                className=\"space-y-2 relative z-10\"\n                variants={itemVariants}\n              >\n                <CardTitle className=\"text-3xl font-bold font-serif tracking-tight\">\n                  Quản Lý Đám Cưới\n                </CardTitle>\n                <CardDescription className=\"text-white/90 text-sm\">\n                  Đăng nhập để quản lý website đám cưới của bạn\n                </CardDescription>\n              </motion.div>\n            </CardHeader>\n\n            <CardContent className=\"p-6 space-y-5\">\n              <motion.form onSubmit={handleSubmit} className=\"space-y-5\" variants={containerVariants}>\n                {/* Username Field */}\n                <motion.div variants={itemVariants} className=\"space-y-2\">\n                  <Label htmlFor=\"username\" className=\"flex items-center gap-2 text-sm font-semibold text-gray-700\">\n                    <motion.div \n                      className=\"p-1.5 bg-gradient-to-br from-rose-100 to-pink-100 rounded-lg shadow-sm\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <UserIcon size={16} className=\"text-rose-600\" />\n                    </motion.div>\n                    Tên đăng nhập\n                  </Label>\n                  <motion.div\n                    whileFocus={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                  >\n                    <Input\n                      id=\"username\"\n                      type=\"text\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      onFocus={() => setIsFocused(prev => ({ ...prev, username: true }))}\n                      onBlur={() => setIsFocused(prev => ({ ...prev, username: false }))}\n                      placeholder=\"Nhập tên đăng nhập...\"\n                      required\n                      className=\"h-11 text-base border-2 border-gray-200 focus:border-rose-400 focus:ring-2 focus:ring-rose-200 rounded-xl transition-all duration-300 pl-4\"\n                      data-testid=\"input-username\"\n                    />\n                  </motion.div>\n                </motion.div>\n\n                {/* Password Field */}\n                <motion.div variants={itemVariants} className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"flex items-center gap-2 text-sm font-semibold text-gray-700\">\n                    <motion.div \n                      className=\"p-1.5 bg-gradient-to-br from-blue-100 to-cyan-100 rounded-lg shadow-sm\"\n                      whileHover={{ scale: 1.05 }}\n                      whileTap={{ scale: 0.95 }}\n                    >\n                      <Lock size={16} className=\"text-blue-600\" />\n                    </motion.div>\n                    Mật khẩu\n                  </Label>\n                  <motion.div\n                    whileFocus={{ scale: 1.02 }}\n                    transition={{ type: \"spring\", stiffness: 300 }}\n                    className=\"relative\"\n                  >\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      onFocus={() => setIsFocused(prev => ({ ...prev, password: true }))}\n                      onBlur={() => setIsFocused(prev => ({ ...prev, password: false }))}\n                      placeholder=\"Nhập mật khẩu...\"\n                      required\n                      className=\"h-11 text-base border-2 border-gray-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-200 rounded-xl transition-all duration-300 pl-4 pr-12\"\n                      data-testid=\"input-password\"\n                    />\n                    <motion.button\n                      type=\"button\"\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-7 w-7 text-gray-500 hover:text-gray-700 flex items-center justify-center rounded-lg hover:bg-gray-100\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      whileHover={{ scale: 1.1 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}\n                    </motion.button>\n                  </motion.div>\n                </motion.div>\n\n                {/* Error Message */}\n                <AnimatePresence>\n                  {error && (\n                    <motion.div\n                      initial={{ opacity: 0, y: -10, scale: 0.95 }}\n                      animate={{ opacity: 1, y: 0, scale: 1 }}\n                      exit={{ opacity: 0, y: -10, scale: 0.95 }}\n                      className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-xl flex items-center gap-2 shadow-sm\"\n                    >\n                      <div className=\"w-1.5 h-1.5 bg-red-500 rounded-full flex-shrink-0\"></div>\n                      {error}\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n\n                {/* Login Button */}\n                <motion.div variants={itemVariants}>\n                  <motion.button\n                    type=\"submit\"\n                    className=\"w-full h-11 text-base font-semibold bg-gradient-to-r from-rose-500 to-purple-500 hover:from-rose-600 hover:to-purple-600 text-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden group disabled:opacity-50 disabled:cursor-not-allowed\"\n                    disabled={loading}\n                    data-testid=\"button-login\"\n                    whileHover={{ scale: loading ? 1 : 1.02 }}\n                    whileTap={{ scale: loading ? 1 : 0.98 }}\n                  >\n                    {/* Shine Effect */}\n                    <motion.div\n                      className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 transform\"\n                      initial={{ x: \"-100%\" }}\n                      whileHover={{ x: \"100%\" }}\n                      transition={{ duration: 0.8, ease: \"easeInOut\" }}\n                    />\n                    \n                    <div className=\"flex items-center justify-center gap-2 relative z-10\">\n                      {loading ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          className=\"flex items-center gap-2\"\n                        >\n                          <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full\" />\n                          Đang đăng nhập...\n                        </motion.div>\n                      ) : (\n                        <>\n                          <Lock size={16} />\n                          Đăng Nhập\n                        </>\n                      )}\n                    </div>\n                  </motion.button>\n                </motion.div>\n\n                {/* Default Credentials */}\n                <motion.div \n                  variants={itemVariants}\n                  className=\"text-center space-y-3 pt-3 border-t border-gray-100\"\n                >\n                  <p className=\"text-xs text-gray-600 font-medium\">Thông tin đăng nhập mặc định:</p>\n                  <motion.div \n                    className=\"bg-gradient-to-r from-amber-50 to-orange-50 p-3 rounded-xl border border-amber-200 shadow-sm\"\n                    whileHover={{ scale: 1.01 }}\n                    transition={{ type: \"spring\", stiffness: 400 }}\n                  >\n                    <div className=\"space-y-1.5 text-xs\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Tên đăng nhập:</span>\n                        <code className=\"bg-amber-100 text-amber-800 px-2 py-1 rounded-lg font-mono font-bold text-xs\">admin</code>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-gray-600 font-medium\">Mật khẩu:</span>\n                        <code className=\"bg-amber-100 text-amber-800 px-2 py-1 rounded-lg font-mono font-bold text-xs\">admin123</code>\n                      </div>\n                    </div>\n                  </motion.div>\n                  <motion.p \n                    className=\"text-xs text-gray-500 flex items-center justify-center gap-1\"\n                    animate={{ opacity: [0.7, 1, 0.7] }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Sparkles size={12} className=\"text-amber-400\" />\n                    Hãy thay đổi mật khẩu mặc định sau khi đăng nhập thành công\n                    <Sparkles size={12} className=\"text-amber-400\" />\n                  </motion.p>\n                </motion.div>\n              </motion.form>\n\n              {/* Footer */}\n              <motion.div\n                variants={itemVariants}\n                className=\"text-center pt-3 border-t border-gray-100\"\n              >\n                <p className=\"text-xs text-gray-500 flex items-center justify-center gap-1\">\n                  <Gem size={12} className=\"text-purple-400\" />\n                  Hệ thống quản lý đám cưới chuyên nghiệp\n                  <Gem size={12} className=\"text-purple-400\" />\n                </p>\n              </motion.div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":18038},"server/storage.ts":{"content":"// Storage implementation with database operations\nimport {\n  users,\n  coupleInfo,\n  scheduleEvents,\n  photos,\n  guestMessages,\n  rsvps,\n  registryItems,\n  settings,\n  weddingParty,\n  popups,\n  faqs,\n  musicTracks,\n  guestPhotos,\n  livestreamInfo,\n  type User,\n  type UpsertUser,\n  type CoupleInfo,\n  type InsertCoupleInfo,\n  type ScheduleEvent,\n  type InsertScheduleEvent,\n  type Photo,\n  type InsertPhoto,\n  type GuestMessage,\n  type InsertGuestMessage,\n  type Rsvp,\n  type InsertRsvp,\n  type RegistryItem,\n  type InsertRegistryItem,\n  type Settings,\n  type InsertSettings,\n  type WeddingParty,\n  type InsertWeddingParty,\n  type Popup,\n  type InsertPopup,\n  type Faq,\n  type InsertFaq,\n  type MusicTrack,\n  type InsertMusicTrack,\n  type GuestPhoto,\n  type InsertGuestPhoto,\n  type LivestreamInfo,\n  type InsertLivestreamInfo,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Couple Info\n  getCoupleInfo(): Promise<CoupleInfo | undefined>;\n  upsertCoupleInfo(info: InsertCoupleInfo): Promise<CoupleInfo>;\n\n  // Schedule Events\n  getAllScheduleEvents(): Promise<ScheduleEvent[]>;\n  getScheduleEvent(id: string): Promise<ScheduleEvent | undefined>;\n  createScheduleEvent(event: InsertScheduleEvent): Promise<ScheduleEvent>;\n  updateScheduleEvent(id: string, event: Partial<InsertScheduleEvent>): Promise<ScheduleEvent | undefined>;\n  deleteScheduleEvent(id: string): Promise<void>;\n\n  // Photos\n  getAllPhotos(): Promise<Photo[]>;\n  getPhoto(id: string): Promise<Photo | undefined>;\n  createPhoto(photo: InsertPhoto): Promise<Photo>;\n  updatePhoto(id: string, photo: Partial<InsertPhoto>): Promise<Photo | undefined>;\n  deletePhoto(id: string): Promise<void>;\n\n  // Guest Messages\n  getAllGuestMessages(approvedOnly?: boolean): Promise<GuestMessage[]>;\n  getGuestMessage(id: string): Promise<GuestMessage | undefined>;\n  createGuestMessage(message: InsertGuestMessage): Promise<GuestMessage>;\n  approveGuestMessage(id: string, approved: boolean): Promise<GuestMessage | undefined>;\n  deleteGuestMessage(id: string): Promise<void>;\n\n  // RSVPs\n  getAllRsvps(): Promise<Rsvp[]>;\n  getRsvp(id: string): Promise<Rsvp | undefined>;\n  createRsvp(rsvp: InsertRsvp): Promise<Rsvp>;\n  deleteRsvp(id: string): Promise<void>;\n\n  // Registry Items\n  getAllRegistryItems(): Promise<RegistryItem[]>;\n  getRegistryItem(id: string): Promise<RegistryItem | undefined>;\n  createRegistryItem(item: InsertRegistryItem): Promise<RegistryItem>;\n  updateRegistryItem(id: string, item: Partial<InsertRegistryItem>): Promise<RegistryItem | undefined>;\n  deleteRegistryItem(id: string): Promise<void>;\n\n  // Settings\n  getSettings(): Promise<Settings | undefined>;\n  upsertSettings(settings: InsertSettings): Promise<Settings>;\n\n  // Wedding Party\n  getAllWeddingParty(): Promise<WeddingParty[]>;\n  getWeddingPartyMember(id: string): Promise<WeddingParty | undefined>;\n  createWeddingPartyMember(member: InsertWeddingParty): Promise<WeddingParty>;\n  updateWeddingPartyMember(id: string, member: Partial<InsertWeddingParty>): Promise<WeddingParty | undefined>;\n  deleteWeddingPartyMember(id: string): Promise<void>;\n\n  // Popups\n  getAllPopups(): Promise<Popup[]>;\n  getPopup(id: string): Promise<Popup | undefined>;\n  getPopupByType(type: string): Promise<Popup | undefined>;\n  createPopup(popup: InsertPopup): Promise<Popup>;\n  updatePopup(id: string, popup: Partial<InsertPopup>): Promise<Popup | undefined>;\n  deletePopup(id: string): Promise<void>;\n\n  // FAQs\n  getAllFaqs(): Promise<Faq[]>;\n  getFaq(id: string): Promise<Faq | undefined>;\n  createFaq(faq: InsertFaq): Promise<Faq>;\n  updateFaq(id: string, faq: Partial<InsertFaq>): Promise<Faq | undefined>;\n  deleteFaq(id: string): Promise<void>;\n\n  // Music Tracks\n  getAllMusicTracks(activeOnly?: boolean): Promise<MusicTrack[]>;\n  getMusicTrack(id: string): Promise<MusicTrack | undefined>;\n  createMusicTrack(track: InsertMusicTrack): Promise<MusicTrack>;\n  updateMusicTrack(id: string, track: Partial<InsertMusicTrack>): Promise<MusicTrack | undefined>;\n  deleteMusicTrack(id: string): Promise<void>;\n\n  // Guest Photos\n  getAllGuestPhotos(approvedOnly?: boolean): Promise<GuestPhoto[]>;\n  getGuestPhoto(id: string): Promise<GuestPhoto | undefined>;\n  createGuestPhoto(photo: InsertGuestPhoto): Promise<GuestPhoto>;\n  approveGuestPhoto(id: string, approved: boolean): Promise<GuestPhoto | undefined>;\n  deleteGuestPhoto(id: string): Promise<void>;\n\n  // Livestream Info\n  getLivestreamInfo(): Promise<LivestreamInfo | undefined>;\n  upsertLivestreamInfo(info: InsertLivestreamInfo): Promise<LivestreamInfo>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.username,\n        set: {\n          password: userData.password,\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Couple Info\n  async getCoupleInfo(): Promise<CoupleInfo | undefined> {\n    const [info] = await db.select().from(coupleInfo).limit(1);\n    return info;\n  }\n\n  async upsertCoupleInfo(info: InsertCoupleInfo): Promise<CoupleInfo> {\n    const existing = await this.getCoupleInfo();\n    if (existing) {\n      const [updated] = await db\n        .update(coupleInfo)\n        .set({ ...info, updatedAt: new Date() })\n        .where(eq(coupleInfo.id, existing.id))\n        .returning();\n      return updated;\n    }\n    const [created] = await db.insert(coupleInfo).values(info).returning();\n    return created;\n  }\n\n  // Schedule Events\n  async getAllScheduleEvents(): Promise<ScheduleEvent[]> {\n    return await db.select().from(scheduleEvents).orderBy(scheduleEvents.order);\n  }\n\n  async getScheduleEvent(id: string): Promise<ScheduleEvent | undefined> {\n    const [event] = await db.select().from(scheduleEvents).where(eq(scheduleEvents.id, id));\n    return event;\n  }\n\n  async createScheduleEvent(event: InsertScheduleEvent): Promise<ScheduleEvent> {\n    const [created] = await db.insert(scheduleEvents).values(event).returning();\n    return created;\n  }\n\n  async updateScheduleEvent(id: string, event: Partial<InsertScheduleEvent>): Promise<ScheduleEvent | undefined> {\n    const [updated] = await db\n      .update(scheduleEvents)\n      .set({ ...event, updatedAt: new Date() })\n      .where(eq(scheduleEvents.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteScheduleEvent(id: string): Promise<void> {\n    await db.delete(scheduleEvents).where(eq(scheduleEvents.id, id));\n  }\n\n  // Photos\n  async getAllPhotos(): Promise<Photo[]> {\n    return await db.select().from(photos).orderBy(photos.order);\n  }\n\n  async getPhoto(id: string): Promise<Photo | undefined> {\n    const [photo] = await db.select().from(photos).where(eq(photos.id, id));\n    return photo;\n  }\n\n  async createPhoto(photo: InsertPhoto): Promise<Photo> {\n    const [created] = await db.insert(photos).values(photo).returning();\n    return created;\n  }\n\n  async updatePhoto(id: string, photo: Partial<InsertPhoto>): Promise<Photo | undefined> {\n    const [updated] = await db\n      .update(photos)\n      .set({ ...photo, updatedAt: new Date() })\n      .where(eq(photos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePhoto(id: string): Promise<void> {\n    await db.delete(photos).where(eq(photos.id, id));\n  }\n\n  // Guest Messages\n  async getAllGuestMessages(approvedOnly: boolean = false): Promise<GuestMessage[]> {\n    if (approvedOnly) {\n      return await db.select().from(guestMessages).where(eq(guestMessages.approved, true)).orderBy(desc(guestMessages.createdAt));\n    }\n    return await db.select().from(guestMessages).orderBy(desc(guestMessages.createdAt));\n  }\n\n  async getGuestMessage(id: string): Promise<GuestMessage | undefined> {\n    const [message] = await db.select().from(guestMessages).where(eq(guestMessages.id, id));\n    return message;\n  }\n\n  async createGuestMessage(message: InsertGuestMessage): Promise<GuestMessage> {\n    const [created] = await db.insert(guestMessages).values(message).returning();\n    return created;\n  }\n\n  async approveGuestMessage(id: string, approved: boolean): Promise<GuestMessage | undefined> {\n    const [updated] = await db\n      .update(guestMessages)\n      .set({ approved })\n      .where(eq(guestMessages.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteGuestMessage(id: string): Promise<void> {\n    await db.delete(guestMessages).where(eq(guestMessages.id, id));\n  }\n\n  // RSVPs\n  async getAllRsvps(): Promise<Rsvp[]> {\n    return await db.select().from(rsvps).orderBy(desc(rsvps.createdAt));\n  }\n\n  async getRsvp(id: string): Promise<Rsvp | undefined> {\n    const [rsvp] = await db.select().from(rsvps).where(eq(rsvps.id, id));\n    return rsvp;\n  }\n\n  async createRsvp(rsvp: InsertRsvp): Promise<Rsvp> {\n    const [created] = await db.insert(rsvps).values(rsvp).returning();\n    return created;\n  }\n\n  async deleteRsvp(id: string): Promise<void> {\n    await db.delete(rsvps).where(eq(rsvps.id, id));\n  }\n\n  // Registry Items\n  async getAllRegistryItems(): Promise<RegistryItem[]> {\n    return await db.select().from(registryItems).orderBy(registryItems.order);\n  }\n\n  async getRegistryItem(id: string): Promise<RegistryItem | undefined> {\n    const [item] = await db.select().from(registryItems).where(eq(registryItems.id, id));\n    return item;\n  }\n\n  async createRegistryItem(item: InsertRegistryItem): Promise<RegistryItem> {\n    const [created] = await db.insert(registryItems).values(item).returning();\n    return created;\n  }\n\n  async updateRegistryItem(id: string, item: Partial<InsertRegistryItem>): Promise<RegistryItem | undefined> {\n    const [updated] = await db\n      .update(registryItems)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(registryItems.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteRegistryItem(id: string): Promise<void> {\n    await db.delete(registryItems).where(eq(registryItems.id, id));\n  }\n\n  // Settings\n  async getSettings(): Promise<Settings | undefined> {\n    const [settingsRow] = await db.select().from(settings).limit(1);\n    return settingsRow;\n  }\n\n  async upsertSettings(settingsData: InsertSettings): Promise<Settings> {\n    const existing = await this.getSettings();\n    if (existing) {\n      const [updated] = await db\n        .update(settings)\n        .set({ ...settingsData, updatedAt: new Date() })\n        .where(eq(settings.id, existing.id))\n        .returning();\n      return updated;\n    }\n    const [created] = await db.insert(settings).values(settingsData).returning();\n    return created;\n  }\n\n  // Wedding Party\n  async getAllWeddingParty(): Promise<WeddingParty[]> {\n    return await db.select().from(weddingParty).orderBy(weddingParty.order);\n  }\n\n  async getWeddingPartyMember(id: string): Promise<WeddingParty | undefined> {\n    const [member] = await db.select().from(weddingParty).where(eq(weddingParty.id, id));\n    return member;\n  }\n\n  async createWeddingPartyMember(member: InsertWeddingParty): Promise<WeddingParty> {\n    const [created] = await db.insert(weddingParty).values(member).returning();\n    return created;\n  }\n\n  async updateWeddingPartyMember(id: string, memberData: Partial<InsertWeddingParty>): Promise<WeddingParty | undefined> {\n    const [updated] = await db\n      .update(weddingParty)\n      .set({ ...memberData, updatedAt: new Date() })\n      .where(eq(weddingParty.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteWeddingPartyMember(id: string): Promise<void> {\n    await db.delete(weddingParty).where(eq(weddingParty.id, id));\n  }\n\n  // Popups\n  async getAllPopups(): Promise<Popup[]> {\n    return await db.select().from(popups);\n  }\n\n  async getPopup(id: string): Promise<Popup | undefined> {\n    const [popup] = await db.select().from(popups).where(eq(popups.id, id));\n    return popup;\n  }\n\n  async getPopupByType(type: string): Promise<Popup | undefined> {\n    const [popup] = await db.select().from(popups).where(eq(popups.type, type));\n    return popup;\n  }\n\n  async createPopup(popupData: InsertPopup): Promise<Popup> {\n    const [created] = await db.insert(popups).values(popupData).returning();\n    return created;\n  }\n\n  async updatePopup(id: string, popupData: Partial<InsertPopup>): Promise<Popup | undefined> {\n    const [updated] = await db\n      .update(popups)\n      .set({ ...popupData, updatedAt: new Date() })\n      .where(eq(popups.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deletePopup(id: string): Promise<void> {\n    await db.delete(popups).where(eq(popups.id, id));\n  }\n\n  // FAQs\n  async getAllFaqs(): Promise<Faq[]> {\n    return await db.select().from(faqs).orderBy(faqs.order);\n  }\n\n  async getFaq(id: string): Promise<Faq | undefined> {\n    const [faq] = await db.select().from(faqs).where(eq(faqs.id, id));\n    return faq;\n  }\n\n  async createFaq(faqData: InsertFaq): Promise<Faq> {\n    const [created] = await db.insert(faqs).values(faqData).returning();\n    return created;\n  }\n\n  async updateFaq(id: string, faqData: Partial<InsertFaq>): Promise<Faq | undefined> {\n    const [updated] = await db\n      .update(faqs)\n      .set({ ...faqData, updatedAt: new Date() })\n      .where(eq(faqs.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteFaq(id: string): Promise<void> {\n    await db.delete(faqs).where(eq(faqs.id, id));\n  }\n\n  // Music Tracks\n  async getAllMusicTracks(activeOnly: boolean = false): Promise<MusicTrack[]> {\n    if (activeOnly) {\n      return await db.select().from(musicTracks).where(eq(musicTracks.isActive, true)).orderBy(musicTracks.displayOrder);\n    }\n    return await db.select().from(musicTracks).orderBy(musicTracks.displayOrder);\n  }\n\n  async getMusicTrack(id: string): Promise<MusicTrack | undefined> {\n    const [track] = await db.select().from(musicTracks).where(eq(musicTracks.id, id));\n    return track;\n  }\n\n  async createMusicTrack(trackData: InsertMusicTrack): Promise<MusicTrack> {\n    const [created] = await db.insert(musicTracks).values(trackData).returning();\n    return created;\n  }\n\n  async updateMusicTrack(id: string, trackData: Partial<InsertMusicTrack>): Promise<MusicTrack | undefined> {\n    const [updated] = await db\n      .update(musicTracks)\n      .set({ ...trackData, updatedAt: new Date() })\n      .where(eq(musicTracks.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteMusicTrack(id: string): Promise<void> {\n    await db.delete(musicTracks).where(eq(musicTracks.id, id));\n  }\n\n  // Guest Photos operations\n  async getAllGuestPhotos(approvedOnly: boolean = false): Promise<GuestPhoto[]> {\n    if (approvedOnly) {\n      return await db.select().from(guestPhotos).where(eq(guestPhotos.approved, true)).orderBy(desc(guestPhotos.createdAt));\n    }\n    return await db.select().from(guestPhotos).orderBy(desc(guestPhotos.createdAt));\n  }\n\n  async getGuestPhoto(id: string): Promise<GuestPhoto | undefined> {\n    const [photo] = await db.select().from(guestPhotos).where(eq(guestPhotos.id, id));\n    return photo;\n  }\n\n  async createGuestPhoto(photoData: InsertGuestPhoto): Promise<GuestPhoto> {\n    const [created] = await db.insert(guestPhotos).values(photoData).returning();\n    return created;\n  }\n\n  async approveGuestPhoto(id: string, approved: boolean): Promise<GuestPhoto | undefined> {\n    const [updated] = await db\n      .update(guestPhotos)\n      .set({ approved })\n      .where(eq(guestPhotos.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteGuestPhoto(id: string): Promise<void> {\n    await db.delete(guestPhotos).where(eq(guestPhotos.id, id));\n  }\n\n  // Livestream Info operations\n  async getLivestreamInfo(): Promise<LivestreamInfo | undefined> {\n    const [info] = await db.select().from(livestreamInfo).limit(1);\n    return info;\n  }\n\n  async upsertLivestreamInfo(info: InsertLivestreamInfo): Promise<LivestreamInfo> {\n    const existing = await this.getLivestreamInfo();\n    if (existing) {\n      const [updated] = await db\n        .update(livestreamInfo)\n        .set({ ...info, updatedAt: new Date() })\n        .where(eq(livestreamInfo.id, existing.id))\n        .returning();\n      return updated;\n    }\n    const [created] = await db.insert(livestreamInfo).values(info).returning();\n    return created;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":17025},"client/src/components/Schedule.tsx":{"content":"import { Clock, Users, Music, Utensils, Heart, MapPin, Camera, Sparkles, Calendar } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport type { ScheduleEvent } from \"@shared/schema\";\n\nconst iconMap: Record<string, React.ComponentType<{ size?: number; className?: string }>> = {\n  clock: Clock,\n  users: Users,\n  music: Music,\n  utensils: Utensils,\n  heart: Heart,\n  map: MapPin,\n  camera: Camera,\n  sparkles: Sparkles,\n  calendar: Calendar,\n};\n\nexport default function Schedule() {\n  const [activeEvent, setActiveEvent] = useState<number | null>(null);\n  const { data: events = [], isLoading, isError, error } = useQuery<ScheduleEvent[]>({\n    queryKey: [\"/api/schedule\"],\n  });\n\n  // Sort events by time to ensure proper alternating layout\n  const sortedEvents = [...events].sort((a, b) => \n    new Date(a.eventTime).getTime() - new Date(b.eventTime).getTime()\n  );\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 50, x: -50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      x: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const rightItemVariants = {\n    hidden: { opacity: 0, y: 50, x: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      x: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -10,\n      scale: 1.03,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  const timelineDotVariants = {\n    hidden: { scale: 0, rotate: -180 },\n    visible: {\n      scale: 1,\n      rotate: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 300,\n        damping: 20\n      }\n    }\n  };\n\n  const floatingIconVariants = {\n    float: {\n      y: [0, -20, 0],\n      rotate: [0, 5, -5, 0],\n      transition: {\n        duration: 4,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <section id=\"schedule\" className=\"py-20 md:py-32 px-4 bg-gradient-to-b from-background to-primary/5 relative overflow-hidden\">\n      {/* Enhanced Background Decorations */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Floating Icons */}\n        {[...Array(12)].map((_, i) => {\n          const icons = [Clock, Heart, Calendar, Sparkles];\n          const IconComponent = icons[i % icons.length];\n          return (\n            <motion.div\n              key={i}\n              className=\"absolute text-primary/10\"\n              style={{\n                left: `${Math.random() * 100}%`,\n                top: `${Math.random() * 100}%`,\n              }}\n              variants={floatingIconVariants}\n              animate=\"float\"\n              transition={{\n                duration: 6 + Math.random() * 4,\n                delay: i * 0.8,\n              }}\n            >\n              <IconComponent size={32 + Math.random() * 16} />\n            </motion.div>\n          );\n        })}\n\n        {/* Animated Gradient Orbs */}\n        <motion.div\n          className=\"absolute top-1/4 -left-32 w-96 h-96 rounded-full bg-gradient-to-r from-primary/10 to-primary/5 blur-3xl\"\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.3, 0.6, 0.3],\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n        <motion.div\n          className=\"absolute bottom-1/4 -right-32 w-96 h-96 rounded-full bg-gradient-to-l from-primary/10 to-primary/5 blur-3xl\"\n          animate={{\n            scale: [1.2, 1, 1.2],\n            opacity: [0.4, 0.7, 0.4],\n          }}\n          transition={{\n            duration: 10,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      </div>\n\n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        {/* Enhanced Header */}\n        <motion.div\n          className=\"text-center mb-20\"\n          initial={{ opacity: 0, y: 60 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 1, ease: \"easeOut\" }}\n          viewport={{ once: true }}\n        >\n          <motion.div\n            className=\"inline-flex items-center gap-3 mb-6\"\n            initial={{ scale: 0 }}\n            whileInView={{ scale: 1 }}\n            transition={{ type: \"spring\", stiffness: 200, delay: 0.2 }}\n          >\n            <motion.div\n              animate={{\n                rotate: [0, 360],\n              scale: [1, 1.1, 1]\n              }}\n              transition={{\n                duration: 4,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              <Calendar className=\"text-primary\" size={32} />\n            </motion.div>\n            <motion.h2\n              className=\"font-serif text-5xl md:text-6xl bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\"\n              data-testid=\"heading-schedule\"\n              initial={{ opacity: 0, scale: 0.9 }}\n              whileInView={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.8, delay: 0.4 }}\n            >\n              Lịch Trình Ngày Cưới\n            </motion.h2>\n          </motion.div>\n          \n          <motion.div\n            className=\"w-32 h-1.5 bg-gradient-to-r from-primary to-primary/60 mx-auto mb-6 rounded-full\"\n            initial={{ width: 0 }}\n            whileInView={{ width: \"8rem\" }}\n            transition={{ duration: 1, delay: 0.6 }}\n          />\n        </motion.div>\n\n        {isLoading ? (\n          <motion.div\n            className=\"relative\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {/* Timeline Line */}\n            <div className=\"absolute left-1/2 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary/30 via-primary/50 to-primary/30 transform -translate-x-1/2\" />\n            \n            {[...Array(4)].map((_, index) => (\n              <motion.div\n                key={index}\n                className={`relative mb-16 ${index % 2 === 0 ? \"pr-1/2\" : \"pl-1/2\"}`}\n                variants={index % 2 === 0 ? itemVariants : rightItemVariants}\n              >\n                <div className={`flex ${index % 2 === 0 ? \"flex-row-reverse\" : \"\"}`}>\n                  {/* Timeline Dot */}\n                  <div className=\"absolute left-1/2 -translate-x-1/2 w-6 h-6 bg-primary rounded-full ring-4 ring-background shadow-xl z-10\" />\n                  \n                  {/* Content Card Skeleton */}\n                  <div className=\"w-full max-w-md\">\n                    <div className=\"bg-card rounded-3xl p-8 border-2 border-card-border shadow-2xl h-48 animate-pulse\">\n                      <div className=\"flex items-center gap-4 mb-4\">\n                        <div className=\"w-14 h-14 bg-muted rounded-2xl\" />\n                        <div className=\"space-y-2 flex-1\">\n                          <div className=\"h-6 bg-muted rounded w-3/4\" />\n                          <div className=\"h-4 bg-muted rounded w-1/4\" />\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/2\" />\n                        <div className=\"h-4 bg-muted rounded w-5/6\" />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </motion.div>\n        ) : isError ? (\n          <motion.div\n            className=\"text-center py-20\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.8 }}\n          >\n            <motion.div\n              animate={{ \n                scale: [1, 1.2, 1],\n                rotate: [0, -10, 10, 0]\n              }}\n              transition={{ duration: 3, repeat: Infinity }}\n              className=\"mb-6\"\n            >\n              <Heart className=\"mx-auto text-destructive\" size={80} />\n            </motion.div>\n            <p className=\"text-destructive text-2xl font-semibold mb-4\">Không thể tải lịch trình</p>\n            <p className=\"text-muted-foreground text-lg max-w-md mx-auto\">\n              {error instanceof Error ? error.message : \"Vui lòng thử lại sau\"}\n            </p>\n          </motion.div>\n        ) : sortedEvents.length === 0 ? (\n          <motion.div\n            className=\"text-center py-20\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.8 }}\n          >\n            <motion.div\n              animate={{ \n                scale: [1, 1.3, 1],\n              }}\n              transition={{ duration: 4, repeat: Infinity }}\n              className=\"mb-6\"\n            >\n              <Calendar className=\"mx-auto text-muted-foreground\" size={80} />\n            </motion.div>\n            <p className=\"text-muted-foreground text-2xl font-semibold mb-4\">Lịch trình đang được cập nhật</p>\n            <p className=\"text-muted-foreground text-lg\">Thông tin chi tiết sẽ sớm được công bố!</p>\n          </motion.div>\n        ) : (\n          <motion.div\n            className=\"relative\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true, margin: \"-100px\" }}\n          >\n            {/* Animated Timeline Line */}\n            <motion.div\n              className=\"absolute left-1/2 top-0 bottom-0 w-1 bg-gradient-to-b from-primary/40 via-primary/60 to-primary/40 transform -translate-x-1/2 shadow-2xl\"\n              initial={{ scaleY: 0 }}\n              whileInView={{ scaleY: 1 }}\n              transition={{ duration: 1.5, ease: \"easeOut\" }}\n            />\n\n            <AnimatePresence>\n              {sortedEvents.map((event, index) => {\n                const IconComponent = event.icon ? iconMap[event.icon.toLowerCase()] || Calendar : Calendar;\n                const isLeft = index % 2 === 0;\n                \n                return (\n                  <motion.div\n                    key={event.id}\n                    className={`relative mb-20 ${isLeft ? \"pr-1/2\" : \"pl-1/2\"}`}\n                    variants={isLeft ? itemVariants : rightItemVariants}\n                    data-testid={`event-${index}`}\n                    onHoverStart={() => setActiveEvent(index)}\n                    onHoverEnd={() => setActiveEvent(null)}\n                  >\n                    <div className={`flex ${isLeft ? \"flex-row-reverse\" : \"\"}`}>\n                      {/* Enhanced Timeline Dot */}\n                      <motion.div\n                        className=\"absolute left-1/2 -translate-x-1/2 w-8 h-8 bg-gradient-to-br from-primary to-primary/80 rounded-full ring-4 ring-background shadow-2xl z-10 flex items-center justify-center cursor-pointer\"\n                        variants={timelineDotVariants}\n                        whileHover={{ \n                          scale: 1.8,\n                          backgroundColor: \"#fff\",\n                          boxShadow: \"0 0 0 4px hsl(var(--primary))\"\n                        }}\n                        transition={{ type: \"spring\", stiffness: 500 }}\n                      >\n                        <motion.div\n                          animate={{ \n                            scale: activeEvent === index ? [1, 1.3, 1] : 1,\n                            rotate: activeEvent === index ? [0, 360] : 0\n                          }}\n                          transition={{ duration: 0.8 }}\n                        >\n                          <IconComponent \n                            size={16} \n                            className={activeEvent === index ? \"text-primary\" : \"text-white\"} \n                          />\n                        </motion.div>\n                      </motion.div>\n\n                      {/* Enhanced Content Card */}\n                      <div className=\"w-full max-w-lg\">\n                        <motion.div\n                          className=\"bg-card/80 backdrop-blur-xl rounded-3xl p-8 border-2 border-card-border/50 shadow-2xl relative overflow-hidden group cursor-pointer\"\n                          variants={cardVariants}\n                          initial=\"hidden\"\n                          animate=\"visible\"\n                          whileHover=\"hover\"\n                          transition={{ delay: index * 0.2 }}\n                        >\n                          {/* Animated Background Gradient */}\n                          <motion.div\n                            className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/10 opacity-0 group-hover:opacity-100\"\n                            initial={{ opacity: 0 }}\n                            whileHover={{ opacity: 1 }}\n                            transition={{ duration: 0.4 }}\n                          />\n\n                          {/* Shine Effect */}\n                          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent -skew-x-12 transform -translate-x-full group-hover:translate-x-full transition-transform duration-1000\" />\n\n                          <div className=\"relative z-10\">\n                            <div className={`flex items-center gap-6 mb-6 ${isLeft ? \"flex-row-reverse\" : \"\"}`}>\n                              <motion.div\n                                className=\"w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center group-hover:from-primary/30 group-hover:to-primary/20 transition-all duration-500 shadow-lg\"\n                                whileHover={{ \n                                  scale: 1.1,\n                                  rotate: 360,\n                                  boxShadow: \"0 10px 30px rgba(59, 130, 246, 0.3)\"\n                                }}\n                                transition={{ duration: 0.5 }}\n                              >\n                                <IconComponent className=\"text-primary\" size={32} />\n                              </motion.div>\n                              \n                              <div className={`flex-1 ${isLeft ? \"text-right\" : \"\"}`}>\n                                <motion.h3\n                                  className=\"font-serif text-3xl text-foreground mb-2 bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\"\n                                  whileHover={{ \n                                    color: \"hsl(var(--primary))\",\n                                    scale: 1.02\n                                  }}\n                                  transition={{ duration: 0.3 }}\n                                >\n                                  {event.title}\n                                </motion.h3>\n                                \n                                <motion.p\n                                  className=\"text-2xl font-bold bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\"\n                                  initial={{ opacity: 0, y: 10 }}\n                                  animate={{ opacity: 1, y: 0 }}\n                                  transition={{ delay: 0.4 }}\n                                >\n                                  {new Date(event.eventTime).toLocaleString('vi-VN', {\n                                    hour: '2-digit',\n                                    minute: '2-digit',\n                                    day: '2-digit',\n                                    month: '2-digit',\n                                    year: 'numeric',\n                                  })}\n                                </motion.p>\n                              </div>\n                            </div>\n\n                            {event.location && (\n                              <motion.div\n                                className={`flex items-center gap-3 mb-4 text-muted-foreground ${isLeft ? \"justify-end\" : \"\"}`}\n                                initial={{ opacity: 0, x: isLeft ? 20 : -20 }}\n                                animate={{ opacity: 1, x: 0 }}\n                                transition={{ delay: 0.5 }}\n                              >\n                                <MapPin size={20} className=\"text-primary\" />\n                                <span className=\"text-lg font-medium\">{event.location}</span>\n                              </motion.div>\n                            )}\n\n                            {event.description && (\n                              <motion.p\n                                className=\"text-foreground/80 leading-relaxed text-lg mb-6\"\n                                initial={{ opacity: 0 }}\n                                animate={{ opacity: 1 }}\n                                transition={{ delay: 0.6 }}\n                              >\n                                {event.description}\n                              </motion.p>\n                            )}\n                          </div>\n\n                          {/* Decorative Corners */}\n                          <div className={`absolute top-4 ${isLeft ? \"left-4\" : \"right-4\"} w-6 h-6 border-t-2 border-l-2 border-primary/30 rounded-tl-2xl`} />\n                          <div className={`absolute bottom-4 ${isLeft ? \"right-4\" : \"left-4\"} w-6 h-6 border-b-2 border-r-2 border-primary/30 rounded-br-2xl`} />\n                        </motion.div>\n                      </div>\n                    </div>\n\n                    {/* Enhanced Connecting Line */}\n                    {index < sortedEvents.length - 1 && (\n                      <motion.div\n                        className=\"absolute left-1/2 top-full w-1 h-16 bg-gradient-to-b from-primary/60 to-primary/30 transform -translate-x-1/2\"\n                        initial={{ scaleY: 0 }}\n                        whileInView={{ scaleY: 1 }}\n                        transition={{ duration: 0.8, delay: 0.4 + index * 0.1 }}\n                      />\n                    )}\n                  </motion.div>\n                );\n              })}\n            </AnimatePresence>\n\n            {/* Enhanced Start and End Markers */}\n            <motion.div\n              className=\"absolute left-1/2 top-0 -translate-x-1/2 -translate-y-2 w-6 h-6 bg-primary rounded-full shadow-2xl border-4 border-background\"\n              initial={{ scale: 0 }}\n              whileInView={{ scale: 1 }}\n              transition={{ type: \"spring\", stiffness: 300, delay: 0.2 }}\n            />\n            <motion.div\n              className=\"absolute left-1/2 bottom-0 -translate-x-1/2 translate-y-2 w-6 h-6 bg-primary rounded-full shadow-2xl border-4 border-background\"\n              initial={{ scale: 0 }}\n              whileInView={{ scale: 1 }}\n              transition={{ type: \"spring\", stiffness: 300, delay: 1 }}\n            />\n          </motion.div>\n        )}\n\n        {/* Enhanced Floating CTA */}\n        <motion.div\n          className=\"text-center mt-20\"\n          initial={{ opacity: 0, y: 40 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <motion.div\n            className=\"bg-gradient-to-r from-primary/10 to-primary/5 rounded-3xl p-8 border-2 border-primary/20 backdrop-blur-sm max-w-md mx-auto shadow-2xl\"\n            whileHover={{ \n              scale: 1.03,\n              boxShadow: \"0 20px 40px rgba(59, 130, 246, 0.15)\"\n            }}\n            transition={{ type: \"spring\", stiffness: 400 }}\n          >\n            <motion.p\n              className=\"text-2xl font-serif text-foreground mb-3\"\n              animate={{\n                scale: [1, 1.05, 1],\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              📅 Đánh dấu lịch của bạn!\n            </motion.p>\n            <p className=\"text-muted-foreground text-lg\">\n              Chúng tôi rất mong được gặp bạn vào ngày trọng đại\n            </p>\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}","size_bytes":20682},"client/src/components/Messages.tsx":{"content":"import { useState } from \"react\";\nimport { Heart, Send, Sparkles, Quote, Star } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { GuestMessage } from \"@shared/schema\";\n\nexport default function Messages() {\n  const [guestName, setGuestName] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: messages = [], isLoading, isError, error } = useQuery<GuestMessage[]>({\n    queryKey: [\"/api/messages?approved=true\"],\n  });\n\n  const createMessageMutation = useMutation({\n    mutationFn: async (data: { guestName: string; message: string }) => {\n      return await apiRequest(\"POST\", \"/api/messages\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"🎉 Đã gửi lời chúc!\",\n        description: \"Cảm ơn lời chúc của bạn. Chúng tôi sẽ xem xét trong thời gian sớm nhất.\",\n      });\n      setGuestName(\"\");\n      setMessage(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages?approved=true\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể gửi lời chúc. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!guestName.trim() || !message.trim()) {\n      toast({\n        title: \"⚠️ Thiếu thông tin\",\n        description: \"Vui lòng điền cả tên và lời chúc của bạn\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createMessageMutation.mutate({ guestName: guestName.trim(), message: message.trim() });\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const messageVariants = {\n    hidden: { opacity: 0, scale: 0.8, y: 20 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    exit: {\n      opacity: 0,\n      scale: 0.8,\n      y: -20,\n      transition: {\n        duration: 0.3\n      }\n    }\n  };\n\n  const floatingStars = [...Array(5)].map((_, i) => ({\n    id: i,\n    left: Math.random() * 100,\n    delay: i * 0.5,\n    duration: 3 + Math.random() * 2\n  }));\n\n  return (\n    <section id=\"messages\" className=\"py-20 md:py-32 px-4 bg-background relative overflow-hidden\">\n      {/* Background Decorations */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {floatingStars.map((star) => (\n          <motion.div\n            key={star.id}\n            className=\"absolute text-primary/20\"\n            style={{\n              left: `${star.left}%`,\n              top: `${20 + Math.random() * 60}%`,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              rotate: [0, 180, 360],\n              scale: [0.8, 1.2, 0.8],\n            }}\n            transition={{\n              duration: star.duration,\n              delay: star.delay,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          >\n            <Star size={20} fill=\"currentColor\" />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"max-w-6xl mx-auto relative z-10\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n        >\n          <motion.h2\n            className=\"font-serif text-4xl md:text-5xl mb-4 text-foreground\"\n            data-testid=\"heading-messages\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Lời Chúc Khách Mời\n          </motion.h2>\n          <motion.div\n            className=\"w-24 h-1 bg-primary mx-auto mb-4\"\n            initial={{ width: 0 }}\n            whileInView={{ width: \"6rem\" }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n          />\n          <motion.p\n            className=\"text-muted-foreground text-lg\"\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            Chia sẻ yêu thương và những lời chúc phúc của bạn\n          </motion.p>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 md:gap-12\">\n          {/* Message Form */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            <motion.div\n              className=\"bg-card rounded-2xl p-6 md:p-8 border border-card-border shadow-2xl backdrop-blur-sm relative overflow-hidden\"\n              variants={itemVariants}\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              {/* Background Gradient */}\n              <div className=\"absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full -translate-y-16 translate-x-16\" />\n              <div className=\"absolute bottom-0 left-0 w-24 h-24 bg-primary/10 rounded-full translate-y-12 -translate-x-12\" />\n              \n              <div className=\"relative z-10\">\n                <motion.h3\n                  className=\"font-serif text-2xl mb-6 text-foreground flex items-center gap-3\"\n                  variants={itemVariants}\n                >\n                  <motion.div\n                    animate={{\n                      scale: [1, 1.2, 1],\n                      rotate: [0, 10, -10, 0]\n                    }}\n                    transition={{\n                      duration: 4,\n                      repeat: Infinity,\n                      ease: \"easeInOut\"\n                    }}\n                  >\n                    <Heart className=\"text-primary\" fill=\"currentColor\" size={28} />\n                  </motion.div>\n                  <span className=\"bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\">\n                    Gửi Lời Chúc Của Bạn\n                  </span>\n                </motion.h3>\n                \n                <motion.form\n                  onSubmit={handleSubmit}\n                  className=\"space-y-4\"\n                  variants={containerVariants}\n                >\n                  <motion.div variants={itemVariants}>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"✨ Tên Của Bạn\"\n                      value={guestName}\n                      onChange={(e) => setGuestName(e.target.value)}\n                      className=\"rounded-xl h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                      data-testid=\"input-guest-name\"\n                      disabled={createMessageMutation.isPending}\n                    />\n                  </motion.div>\n                  \n                  <motion.div variants={itemVariants}>\n                    <Textarea\n                      placeholder=\"💝 Viết lời chúc của bạn gửi đến cô dâu chú rể...\"\n                      value={message}\n                      onChange={(e) => setMessage(e.target.value)}\n                      rows={6}\n                      className=\"rounded-xl resize-none text-lg border-2 focus:border-primary transition-all duration-300\"\n                      data-testid=\"input-message\"\n                      disabled={createMessageMutation.isPending}\n                    />\n                  </motion.div>\n                  \n                  <motion.div variants={itemVariants}>\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full rounded-xl h-12 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden group\"\n                      data-testid=\"button-submit-message\"\n                      disabled={createMessageMutation.isPending}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      {/* Button Shine Effect */}\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000\" />\n                      \n                      <motion.div\n                        animate={{ x: [0, 5, 0] }}\n                        transition={{ duration: 2, repeat: Infinity }}\n                        className=\"flex items-center gap-2 relative z-10\"\n                      >\n                        {createMessageMutation.isPending ? (\n                          <>\n                            <motion.div\n                              animate={{ rotate: 360 }}\n                              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                            >\n                              <Sparkles size={20} />\n                            </motion.div>\n                            Đang gửi...\n                          </>\n                        ) : (\n                          <>\n                            <Send size={20} />\n                            Gửi Lời Chúc\n                          </>\n                        )}\n                      </motion.div>\n                    </Button>\n                  </motion.div>\n                </motion.form>\n              </div>\n            </motion.div>\n          </motion.div>\n\n          {/* Messages Display */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n            transition={{ delay: 0.3 }}\n          >\n            <div className=\"space-y-4 max-h-[600px] overflow-y-auto pr-2\" data-testid=\"messages-list\">\n              {isLoading ? (\n                [...Array(3)].map((_, i) => (\n                  <motion.div\n                    key={i}\n                    className=\"bg-card rounded-2xl p-6 border border-card-border shadow-md\"\n                    variants={itemVariants}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                  >\n                    <div className=\"animate-pulse space-y-3\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-muted rounded-full\" />\n                        <div className=\"space-y-2 flex-1\">\n                          <div className=\"h-4 bg-muted rounded w-1/3\" />\n                          <div className=\"h-3 bg-muted rounded w-1/4\" />\n                        </div>\n                      </div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-3 bg-muted rounded w-full\" />\n                        <div className=\"h-3 bg-muted rounded w-5/6\" />\n                      </div>\n                    </div>\n                  </motion.div>\n                ))\n              ) : isError ? (\n                <motion.div\n                  className=\"bg-card rounded-2xl p-8 border border-card-border shadow-md text-center\"\n                  variants={itemVariants}\n                >\n                  <motion.div\n                    animate={{ \n                      scale: [1, 1.1, 1],\n                      rotate: [0, -5, 5, 0]\n                    }}\n                    transition={{ duration: 2, repeat: Infinity }}\n                  >\n                    <Heart className=\"mx-auto mb-3 text-destructive\" size={48} />\n                  </motion.div>\n                  <p className=\"text-destructive text-lg mb-2\">Không thể tải lời chúc</p>\n                  <p className=\"text-muted-foreground\">\n                    {error instanceof Error ? error.message : \"Vui lòng thử lại sau\"}\n                  </p>\n                </motion.div>\n              ) : messages.length === 0 ? (\n                <motion.div\n                  className=\"bg-card rounded-2xl p-8 border border-card-border shadow-md text-center\"\n                  variants={itemVariants}\n                >\n                  <motion.div\n                    animate={{ \n                      scale: [1, 1.2, 1],\n                    }}\n                    transition={{ duration: 3, repeat: Infinity }}\n                  >\n                    <Quote className=\"mx-auto mb-3 text-muted-foreground\" size={48} />\n                  </motion.div>\n                  <p className=\"text-muted-foreground text-lg mb-2\">\n                    Chưa có lời chúc nào\n                  </p>\n                  <p className=\"text-muted-foreground\">\n                    Hãy là người đầu tiên chia sẻ lời chúc của bạn!\n                  </p>\n                </motion.div>\n              ) : (\n                <AnimatePresence>\n                  {messages.map((msg, index) => (\n                    <motion.div\n                      key={msg.id}\n                      className=\"bg-card rounded-2xl p-6 border border-card-border shadow-lg hover:shadow-xl transition-all duration-300 group cursor-pointer relative overflow-hidden\"\n                      variants={messageVariants}\n                      initial=\"hidden\"\n                      animate=\"visible\"\n                      exit=\"exit\"\n                      whileHover={{ \n                        y: -5,\n                        scale: 1.02\n                      }}\n                      transition={{ type: \"spring\", stiffness: 400 }}\n                      data-testid={`message-${index}`}\n                    >\n                      {/* Background Hover Effect */}\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                      \n                      <div className=\"relative z-10\">\n                        <div className=\"flex items-start gap-3 mb-4\">\n                          <motion.div\n                            className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 group-hover:bg-primary/20 transition-colors\"\n                            whileHover={{ scale: 1.1, rotate: 360 }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            <Heart className=\"text-primary\" size={18} fill=\"currentColor\" />\n                          </motion.div>\n                          <div className=\"flex-1\">\n                            <p className=\"font-semibold text-foreground text-lg\">\n                              {msg.guestName}\n                            </p>\n                            <motion.p\n                              className=\"text-xs text-muted-foreground\"\n                              initial={{ opacity: 0 }}\n                              animate={{ opacity: 1 }}\n                              transition={{ delay: 0.2 }}\n                            >\n                              {new Date(msg.createdAt!).toLocaleDateString('vi-VN', {\n                                day: 'numeric',\n                                month: 'long',\n                                year: 'numeric'\n                              })}\n                            </motion.p>\n                          </div>\n                        </div>\n                        \n                        <motion.p\n                          className=\"text-foreground leading-relaxed text-lg pl-13 italic relative\"\n                          initial={{ opacity: 0 }}\n                          animate={{ opacity: 1 }}\n                          transition={{ delay: 0.3 }}\n                        >\n                          <Quote className=\"absolute -left-2 -top-2 text-primary/20\" size={24} />\n                          {msg.message}\n                        </motion.p>\n                      </div>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              )}\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":16928},"client/src/pages/AdminMessages.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, X, Trash2, Heart, MessageSquare, Filter, Search, Eye, Clock, CheckCircle, XCircle } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { GuestMessage } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function AdminMessages() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [previewMessage, setPreviewMessage] = useState<GuestMessage | null>(null);\n\n  const { data: messages = [], isLoading, isError, error } = useQuery<GuestMessage[]>({\n    queryKey: [\"/api/messages\"],\n  });\n\n  // Filter messages based on search and status\n  const filteredMessages = messages.filter(msg => {\n    const matchesSearch = msg.guestName.toLowerCase().includes(searchTerm.toLowerCase()) || \n                         msg.message.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"approved\" && msg.approved) ||\n                         (statusFilter === \"pending\" && !msg.approved);\n    return matchesSearch && matchesStatus;\n  });\n\n  const stats = {\n    total: messages.length,\n    approved: messages.filter(msg => msg.approved).length,\n    pending: messages.filter(msg => !msg.approved).length,\n  };\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ id, approved }: { id: string; approved: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/messages/${id}/approve`, { approved });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      toast({ \n        title: variables.approved ? \"✅ Đã phê duyệt\" : \"🔄 Đã hủy duyệt\",\n        description: `Tin nhắn đã được ${variables.approved ? 'phê duyệt' : 'hủy duyệt'}`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"🔐 Không có quyền\",\n          description: \"Bạn đã đăng xuất. Đang đăng nhập lại...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật tin nhắn\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/messages/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/messages\"] });\n      toast({ \n        title: \"🗑️ Đã xóa tin nhắn\",\n        description: \"Tin nhắn đã được xóa thành công\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"🔐 Không có quyền\",\n          description: \"Bạn đã đăng xuất. Đang đăng nhập lại...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa tin nhắn\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -5,\n      scale: 1.02,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-serif mb-2 text-foreground\">💌 Tin Nhắn Khách Mời</h2>\n          <p className=\"text-muted-foreground\">Kiểm duyệt và quản lý lời chúc của khách</p>\n        </div>\n        <div className=\"grid gap-4\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader>\n                <div className=\"h-6 bg-muted rounded w-1/4 mb-2\" />\n                <div className=\"h-4 bg-muted rounded w-1/6\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-4 bg-muted rounded w-full mb-2\" />\n                <div className=\"h-4 bg-muted rounded w-3/4\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </motion.div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-serif mb-2 text-foreground\">💌 Tin Nhắn Khách Mời</h2>\n          <p className=\"text-muted-foreground\">Kiểm duyệt và quản lý lời chúc của khách</p>\n        </div>\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <motion.div\n              animate={{ \n                scale: [1, 1.1, 1],\n                rotate: [0, -5, 5, 0]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Heart className=\"text-destructive mb-4\" size={64} />\n            </motion.div>\n            <p className=\"text-destructive text-lg mb-2\">Không thể tải tin nhắn</p>\n            <p className=\"text-muted-foreground text-center\">\n              {error instanceof Error ? error.message : \"Vui lòng thử lại sau\"}\n            </p>\n          </CardContent>\n        </Card>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Header */}\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div className=\"flex justify-between items-center mb-6\" variants={itemVariants}>\n          <div>\n            <h2 className=\"text-3xl font-serif mb-2 text-foreground\" data-testid=\"heading-messages\">\n              💌 Tin Nhắn Khách Mời\n            </h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Kiểm duyệt và quản lý lời chúc của khách\n            </p>\n          </div>\n        </motion.div>\n\n        {/* Stats */}\n        <motion.div className=\"grid grid-cols-3 gap-4 mb-6\" variants={itemVariants}>\n          <Card className=\"bg-blue-500/5 border-blue-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-blue-500\">{stats.total}</p>\n              <p className=\"text-sm text-muted-foreground\">Tổng số tin nhắn</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-green-500/5 border-green-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-green-500\">{stats.approved}</p>\n              <p className=\"text-sm text-muted-foreground\">Đã phê duyệt</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-orange-500/5 border-orange-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-orange-500\">{stats.pending}</p>\n              <p className=\"text-sm text-muted-foreground\">Chờ duyệt</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Search and Filter */}\n        <motion.div className=\"flex flex-col sm:flex-row gap-4 mb-6\" variants={itemVariants}>\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\" size={18} />\n            <Input\n              placeholder=\"🔍 Tìm kiếm theo tên hoặc nội dung tin nhắn...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 rounded-xl\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40 rounded-xl\">\n                <Filter size={16} className=\"mr-2\" />\n                <SelectValue placeholder=\"Tất cả trạng thái\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">🎯 Tất cả</SelectItem>\n                <SelectItem value=\"approved\">✅ Đã duyệt</SelectItem>\n                <SelectItem value=\"pending\">⏳ Chờ duyệt</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      {/* Messages List */}\n      {filteredMessages.length === 0 ? (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8 }}\n          animate={{ opacity: 1, scale: 1 }}\n          transition={{ duration: 0.6 }}\n        >\n          <Card className=\"border-dashed\">\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <MessageSquare size={64} className=\"text-muted-foreground mb-4 opacity-50\" />\n              <p className=\"text-muted-foreground text-lg mb-2\">Không tìm thấy tin nhắn nào</p>\n              <p className=\"text-muted-foreground text-center\">\n                {searchTerm || statusFilter !== \"all\" \n                  ? \"Thử thay đổi bộ lọc tìm kiếm\" \n                  : \"Chưa có tin nhắn nào từ khách mời\"\n                }\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n      ) : (\n        <motion.div\n          className=\"grid gap-4\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <AnimatePresence>\n            {filteredMessages.map((msg) => (\n              <motion.div\n                key={msg.id}\n                variants={cardVariants}\n                initial=\"hidden\"\n                animate=\"visible\"\n                whileHover=\"hover\"\n                exit=\"hidden\"\n                data-testid={`message-card-${msg.id}`}\n              >\n                <Card className=\"border-2 border-border/50 shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm group\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                          <Heart size={18} className=\"text-primary\" fill=\"currentColor\" />\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg flex items-center gap-2\">\n                            {msg.guestName}\n                            {msg.approved ? (\n                              <Badge variant=\"default\" className=\"bg-green-500/20 text-green-600 hover:bg-green-500/30\">\n                                <CheckCircle size={12} className=\"mr-1\" />\n                                Đã duyệt\n                              </Badge>\n                            ) : (\n                              <Badge variant=\"secondary\" className=\"bg-orange-500/20 text-orange-600 hover:bg-orange-500/30\">\n                                <Clock size={12} className=\"mr-1\" />\n                                Chờ duyệt\n                              </Badge>\n                            )}\n                          </CardTitle>\n                          <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                            <Clock size={12} />\n                            {new Date(msg.createdAt!).toLocaleDateString('vi-VN', {\n                              day: 'numeric',\n                              month: 'long',\n                              year: 'numeric',\n                              hour: '2-digit',\n                              minute: '2-digit'\n                            })}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"rounded-full\"\n                          onClick={() => setPreviewMessage(msg)}\n                        >\n                          <Eye size={14} />\n                        </Button>\n                        {!msg.approved ? (\n                          <Button\n                            size=\"sm\"\n                            className=\"rounded-full bg-green-500 hover:bg-green-600\"\n                            onClick={() => approveMutation.mutate({ id: msg.id, approved: true })}\n                            disabled={approveMutation.isPending || deleteMutation.isPending}\n                            data-testid={`button-approve-${msg.id}`}\n                          >\n                            <Check size={14} />\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"rounded-full border-orange-500 text-orange-600 hover:bg-orange-500/10\"\n                            onClick={() => approveMutation.mutate({ id: msg.id, approved: false })}\n                            disabled={approveMutation.isPending || deleteMutation.isPending}\n                            data-testid={`button-unapprove-${msg.id}`}\n                          >\n                            <X size={14} />\n                          </Button>\n                        )}\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"rounded-full border-destructive text-destructive hover:bg-destructive/10\"\n                          onClick={() => {\n                            if (confirm(`Bạn có chắc muốn xóa tin nhắn từ \"${msg.guestName}\"?`)) {\n                              deleteMutation.mutate(msg.id);\n                            }\n                          }}\n                          disabled={approveMutation.isPending || deleteMutation.isPending}\n                          data-testid={`button-delete-${msg.id}`}\n                        >\n                          <Trash2 size={14} />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <motion.p \n                      className=\"text-foreground leading-relaxed text-lg pl-13\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                      transition={{ delay: 0.2 }}\n                    >\n                      \"{msg.message}\"\n                    </motion.p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      )}\n\n      {/* Message Preview Dialog */}\n      <Dialog open={!!previewMessage} onOpenChange={() => setPreviewMessage(null)}>\n        <DialogContent className=\"max-w-2xl\">\n          {previewMessage && (\n            <>\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  <MessageSquare size={20} />\n                  Tin nhắn từ {previewMessage.guestName}\n                </DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"bg-muted/50 rounded-lg p-4\">\n                  <p className=\"text-foreground text-lg leading-relaxed italic\">\n                    \"{previewMessage.message}\"\n                  </p>\n                </div>\n                <div className=\"flex justify-between items-center text-sm text-muted-foreground\">\n                  <span>\n                    Gửi lúc {new Date(previewMessage.createdAt!).toLocaleString('vi-VN')}\n                  </span>\n                  <Badge variant={previewMessage.approved ? \"default\" : \"secondary\"}>\n                    {previewMessage.approved ? \"✅ Đã duyệt\" : \"⏳ Chờ duyệt\"}\n                  </Badge>\n                </div>\n              </div>\n            </>\n          )}\n        </DialogContent>\n      </Dialog>\n    </motion.div>\n  );\n}","size_bytes":17927},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/Location.tsx":{"content":"import { MapPin, Navigation, Phone, Clock, Car, Wifi, Utensils } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, useInView } from \"framer-motion\";\nimport { useRef, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Settings } from \"@shared/schema\";\n\nexport default function Location() {\n  const [isMapLoaded, setIsMapLoaded] = useState(false);\n  const ref = useRef(null);\n  const isInView = useInView(ref, { once: true, amount: 0.1 });\n\n  const { data: settings } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const venueName = settings?.venueName || \"Rose Garden Estate\";\n  const venueAddress = settings?.venueAddress || \"123 Garden Lane, Spring Valley, CA 91977\";\n  const venuePhone = settings?.venuePhone || \"+1 (555) 123-4567\";\n  const venueEmail = settings?.venueEmail || \"info@rosegardenestate.com\";\n  \n  // Format event times if available\n  const formatEventTime = () => {\n    if (settings?.eventStartTime && settings?.eventEndTime) {\n      const startTime = new Date(settings.eventStartTime);\n      const endTime = new Date(settings.eventEndTime);\n      const startTimeStr = startTime.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });\n      const endTimeStr = endTime.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });\n      return `${startTimeStr} - ${endTimeStr}`;\n    }\n    return \"3:00 Chiều - 10:00 Tối\";\n  };\n\n  const formatEventDate = () => {\n    if (settings?.eventStartTime) {\n      const eventDate = new Date(settings.eventStartTime);\n      return eventDate.toLocaleDateString('vi-VN', { day: 'numeric', month: 'long', year: 'numeric' });\n    }\n    return \"15 Tháng 6, 2025\";\n  };\n  \n  const venueDetails = {\n    name: venueName,\n    address: {\n      line1: venueAddress.split(',')[0] || venueAddress,\n      line2: venueAddress.split(',').slice(1).join(',').trim() || \"\"\n    },\n    contact: {\n      phone: venuePhone,\n      email: venueEmail\n    },\n    timing: {\n      date: formatEventDate(),\n      time: formatEventTime()\n    },\n    amenities: [\n      { icon: Car, label: \"Bãi đỗ xe miễn phí\", description: \"Dịch vụ đỗ xe có sẵn\" },\n      { icon: Wifi, label: \"Wi-Fi miễn phí\", description: \"Kết nối internet tốc độ cao\" },\n      { icon: Utensils, label: \"Nhà hàng\", description: \"Ẩm thực 5 sao\" }\n    ]\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const imageVariants = {\n    hidden: { opacity: 0, scale: 1.1 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const getDirections = () => {\n    if (settings?.venueMapLink) {\n      window.open(settings.venueMapLink, '_blank');\n    } else {\n      const address = encodeURIComponent(`${venueDetails.address.line1}, ${venueDetails.address.line2}`);\n      window.open(`https://www.google.com/maps/dir/?api=1&destination=${address}`, '_blank');\n    }\n  };\n\n  return (\n    <section id=\"location\" className=\"py-20 md:py-32 px-4 bg-background overflow-hidden\" ref={ref}>\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 50 }}\n          animate={isInView ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8 }}\n        >\n          <h2\n            className=\"font-serif text-4xl md:text-5xl mb-4 text-foreground\"\n            data-testid=\"heading-location\"\n          >\n            Địa Điểm Tổ Chức\n          </h2>\n          <motion.div\n            className=\"w-24 h-1 bg-primary mx-auto mb-4\"\n            initial={{ width: 0 }}\n            animate={isInView ? { width: \"6rem\" } : {}}\n            transition={{ duration: 0.8, delay: 0.3 }}\n          />\n          <motion.p\n            className=\"text-muted-foreground text-lg\"\n            initial={{ opacity: 0 }}\n            animate={isInView ? { opacity: 1 } : {}}\n            transition={{ duration: 0.6, delay: 0.5 }}\n          >\n            Hãy đến với chúng tôi tại địa điểm tuyệt đẹp\n          </motion.p>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 md:gap-12\">\n          {/* Venue Image & Map */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={isInView ? \"visible\" : \"hidden\"}\n          >\n            {/* Venue Image */}\n            <motion.div\n              className=\"rounded-2xl overflow-hidden shadow-2xl mb-6 relative group cursor-pointer\"\n              variants={imageVariants}\n              whileHover={{ scale: 1.02 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <motion.img\n                src={settings?.venueImage || \"https://placehold.co/800x600/e3e3e3/999999?text=Venue+Image\"}\n                alt=\"Địa Điểm Cưới\"\n                className=\"w-full h-80 object-contain bg-muted\"\n                data-testid=\"img-venue\"\n                whileHover={{ scale: 1.1 }}\n                transition={{ duration: 0.5 }}\n              />\n              <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 flex items-end p-6\">\n                <p className=\"text-white text-lg font-medium\">{venueName}</p>\n              </div>\n            </motion.div>\n\n            {/* Interactive Map */}\n            <motion.div\n              className=\"bg-card rounded-2xl overflow-hidden border border-card-border shadow-2xl h-80 relative\"\n              variants={itemVariants}\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              {!isMapLoaded && (\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-br from-muted to-muted/50 flex items-center justify-center z-10\"\n                  initial={{ opacity: 1 }}\n                  animate={{ opacity: isMapLoaded ? 0 : 1 }}\n                  transition={{ duration: 0.3 }}\n                >\n                  <motion.div\n                    className=\"text-center\"\n                    initial={{ scale: 0.8, opacity: 0 }}\n                    animate={{ scale: 1, opacity: 1 }}\n                    transition={{ duration: 0.6 }}\n                  >\n                    <motion.div\n                      animate={{ \n                        scale: [1, 1.2, 1],\n                        rotate: [0, 5, -5, 0]\n                      }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <MapPin className=\"mx-auto mb-4 text-primary\" size={48} />\n                    </motion.div>\n                    <p className=\"text-muted-foreground text-lg font-medium\">\n                      Đang tải bản đồ...\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-2\">\n                      {venueDetails.name}\n                    </p>\n                  </motion.div>\n                </motion.div>\n              )}\n              \n              {/* Google Maps Iframe */}\n              {settings?.venueMapLink ? (\n                <iframe\n                  src={settings.venueMapLink}\n                  width=\"100%\"\n                  height=\"100%\"\n                  style={{ border: 0 }}\n                  allowFullScreen\n                  loading=\"lazy\"\n                  referrerPolicy=\"no-referrer-when-downgrade\"\n                  onLoad={() => setIsMapLoaded(true)}\n                  onError={() => {\n                    console.error(\"Failed to load Google Maps iframe\");\n                    setIsMapLoaded(true);\n                  }}\n                  data-testid=\"iframe-map\"\n                  title=\"Bản đồ địa điểm tổ chức\"\n                />\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center text-muted-foreground\">\n                    <MapPin size={48} className=\"mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-sm\">Chưa có bản đồ</p>\n                    <p className=\"text-xs mt-2\">Vui lòng thêm link Google Maps trong Admin</p>\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </motion.div>\n\n          {/* Venue Details */}\n          <motion.div\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate={isInView ? \"visible\" : \"hidden\"}\n            transition={{ delay: 0.3 }}\n          >\n            <motion.div\n              className=\"bg-card rounded-2xl p-6 md:p-8 border border-card-border shadow-2xl backdrop-blur-sm\"\n              variants={itemVariants}\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <motion.h3\n                className=\"font-serif text-3xl mb-6 text-foreground bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent\"\n                variants={itemVariants}\n              >\n                {venueDetails.name}\n              </motion.h3>\n\n              <motion.div\n                className=\"space-y-6\"\n                variants={containerVariants}\n              >\n                {/* Address */}\n                <motion.div\n                  className=\"flex items-start gap-4 group cursor-pointer\"\n                  variants={itemVariants}\n                  whileHover={{ x: 5 }}\n                  transition={{ type: \"spring\", stiffness: 400 }}\n                >\n                  <motion.div\n                    className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 group-hover:bg-primary/20 transition-colors\"\n                    whileHover={{ scale: 1.1, rotate: 360 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <MapPin className=\"text-primary\" size={24} />\n                  </motion.div>\n                  <div>\n                    <p className=\"font-medium text-foreground mb-1\">Địa Chỉ</p>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {venueDetails.address.line1}\n                      <br />\n                      {venueDetails.address.line2}\n                    </p>\n                  </div>\n                </motion.div>\n\n                {/* Contact */}\n                <motion.div\n                  className=\"flex items-start gap-4 group cursor-pointer\"\n                  variants={itemVariants}\n                  whileHover={{ x: 5 }}\n                >\n                  <motion.div\n                    className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 group-hover:bg-primary/20 transition-colors\"\n                    whileHover={{ scale: 1.1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <Phone className=\"text-primary\" size={24} />\n                  </motion.div>\n                  <div>\n                    <p className=\"font-medium text-foreground mb-1\">Liên Hệ</p>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {venueDetails.contact.phone}\n                      <br />\n                      {venueDetails.contact.email}\n                    </p>\n                  </div>\n                </motion.div>\n\n                {/* Timing */}\n                <motion.div\n                  className=\"flex items-start gap-4 group\"\n                  variants={itemVariants}\n                  whileHover={{ x: 5 }}\n                >\n                  <motion.div\n                    className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 group-hover:bg-primary/20 transition-colors\"\n                    whileHover={{ scale: 1.1 }}\n                    transition={{ duration: 0.3 }}\n                  >\n                    <Clock className=\"text-primary\" size={24} />\n                  </motion.div>\n                  <div>\n                    <p className=\"font-medium text-foreground mb-1\">\n                      Thời Gian Sự Kiện\n                    </p>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {venueDetails.timing.date}\n                      <br />\n                      {venueDetails.timing.time}\n                    </p>\n                  </div>\n                </motion.div>\n\n                {/* Amenities */}\n                <motion.div\n                  className=\"grid grid-cols-1 md:grid-cols-3 gap-3\"\n                  variants={containerVariants}\n                >\n                  {venueDetails.amenities.map((amenity, index) => (\n                    <motion.div\n                      key={amenity.label}\n                      className=\"bg-primary/5 rounded-xl p-3 border border-primary/10 text-center group cursor-pointer\"\n                      variants={itemVariants}\n                      whileHover={{ \n                        scale: 1.05,\n                        backgroundColor: \"rgba(59, 130, 246, 0.1)\"\n                      }}\n                      transition={{ type: \"spring\", stiffness: 400 }}\n                    >\n                      <motion.div\n                        className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-2 group-hover:bg-primary/20 transition-colors\"\n                        whileHover={{ scale: 1.2 }}\n                      >\n                        <amenity.icon className=\"text-primary\" size={16} />\n                      </motion.div>\n                      <p className=\"text-xs font-medium text-foreground mb-1\">\n                        {amenity.label}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {amenity.description}\n                      </p>\n                    </motion.div>\n                  ))}\n                </motion.div>\n\n                {/* Parking Info */}\n                <motion.div\n                  className=\"bg-primary/5 rounded-xl p-4 border border-primary/20\"\n                  variants={itemVariants}\n                  whileHover={{ scale: 1.02 }}\n                >\n                  <p className=\"font-medium text-foreground mb-2\">\n                    🅿️ Thông Tin Đỗ Xe\n                  </p>\n                  <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                    Dịch vụ đỗ xe miễn phí có sẵn. Bãi đỗ xe bổ sung nằm ở phía bắc. \n                    Vui lòng đến sớm 15-20 phút để có chỗ đỗ xe thuận tiện.\n                  </p>\n                </motion.div>\n\n                {/* Directions Button */}\n                <motion.div \n                  variants={itemVariants}\n                  whileHover={{ scale: 1.02 }}\n                  whileTap={{ scale: 0.98 }}\n                >\n                  <Button\n                    className=\"w-full rounded-xl py-6 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300\"\n                    size=\"lg\"\n                    onClick={getDirections}\n                    data-testid=\"button-directions\"\n                  >\n                    <motion.div\n                      animate={{ x: [0, 5, 0] }}\n                      transition={{ duration: 2, repeat: Infinity }}\n                    >\n                      <Navigation size={20} className=\"mr-3\" />\n                    </motion.div>\n                    Chỉ Đường Đến Địa Điểm\n                  </Button>\n                </motion.div>\n              </motion.div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":16167},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/About.tsx":{"content":"import { HeartIcon, SparklesIcon } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { CoupleInfo } from \"@shared/schema\";\n\nexport default function About() {\n  const [headerRef, headerInView] = useInView({\n    triggerOnce: true,\n    threshold: 0.1,\n  });\n\n  // Fetch couple info from database\n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  // Use database data if available, otherwise use default\n  const story = {\n    bride: {\n      name: coupleInfo?.brideName || \"Xuân Lâm\",\n      description: coupleInfo?.brideDescription || \"Cô dâu Xuân Lâm - Người phụ nữ xinh đẹp, dịu dàng với nụ cười rạng rỡ luôn tỏa sáng. Lâm là một dược sĩ tận tâm với công việc, luôn quan tâm chăm sóc sức khỏe cộng đồng.\",\n      photo: coupleInfo?.bridePhoto || \"\"\n    },\n    groom: {\n      name: coupleInfo?.groomName || \"Xuân Lợi\",\n      description: coupleInfo?.groomDescription || \"Chú rể Xuân Lợi - Chàng trai thông minh, trách nhiệm và luôn tươi cười. Lợi là một kiến trúc sư tài năng với niềm đam mê thiết kế không gian sống hiện đại, ấm cúng.\",\n      photo: coupleInfo?.groomPhoto || \"\"\n    },\n    story: coupleInfo?.ourStory \n      ? coupleInfo.ourStory.split('\\n\\n') \n      : [\n          \"Chúng tôi gặp nhau vào mùa xuân năm 2022 tại triển lãm nghệ thuật ở Hà Nội. Từ lần gặp gỡ định mệnh đó, chúng tôi bắt đầu những buổi hẹn hò lãng mạn và khám phá tình yêu đích thực.\",\n          \"Sau hai năm yêu thương và thấu hiểu, Lợi đã cầu hôn Lâm tại Đà Lạt, thành phố ngàn hoa. Giờ đây, chúng tôi rất hạnh phúc được chia sẻ niềm vui này với gia đình và bạn bè.\"\n        ]\n  };\n\n  return (\n    <section id=\"about\" className=\"section-padding bg-card overflow-hidden\">\n      <div className=\"container-max\">\n        {/* Floating Background Elements */}\n        <FloatingElements />\n        \n        {/* Section Header */}\n        <motion.div\n          ref={headerRef}\n          initial={{ opacity: 0, y: 50 }}\n          animate={headerInView ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          className=\"text-center mb-16\"\n        >\n          <motion.h2 \n            className=\"section-heading\"\n            data-testid=\"heading-about\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={headerInView ? { opacity: 1, scale: 1 } : {}}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Câu Chuyện Của Chúng Tôi\n          </motion.h2>\n          <motion.p \n            className=\"text-lg text-muted-foreground mt-2\"\n            initial={{ opacity: 0 }}\n            animate={headerInView ? { opacity: 1 } : {}}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Hành trình yêu thương của chúng tôi\n          </motion.p>\n          <motion.div \n            className=\"section-divider\"\n            initial={{ width: 0 }}\n            animate={headerInView ? { width: \"6rem\" } : {}}\n            transition={{ duration: 0.8, delay: 0.6 }}\n          />\n        </motion.div>\n\n        {/* Couple Profiles */}\n        <div className=\"flex flex-col md:flex-row justify-center items-center md:items-start gap-12 md:gap-20\">\n          <ProfileCard \n            person={story.bride}\n            heartPosition=\"top-right\"\n            delay={0.2}\n          />\n          <ProfileCard \n            person={story.groom}\n            heartPosition=\"top-left\"\n            delay={0.5}\n          />\n        </div>\n\n        {/* Story Content */}\n        <StoryContent story={story.story} />\n      </div>\n    </section>\n  );\n}\n\n// Floating Background Elements\nfunction FloatingElements() {\n  return (\n    <>\n      <motion.div\n        className=\"absolute top-20 left-10 w-4 h-4 rounded-full bg-primary/20\"\n        animate={{\n          y: [0, -20, 0],\n          scale: [1, 1.2, 1],\n        }}\n        transition={{\n          duration: 4,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n        }}\n      />\n      <motion.div\n        className=\"absolute top-40 right-20 w-6 h-6 rounded-full bg-primary/10\"\n        animate={{\n          y: [0, 30, 0],\n          scale: [1, 0.8, 1],\n        }}\n        transition={{\n          duration: 5,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 1,\n        }}\n      />\n      <motion.div\n        className=\"absolute bottom-40 left-20 w-3 h-3 rounded-full bg-primary/15\"\n        animate={{\n          y: [0, -15, 0],\n          x: [0, 10, 0],\n        }}\n        transition={{\n          duration: 3,\n          repeat: Infinity,\n          ease: \"easeInOut\",\n          delay: 0.5,\n        }}\n      />\n    </>\n  );\n}\n\n// Profile Card with Enhanced Animations\nfunction ProfileCard({ \n  person, \n  heartPosition, \n  delay \n}: { \n  person: { name: string; description: string; photo: string };\n  heartPosition: 'top-left' | 'top-right';\n  delay: number;\n}) {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0.2,\n  });\n\n  const heartPositionClasses = {\n    'top-left': '-top-2 -left-2',\n    'top-right': '-top-2 -right-2'\n  };\n\n  const imageVariants = {\n    hidden: { \n      opacity: 0, \n      scale: 0.8,\n      rotate: heartPosition === 'top-left' ? -5 : 5 \n    },\n    visible: { \n      opacity: 1, \n      scale: 1,\n      rotate: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\",\n      }\n    }\n  };\n\n  const textVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: {\n        duration: 0.6,\n        delay: delay + 0.3,\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      initial=\"hidden\"\n      animate={inView ? \"visible\" : \"hidden\"}\n      className=\"text-center\"\n    >\n      <motion.div className=\"relative inline-block mb-6\">\n        <motion.div\n          className=\"profile-image-container relative overflow-hidden\"\n          variants={imageVariants}\n          transition={{ duration: 0.8, delay }}\n          whileHover={{ \n            scale: 1.05,\n            transition: { duration: 0.3 }\n          }}\n        >\n          <motion.img\n            src={person.photo}\n            alt={person.name}\n            className=\"profile-image\"\n            data-testid={`img-${person.name.toLowerCase()}`}\n            whileHover={{ scale: 1.1 }}\n            transition={{ duration: 0.5 }}\n          />\n          {/* Gradient Overlay */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-300\" />\n        </motion.div>\n\n        {/* Animated Heart */}\n        <motion.div\n          className={`absolute ${heartPositionClasses[heartPosition]} text-primary`}\n          initial={{ scale: 0, rotate: -180 }}\n          animate={inView ? { scale: 1, rotate: 0 } : {}}\n          transition={{ \n            type: \"spring\",\n            stiffness: 200,\n            damping: 10,\n            delay: delay + 0.5 \n          }}\n          whileHover={{\n            scale: 1.2,\n            rotate: 10,\n            transition: { duration: 0.2 }\n          }}\n        >\n          <HeartIcon \n            size={40} \n            className=\"text-primary fill-current drop-shadow-lg\" \n          />\n        </motion.div>\n\n        {/* Floating Sparkles */}\n        <motion.div\n          className=\"absolute -bottom-2 -right-2\"\n          animate={{\n            rotate: 360,\n            scale: [1, 1.1, 1],\n          }}\n          transition={{\n            duration: 3,\n            repeat: Infinity,\n            ease: \"linear\",\n          }}\n        >\n          <SparklesIcon size={24} className=\"text-yellow-400/60\" />\n        </motion.div>\n      </motion.div>\n\n      <motion.h3 \n        className=\"profile-name\"\n        data-testid={`text-${person.name.toLowerCase()}-name`}\n        variants={textVariants}\n      >\n        {person.name}\n      </motion.h3>\n      \n      <motion.p \n        className=\"profile-description\"\n        variants={textVariants}\n      >\n        {person.description}\n      </motion.p>\n    </motion.div>\n  );\n}\n\n// Story Content with Typing Animation\nfunction StoryContent({ story }: { story: string[] }) {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0.3,\n  });\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3,\n        delayChildren: 0.2,\n      }\n    }\n  };\n\n  const paragraphVariants = {\n    hidden: { \n      opacity: 0, \n      y: 30,\n      filter: \"blur(10px)\"\n    },\n    visible: { \n      opacity: 1, \n      y: 0,\n      filter: \"blur(0px)\",\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.div\n      ref={ref}\n      initial=\"hidden\"\n      animate={inView ? \"visible\" : \"hidden\"}\n      variants={containerVariants}\n      className=\"story-content\"\n    >\n      {story.map((paragraph, index) => (\n        <motion.p\n          key={index}\n          variants={paragraphVariants}\n          className={`story-paragraph ${index === 0 ? 'text-foreground' : 'text-muted-foreground'}`}\n          data-testid={`text-story-${index}`}\n        >\n          {paragraph}\n        </motion.p>\n      ))}\n      \n      {/* Decorative Element */}\n      <motion.div\n        className=\"flex justify-center mt-8 space-x-2\"\n        initial={{ opacity: 0, scale: 0 }}\n        animate={inView ? { opacity: 1, scale: 1 } : {}}\n        transition={{ delay: 1.2, duration: 0.6 }}\n      >\n        {[1, 2, 3].map((i) => (\n          <motion.div\n            key={i}\n            className=\"w-2 h-2 rounded-full bg-primary/60\"\n            animate={{\n              scale: [1, 1.5, 1],\n              opacity: [0.5, 1, 0.5],\n            }}\n            transition={{\n              duration: 1.5,\n              repeat: Infinity,\n              delay: i * 0.2,\n            }}\n          />\n        ))}\n      </motion.div>\n    </motion.div>\n  );\n}\n","size_bytes":10245},"client/src/pages/AdminWeddingParty.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Users, \n  Plus, \n  Trash2, \n  Pencil, \n  Upload,\n  X,\n  Heart,\n  UserPlus\n} from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { WeddingParty, InsertWeddingParty } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\n\nexport default function AdminWeddingParty() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingMember, setEditingMember] = useState<WeddingParty | null>(null);\n  const [uploading, setUploading] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    role: \"\",\n    description: \"\",\n    photoUrl: \"\",\n    order: 0,\n  });\n\n  const { data: members = [], isLoading } = useQuery<WeddingParty[]>({\n    queryKey: [\"/api/wedding-party\"],\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertWeddingParty) => {\n      return await apiRequest(\"POST\", \"/api/wedding-party\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wedding-party\"] });\n      toast({ \n        title: \"✅ Thêm thành viên thành công\",\n        description: \"Thành viên đã được thêm vào đội ngũ đám cưới\"\n      });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể thêm thành viên\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertWeddingParty> }) => {\n      return await apiRequest(\"PATCH\", `/api/wedding-party/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wedding-party\"] });\n      toast({ \n        title: \"✅ Cập nhật thành công\",\n        description: \"Thông tin thành viên đã được cập nhật\"\n      });\n      handleCloseDialog();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật thành viên\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/wedding-party/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wedding-party\"] });\n      toast({ \n        title: \"🗑️ Xóa thành công\",\n        description: \"Thành viên đã được xóa khỏi đội ngũ\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa thành viên\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    try {\n      const imageUrl = await uploadImageToCloudinary(file);\n      setFormData(prev => ({ ...prev, photoUrl: imageUrl }));\n      toast({\n        title: \"✅ Upload thành công\",\n        description: \"Ảnh đã được tải lên\"\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi upload\",\n        description: \"Không thể tải ảnh lên\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.role) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng điền đầy đủ thông tin bắt buộc\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (editingMember) {\n      updateMutation.mutate({\n        id: editingMember.id,\n        data: formData,\n      });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (member: WeddingParty) => {\n    setEditingMember(member);\n    setFormData({\n      name: member.name,\n      role: member.role,\n      description: member.description || \"\",\n      photoUrl: member.photoUrl || \"\",\n      order: member.order,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingMember(null);\n    setFormData({\n      name: \"\",\n      role: \"\",\n      description: \"\",\n      photoUrl: \"\",\n      order: 0,\n    });\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Bạn có chắc chắn muốn xóa thành viên này?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Đang tải...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 lg:p-8 space-y-6\">\n      {/* Header */}\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"flex items-center justify-between\"\n      >\n        <div>\n          <h1 className=\"text-3xl font-serif font-bold text-foreground flex items-center gap-3\">\n            <div className=\"p-3 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl\">\n              <Users size={28} className=\"text-primary\" />\n            </div>\n            Đội Ngũ Đám Cưới\n          </h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Quản lý phù dâu, phù rể và đội ngũ hỗ trợ\n          </p>\n        </div>\n        \n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button\n              onClick={() => {\n                setEditingMember(null);\n                setFormData({\n                  name: \"\",\n                  role: \"\",\n                  description: \"\",\n                  photoUrl: \"\",\n                  order: members.length,\n                });\n              }}\n              className=\"gap-2\"\n              data-testid=\"button-add-member\"\n            >\n              <UserPlus size={18} />\n              Thêm Thành Viên\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"text-2xl font-serif\">\n                {editingMember ? \"Chỉnh Sửa Thành Viên\" : \"Thêm Thành Viên Mới\"}\n              </DialogTitle>\n            </DialogHeader>\n            \n            <form onSubmit={handleSubmit} className=\"space-y-6 mt-4\">\n              {/* Photo Upload */}\n              <div className=\"space-y-2\">\n                <Label>Ảnh Thành Viên</Label>\n                <div className=\"flex flex-col gap-4\">\n                  {formData.photoUrl && (\n                    <div className=\"relative w-32 h-32 rounded-lg overflow-hidden border\">\n                      <img \n                        src={formData.photoUrl} \n                        alt=\"Preview\" \n                        className=\"w-full h-full object-cover\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setFormData(prev => ({ ...prev, photoUrl: \"\" }))}\n                        className=\"absolute top-1 right-1 p-1 bg-destructive text-destructive-foreground rounded-full hover:bg-destructive/90\"\n                      >\n                        <X size={14} />\n                      </button>\n                    </div>\n                  )}\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => fileInputRef.current?.click()}\n                    disabled={uploading}\n                    className=\"w-fit gap-2\"\n                    data-testid=\"button-upload-photo\"\n                  >\n                    <Upload size={18} />\n                    {uploading ? \"Đang tải...\" : \"Chọn Ảnh\"}\n                  </Button>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleFileSelect}\n                    className=\"hidden\"\n                  />\n                </div>\n              </div>\n\n              {/* Name */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\">Tên Thành Viên *</Label>\n                <Input\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                  placeholder=\"Nguyễn Văn A\"\n                  required\n                  data-testid=\"input-member-name\"\n                />\n              </div>\n\n              {/* Role */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"role\">Vai Trò *</Label>\n                <Input\n                  id=\"role\"\n                  value={formData.role}\n                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}\n                  placeholder=\"Phù Dâu, Phù Rể, MC...\"\n                  required\n                  data-testid=\"input-member-role\"\n                />\n              </div>\n\n              {/* Description */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"description\">Mô Tả</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Giới thiệu ngắn về thành viên...\"\n                  rows={4}\n                  data-testid=\"input-member-description\"\n                />\n              </div>\n\n              {/* Order */}\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"order\">Thứ Tự Hiển Thị</Label>\n                <Input\n                  id=\"order\"\n                  type=\"number\"\n                  value={formData.order}\n                  onChange={(e) => setFormData(prev => ({ ...prev, order: parseInt(e.target.value) || 0 }))}\n                  min=\"0\"\n                  data-testid=\"input-member-order\"\n                />\n              </div>\n\n              <div className=\"flex gap-3 pt-4\">\n                <Button\n                  type=\"submit\"\n                  className=\"flex-1\"\n                  disabled={createMutation.isPending || updateMutation.isPending}\n                  data-testid=\"button-submit-member\"\n                >\n                  {editingMember ? \"Cập Nhật\" : \"Thêm Mới\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleCloseDialog}\n                  data-testid=\"button-cancel\"\n                >\n                  Hủy\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </motion.div>\n\n      {/* Stats */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.1 }}\n        className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n      >\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Tổng Số</p>\n                <p className=\"text-3xl font-bold text-foreground mt-1\">{members.length}</p>\n              </div>\n              <Users className=\"text-primary\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Có Ảnh</p>\n                <p className=\"text-3xl font-bold text-foreground mt-1\">\n                  {members.filter(m => m.photoUrl).length}\n                </p>\n              </div>\n              <Heart className=\"text-rose-500\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Vai Trò</p>\n                <p className=\"text-3xl font-bold text-foreground mt-1\">\n                  {Array.from(new Set(members.map(m => m.role))).length}\n                </p>\n              </div>\n              <UserPlus className=\"text-blue-500\" size={32} />\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n\n      {/* Members List */}\n      {members.length === 0 ? (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-center py-16\"\n        >\n          <Users size={64} className=\"mx-auto text-muted-foreground/50 mb-4\" />\n          <p className=\"text-xl text-muted-foreground mb-2\">Chưa có thành viên nào</p>\n          <p className=\"text-sm text-muted-foreground\">\n            Nhấn \"Thêm Thành Viên\" để bắt đầu\n          </p>\n        </motion.div>\n      ) : (\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n        >\n          <AnimatePresence>\n            {members.map((member) => (\n              <motion.div\n                key={member.id}\n                variants={itemVariants}\n                layout\n                exit={{ opacity: 0, scale: 0.9 }}\n              >\n                <Card className=\"overflow-hidden hover:shadow-lg transition-all duration-300\">\n                  <CardContent className=\"p-0\">\n                    {/* Photo */}\n                    {member.photoUrl ? (\n                      <div className=\"relative h-48 bg-muted\">\n                        <img \n                          src={member.photoUrl} \n                          alt={member.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      </div>\n                    ) : (\n                      <div className=\"h-48 bg-gradient-to-br from-primary/10 to-primary/5 flex items-center justify-center\">\n                        <Users size={48} className=\"text-muted-foreground/30\" />\n                      </div>\n                    )}\n                    \n                    {/* Info */}\n                    <div className=\"p-5 space-y-3\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg text-foreground\" data-testid={`text-member-name-${member.id}`}>\n                          {member.name}\n                        </h3>\n                        <p className=\"text-sm text-primary font-medium\">\n                          {member.role}\n                        </p>\n                      </div>\n                      \n                      {member.description && (\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {member.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex gap-2 pt-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleEdit(member)}\n                          className=\"flex-1 gap-2\"\n                          data-testid={`button-edit-${member.id}`}\n                        >\n                          <Pencil size={14} />\n                          Sửa\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => handleDelete(member.id)}\n                          className=\"gap-2\"\n                          data-testid={`button-delete-${member.id}`}\n                        >\n                          <Trash2 size={14} />\n                          Xóa\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","size_bytes":18330},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./auth\";\nimport {\n  insertCoupleInfoSchema,\n  insertScheduleEventSchema,\n  insertPhotoSchema,\n  insertGuestMessageSchema,\n  insertRsvpSchema,\n  insertRegistryItemSchema,\n  insertSettingsSchema,\n  insertWeddingPartySchema,\n  insertPopupSchema,\n  insertFaqSchema,\n  insertMusicTrackSchema,\n  insertGuestPhotoSchema,\n  insertLivestreamInfoSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n\n  // ===== Couple Info Routes =====\n  app.get(\"/api/couple\", async (req, res) => {\n    try {\n      const info = await storage.getCoupleInfo();\n      res.json(info || null);\n    } catch (error) {\n      console.error(\"Error fetching couple info:\", error);\n      res.status(500).json({ message: \"Failed to fetch couple info\" });\n    }\n  });\n\n  app.post(\"/api/couple\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertCoupleInfoSchema.parse(req.body);\n      const info = await storage.upsertCoupleInfo(validated);\n      res.json(info);\n    } catch (error: any) {\n      console.error(\"Error updating couple info:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update couple info\" });\n    }\n  });\n\n  // ===== Schedule Events Routes =====\n  app.get(\"/api/schedule\", async (req, res) => {\n    try {\n      const events = await storage.getAllScheduleEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching schedule events:\", error);\n      res.status(500).json({ message: \"Failed to fetch schedule events\" });\n    }\n  });\n\n  app.post(\"/api/schedule\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertScheduleEventSchema.parse(req.body);\n      const event = await storage.createScheduleEvent(validated);\n      res.json(event);\n    } catch (error: any) {\n      console.error(\"Error creating schedule event:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create schedule event\" });\n    }\n  });\n\n  app.patch(\"/api/schedule/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertScheduleEventSchema.partial().parse(req.body);\n      const event = await storage.updateScheduleEvent(id, validated);\n      if (!event) {\n        return res.status(404).json({ message: \"Schedule event not found\" });\n      }\n      res.json(event);\n    } catch (error: any) {\n      console.error(\"Error updating schedule event:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update schedule event\" });\n    }\n  });\n\n  app.delete(\"/api/schedule/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteScheduleEvent(id);\n      res.json({ message: \"Schedule event deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting schedule event:\", error);\n      res.status(500).json({ message: \"Failed to delete schedule event\" });\n    }\n  });\n\n  // ===== Photos Routes =====\n  app.get(\"/api/photos\", async (req, res) => {\n    try {\n      const photos = await storage.getAllPhotos();\n      res.json(photos);\n    } catch (error) {\n      console.error(\"Error fetching photos:\", error);\n      res.status(500).json({ message: \"Failed to fetch photos\" });\n    }\n  });\n\n  app.post(\"/api/photos\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertPhotoSchema.parse(req.body);\n      const photo = await storage.createPhoto(validated);\n      res.json(photo);\n    } catch (error: any) {\n      console.error(\"Error creating photo:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create photo\" });\n    }\n  });\n\n  app.patch(\"/api/photos/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertPhotoSchema.partial().parse(req.body);\n      const photo = await storage.updatePhoto(id, validated);\n      if (!photo) {\n        return res.status(404).json({ message: \"Photo not found\" });\n      }\n      res.json(photo);\n    } catch (error: any) {\n      console.error(\"Error updating photo:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update photo\" });\n    }\n  });\n\n  app.delete(\"/api/photos/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePhoto(id);\n      res.json({ message: \"Photo deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting photo:\", error);\n      res.status(500).json({ message: \"Failed to delete photo\" });\n    }\n  });\n\n  // ===== Guest Messages Routes =====\n  app.get(\"/api/messages\", async (req, res) => {\n    try {\n      const approvedOnly = req.query.approved === 'true';\n      const messages = await storage.getAllGuestMessages(approvedOnly);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching guest messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch guest messages\" });\n    }\n  });\n\n  app.post(\"/api/messages\", async (req, res) => {\n    try {\n      const validated = insertGuestMessageSchema.parse(req.body);\n      const message = await storage.createGuestMessage(validated);\n      res.json(message);\n    } catch (error: any) {\n      console.error(\"Error creating guest message:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create guest message\" });\n    }\n  });\n\n  app.patch(\"/api/messages/:id/approve\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const approvalSchema = z.object({ approved: z.boolean() });\n      const { approved } = approvalSchema.parse(req.body);\n      const message = await storage.approveGuestMessage(id, approved);\n      if (!message) {\n        return res.status(404).json({ message: \"Guest message not found\" });\n      }\n      res.json(message);\n    } catch (error: any) {\n      console.error(\"Error approving guest message:\", error);\n      res.status(400).json({ message: error.message || \"Failed to approve guest message\" });\n    }\n  });\n\n  app.delete(\"/api/messages/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteGuestMessage(id);\n      res.json({ message: \"Guest message deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting guest message:\", error);\n      res.status(500).json({ message: \"Failed to delete guest message\" });\n    }\n  });\n\n  // ===== RSVPs Routes =====\n  app.get(\"/api/rsvps\", isAuthenticated, async (req, res) => {\n    try {\n      const rsvps = await storage.getAllRsvps();\n      res.json(rsvps);\n    } catch (error) {\n      console.error(\"Error fetching RSVPs:\", error);\n      res.status(500).json({ message: \"Failed to fetch RSVPs\" });\n    }\n  });\n\n  app.post(\"/api/rsvps\", async (req, res) => {\n    try {\n      const validated = insertRsvpSchema.parse(req.body);\n      const rsvp = await storage.createRsvp(validated);\n      res.json(rsvp);\n    } catch (error: any) {\n      console.error(\"Error creating RSVP:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create RSVP\" });\n    }\n  });\n\n  app.delete(\"/api/rsvps/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRsvp(id);\n      res.json({ message: \"RSVP deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting RSVP:\", error);\n      res.status(500).json({ message: \"Failed to delete RSVP\" });\n    }\n  });\n\n  // ===== Registry Items Routes =====\n  app.get(\"/api/registry\", async (req, res) => {\n    try {\n      const items = await storage.getAllRegistryItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching registry items:\", error);\n      res.status(500).json({ message: \"Failed to fetch registry items\" });\n    }\n  });\n\n  app.post(\"/api/registry\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertRegistryItemSchema.parse(req.body);\n      const item = await storage.createRegistryItem(validated);\n      res.json(item);\n    } catch (error: any) {\n      console.error(\"Error creating registry item:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create registry item\" });\n    }\n  });\n\n  app.patch(\"/api/registry/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertRegistryItemSchema.partial().parse(req.body);\n      const item = await storage.updateRegistryItem(id, validated);\n      if (!item) {\n        return res.status(404).json({ message: \"Registry item not found\" });\n      }\n      res.json(item);\n    } catch (error: any) {\n      console.error(\"Error updating registry item:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update registry item\" });\n    }\n  });\n\n  app.delete(\"/api/registry/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteRegistryItem(id);\n      res.json({ message: \"Registry item deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting registry item:\", error);\n      res.status(500).json({ message: \"Failed to delete registry item\" });\n    }\n  });\n\n  // ===== Settings Routes =====\n  app.get(\"/api/settings\", async (req, res) => {\n    try {\n      const settings = await storage.getSettings();\n      res.json(settings || null);\n    } catch (error) {\n      console.error(\"Error fetching settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch settings\" });\n    }\n  });\n\n  app.post(\"/api/settings\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertSettingsSchema.parse(req.body);\n      const settings = await storage.upsertSettings(validated);\n      res.json(settings);\n    } catch (error: any) {\n      console.error(\"Error updating settings:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update settings\" });\n    }\n  });\n\n  // ===== Wedding Party Routes =====\n  app.get(\"/api/wedding-party\", async (req, res) => {\n    try {\n      const members = await storage.getAllWeddingParty();\n      res.json(members);\n    } catch (error) {\n      console.error(\"Error fetching wedding party:\", error);\n      res.status(500).json({ message: \"Failed to fetch wedding party\" });\n    }\n  });\n\n  app.post(\"/api/wedding-party\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertWeddingPartySchema.parse(req.body);\n      const member = await storage.createWeddingPartyMember(validated);\n      res.json(member);\n    } catch (error: any) {\n      console.error(\"Error creating wedding party member:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create wedding party member\" });\n    }\n  });\n\n  app.patch(\"/api/wedding-party/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertWeddingPartySchema.partial().parse(req.body);\n      const member = await storage.updateWeddingPartyMember(id, validated);\n      if (!member) {\n        return res.status(404).json({ message: \"Wedding party member not found\" });\n      }\n      res.json(member);\n    } catch (error: any) {\n      console.error(\"Error updating wedding party member:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update wedding party member\" });\n    }\n  });\n\n  app.delete(\"/api/wedding-party/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteWeddingPartyMember(id);\n      res.json({ message: \"Wedding party member deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting wedding party member:\", error);\n      res.status(500).json({ message: \"Failed to delete wedding party member\" });\n    }\n  });\n\n  // ===== Popups Routes =====\n  app.get(\"/api/popups\", async (req, res) => {\n    try {\n      const popupsList = await storage.getAllPopups();\n      res.json(popupsList);\n    } catch (error) {\n      console.error(\"Error fetching popups:\", error);\n      res.status(500).json({ message: \"Failed to fetch popups\" });\n    }\n  });\n\n  app.get(\"/api/popups/:type\", async (req, res) => {\n    try {\n      const { type } = req.params;\n      const popup = await storage.getPopupByType(type);\n      res.json(popup || null);\n    } catch (error) {\n      console.error(\"Error fetching popup by type:\", error);\n      res.status(500).json({ message: \"Failed to fetch popup\" });\n    }\n  });\n\n  app.post(\"/api/popups\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertPopupSchema.parse(req.body);\n      const popup = await storage.createPopup(validated);\n      res.json(popup);\n    } catch (error: any) {\n      console.error(\"Error creating popup:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create popup\" });\n    }\n  });\n\n  app.patch(\"/api/popups/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertPopupSchema.partial().parse(req.body);\n      const popup = await storage.updatePopup(id, validated);\n      if (!popup) {\n        return res.status(404).json({ message: \"Popup not found\" });\n      }\n      res.json(popup);\n    } catch (error: any) {\n      console.error(\"Error updating popup:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update popup\" });\n    }\n  });\n\n  app.delete(\"/api/popups/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deletePopup(id);\n      res.json({ message: \"Popup deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting popup:\", error);\n      res.status(500).json({ message: \"Failed to delete popup\" });\n    }\n  });\n\n  // ===== FAQ Routes =====\n  app.get(\"/api/faqs\", async (req, res) => {\n    try {\n      const faqs = await storage.getAllFaqs();\n      res.json(faqs);\n    } catch (error) {\n      console.error(\"Error fetching FAQs:\", error);\n      res.status(500).json({ message: \"Failed to fetch FAQs\" });\n    }\n  });\n\n  app.get(\"/api/faqs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const faq = await storage.getFaq(id);\n      if (!faq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      res.json(faq);\n    } catch (error) {\n      console.error(\"Error fetching FAQ:\", error);\n      res.status(500).json({ message: \"Failed to fetch FAQ\" });\n    }\n  });\n\n  app.post(\"/api/faqs\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertFaqSchema.parse(req.body);\n      const faq = await storage.createFaq(validated);\n      res.json(faq);\n    } catch (error: any) {\n      console.error(\"Error creating FAQ:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create FAQ\" });\n    }\n  });\n\n  app.patch(\"/api/faqs/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertFaqSchema.partial().parse(req.body);\n      const faq = await storage.updateFaq(id, validated);\n      if (!faq) {\n        return res.status(404).json({ message: \"FAQ not found\" });\n      }\n      res.json(faq);\n    } catch (error: any) {\n      console.error(\"Error updating FAQ:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update FAQ\" });\n    }\n  });\n\n  app.delete(\"/api/faqs/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteFaq(id);\n      res.json({ message: \"FAQ deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting FAQ:\", error);\n      res.status(500).json({ message: \"Failed to delete FAQ\" });\n    }\n  });\n\n  // ===== Music Tracks Routes =====\n  app.get(\"/api/music-tracks\", async (req, res) => {\n    try {\n      const activeOnly = req.query.activeOnly === 'true';\n      const tracks = await storage.getAllMusicTracks(activeOnly);\n      res.json(tracks);\n    } catch (error) {\n      console.error(\"Error fetching music tracks:\", error);\n      res.status(500).json({ message: \"Failed to fetch music tracks\" });\n    }\n  });\n\n  app.get(\"/api/music-tracks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const track = await storage.getMusicTrack(id);\n      if (!track) {\n        return res.status(404).json({ message: \"Music track not found\" });\n      }\n      res.json(track);\n    } catch (error) {\n      console.error(\"Error fetching music track:\", error);\n      res.status(500).json({ message: \"Failed to fetch music track\" });\n    }\n  });\n\n  app.post(\"/api/music-tracks\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertMusicTrackSchema.parse(req.body);\n      const track = await storage.createMusicTrack(validated);\n      res.json(track);\n    } catch (error: any) {\n      console.error(\"Error creating music track:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create music track\" });\n    }\n  });\n\n  app.patch(\"/api/music-tracks/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validated = insertMusicTrackSchema.partial().parse(req.body);\n      const track = await storage.updateMusicTrack(id, validated);\n      if (!track) {\n        return res.status(404).json({ message: \"Music track not found\" });\n      }\n      res.json(track);\n    } catch (error: any) {\n      console.error(\"Error updating music track:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update music track\" });\n    }\n  });\n\n  app.delete(\"/api/music-tracks/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteMusicTrack(id);\n      res.json({ message: \"Music track deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting music track:\", error);\n      res.status(500).json({ message: \"Failed to delete music track\" });\n    }\n  });\n\n\n  // ===== Guest Photos Routes =====\n  app.get(\"/api/guest-photos\", async (req, res) => {\n    try {\n      const approvedOnly = req.query.approved === \"true\";\n      const photos = await storage.getAllGuestPhotos(approvedOnly);\n      res.json(photos);\n    } catch (error) {\n      console.error(\"Error fetching guest photos:\", error);\n      res.status(500).json({ message: \"Failed to fetch guest photos\" });\n    }\n  });\n\n  app.get(\"/api/guest-photos/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const photo = await storage.getGuestPhoto(id);\n      if (!photo) {\n        return res.status(404).json({ message: \"Guest photo not found\" });\n      }\n      res.json(photo);\n    } catch (error) {\n      console.error(\"Error fetching guest photo:\", error);\n      res.status(500).json({ message: \"Failed to fetch guest photo\" });\n    }\n  });\n\n  app.post(\"/api/guest-photos\", async (req, res) => {\n    try {\n      const validated = insertGuestPhotoSchema.parse(req.body);\n      const photo = await storage.createGuestPhoto(validated);\n      res.json(photo);\n    } catch (error: any) {\n      console.error(\"Error creating guest photo:\", error);\n      res.status(400).json({ message: error.message || \"Failed to create guest photo\" });\n    }\n  });\n\n  app.patch(\"/api/guest-photos/:id/approve\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approved } = req.body;\n      const photo = await storage.approveGuestPhoto(id, approved);\n      if (!photo) {\n        return res.status(404).json({ message: \"Guest photo not found\" });\n      }\n      res.json(photo);\n    } catch (error: any) {\n      console.error(\"Error approving guest photo:\", error);\n      res.status(400).json({ message: error.message || \"Failed to approve guest photo\" });\n    }\n  });\n\n  app.delete(\"/api/guest-photos/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteGuestPhoto(id);\n      res.json({ message: \"Guest photo deleted\" });\n    } catch (error) {\n      console.error(\"Error deleting guest photo:\", error);\n      res.status(500).json({ message: \"Failed to delete guest photo\" });\n    }\n  });\n\n  // ===== Livestream Info Routes =====\n  app.get(\"/api/livestream\", async (req, res) => {\n    try {\n      const info = await storage.getLivestreamInfo();\n      res.json(info || null);\n    } catch (error) {\n      console.error(\"Error fetching livestream info:\", error);\n      res.status(500).json({ message: \"Failed to fetch livestream info\" });\n    }\n  });\n\n  app.post(\"/api/livestream\", isAuthenticated, async (req, res) => {\n    try {\n      const validated = insertLivestreamInfoSchema.parse(req.body);\n      const info = await storage.upsertLivestreamInfo(validated);\n      res.json(info);\n    } catch (error: any) {\n      console.error(\"Error updating livestream info:\", error);\n      res.status(400).json({ message: error.message || \"Failed to update livestream info\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":21226},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport LoadingScreen from \"@/components/LoadingScreen\";\nimport { FontProvider } from \"@/components/FontProvider\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Login from \"@/pages/Login\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport AdminHome from \"@/pages/AdminHome\";\nimport AdminCouple from \"@/pages/AdminCouple\";\nimport AdminMessages from \"@/pages/AdminMessages\";\nimport AdminRSVPs from \"@/pages/AdminRSVPs\";\nimport AdminSchedule from \"@/pages/AdminSchedule\";\nimport AdminGallery from \"@/pages/AdminGallery\";\nimport AdminRegistry from \"@/pages/AdminRegistry\";\nimport AdminSettings from \"@/pages/AdminSettings\";\nimport AdminWeddingParty from \"@/pages/AdminWeddingParty\";\nimport AdminGuestPhotos from \"@/pages/AdminGuestPhotos\";\nimport AdminLivestream from \"@/pages/AdminLivestream\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin text-primary\">\n          <div className=\"w-12 h-12 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    window.location.href = \"/login\";\n    return null;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Public Landing Page */}\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/login\" component={Login} />\n\n      {/* Protected Admin Routes */}\n      <Route path=\"/admin\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminHome />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/couple\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminCouple />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/messages\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminMessages />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/rsvps\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminRSVPs />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/schedule\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminSchedule />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/gallery\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminGallery />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/registry\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminRegistry />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/settings\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminSettings />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/wedding-party\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminWeddingParty />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/guest-photos\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminGuestPhotos />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route path=\"/admin/livestream\">\n        {() => (\n          <ProtectedRoute>\n            <AdminDashboard>\n              <AdminLivestream />\n            </AdminDashboard>\n          </ProtectedRoute>\n        )}\n      </Route>\n\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <FontProvider>\n        <TooltipProvider>\n          <LoadingScreen />\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </FontProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4747},"client/src/components/PopupManager.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Popup } from \"@shared/schema\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { X } from \"lucide-react\";\n\nexport default function PopupManager() {\n  const [showWelcome, setShowWelcome] = useState(false);\n  const [showScrollEnd, setShowScrollEnd] = useState(false);\n  const [hasShownWelcome, setHasShownWelcome] = useState(false);\n  const [hasShownScrollEnd, setHasShownScrollEnd] = useState(false);\n\n  const { data: popups } = useQuery<Popup[]>({\n    queryKey: [\"/api/popups\"],\n  });\n\n  const welcomePopup = popups?.find((p) => p.type === \"welcome\" && p.isActive);\n  const scrollEndPopup = popups?.find((p) => p.type === \"scroll_end\" && p.isActive);\n\n  useEffect(() => {\n    const hasSeenWelcome = localStorage.getItem(\"hasSeenWelcomePopup\");\n    \n    if (welcomePopup && !hasSeenWelcome && !hasShownWelcome) {\n      setTimeout(() => {\n        setShowWelcome(true);\n        setHasShownWelcome(true);\n      }, 1000);\n    }\n  }, [welcomePopup, hasShownWelcome]);\n\n  useEffect(() => {\n    if (!scrollEndPopup) return;\n\n    const handleScroll = () => {\n      const scrollHeight = document.documentElement.scrollHeight;\n      const scrollTop = document.documentElement.scrollTop;\n      const clientHeight = document.documentElement.clientHeight;\n      \n      const scrollPercentage = (scrollTop + clientHeight) / scrollHeight;\n      \n      if (scrollPercentage > 0.95 && !hasShownScrollEnd) {\n        setShowScrollEnd(true);\n        setHasShownScrollEnd(true);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [scrollEndPopup, hasShownScrollEnd]);\n\n  const handleCloseWelcome = () => {\n    setShowWelcome(false);\n    localStorage.setItem(\"hasSeenWelcomePopup\", \"true\");\n  };\n\n  const handleCloseScrollEnd = () => {\n    setShowScrollEnd(false);\n  };\n\n  const PopupContent = ({ popup, onClose }: { popup: Popup; onClose: () => void }) => (\n    <motion.div\n      className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/70 backdrop-blur-sm p-4\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      onClick={onClose}\n      data-testid={`popup-overlay-${popup.type}`}\n    >\n      <motion.div\n        className=\"relative max-w-2xl w-full bg-white dark:bg-gray-900 rounded-3xl shadow-2xl overflow-hidden\"\n        initial={{ scale: 0.8, y: 50 }}\n        animate={{ scale: 1, y: 0 }}\n        exit={{ scale: 0.8, y: 50 }}\n        transition={{ type: \"spring\", duration: 0.5 }}\n        onClick={(e) => e.stopPropagation()}\n        data-testid={`popup-content-${popup.type}`}\n      >\n        <button\n          onClick={onClose}\n          className=\"absolute top-4 right-4 z-10 w-10 h-10 bg-black/50 hover:bg-black/70 rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110\"\n          data-testid={`button-close-popup-${popup.type}`}\n        >\n          <X className=\"text-white\" size={24} />\n        </button>\n        \n        <div className=\"relative\">\n          <img\n            src={popup.imageUrl}\n            alt=\"Popup\"\n            className=\"w-full max-h-[80vh] object-contain\"\n            data-testid={`img-popup-${popup.type}`}\n          />\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n\n  return (\n    <AnimatePresence>\n      {showWelcome && welcomePopup && (\n        <PopupContent popup={welcomePopup} onClose={handleCloseWelcome} />\n      )}\n      {showScrollEnd && scrollEndPopup && (\n        <PopupContent popup={scrollEndPopup} onClose={handleCloseScrollEnd} />\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":3726},"server/index.ts":{"content":"import { createApp } from \"./app\";\nimport { setupVite, log } from \"./vite\";\n\n(async () => {\n  try {\n    const app = await createApp();\n    \n    // Only setup Vite in development\n    let server;\n    if (app.get(\"env\") === \"development\") {\n      server = await import('http').then(m => m.createServer(app));\n      await setupVite(app, server);\n    } else {\n      server = await import('http').then(m => m.createServer(app));\n    }\n\n    const port = parseInt(process.env.PORT || '5000', 10);\n    \n    server.listen(port, '0.0.0.0', () => {\n      log(`🚀 Wedding site server running on http://0.0.0.0:${port}`);\n      log(`📊 Environment: ${app.get(\"env\")}`);\n    });\n\n    // Handle server errors\n    server.on('error', (error: any) => {\n      if (error.code === 'EADDRINUSE') {\n        log(`❌ Port ${port} is already in use. Try a different port.`);\n        process.exit(1);\n      } else {\n        log(`❌ Server error: ${error.message}`);\n        process.exit(1);\n      }\n    });\n\n    // Handle shutdown signals\n    process.on('SIGINT', () => {\n      log('🛑 Shutting down server...');\n      server.close(() => {\n        log('✅ Server stopped');\n        process.exit(0);\n      });\n    });\n\n  } catch (error) {\n    console.error('❌ Failed to start server:', error);\n    process.exit(1);\n  }\n})();","size_bytes":1306},"client/src/pages/AdminCouple.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Save, Upload, Image, User, Calendar, Heart, Camera, X } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport type { CoupleInfo, InsertCoupleInfo } from \"@shared/schema\";\n\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\n\nexport default function AdminCouple() {\n  const { toast } = useToast();\n  \n  const { data: coupleInfo, isLoading: isLoadingData } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  const [formData, setFormData] = useState({\n    brideName: \"\",\n    groomName: \"\",\n    brideDescription: \"\",\n    groomDescription: \"\",\n    weddingDate: \"\",\n    ourStory: \"\",\n    bridePhoto: \"\",\n    groomPhoto: \"\",\n    heroImage: \"\",\n  });\n\n  const [uploading, setUploading] = useState<string | null>(null);\n  const fileInputRefs = {\n    bridePhoto: useRef<HTMLInputElement>(null),\n    groomPhoto: useRef<HTMLInputElement>(null),\n    heroImage: useRef<HTMLInputElement>(null),\n  };\n\n  useEffect(() => {\n    if (coupleInfo) {\n      setFormData({\n        brideName: coupleInfo.brideName || \"\",\n        groomName: coupleInfo.groomName || \"\",\n        brideDescription: coupleInfo.brideDescription || \"\",\n        groomDescription: coupleInfo.groomDescription || \"\",\n        weddingDate: coupleInfo.weddingDate ? new Date(coupleInfo.weddingDate).toISOString().split('T')[0] : \"\",\n        ourStory: coupleInfo.ourStory || \"\",\n        bridePhoto: coupleInfo.bridePhoto || \"\",\n        groomPhoto: coupleInfo.groomPhoto || \"\",\n        heroImage: coupleInfo.heroImage || \"\",\n      });\n    }\n  }, [coupleInfo]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: InsertCoupleInfo) => {\n      return await apiRequest(\"POST\", \"/api/couple\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/couple\"] });\n      toast({ \n        title: \"✅ Thành công!\",\n        description: \"Thông tin cặp đôi đã được cập nhật\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật thông tin cặp đôi\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const data: InsertCoupleInfo = {\n      brideName: formData.brideName,\n      groomName: formData.groomName,\n      brideDescription: formData.brideDescription || null,\n      groomDescription: formData.groomDescription || null,\n      weddingDate: new Date(formData.weddingDate),\n      ourStory: formData.ourStory,\n      bridePhoto: formData.bridePhoto || null,\n      groomPhoto: formData.groomPhoto || null,\n      heroImage: formData.heroImage || null,\n    };\n    \n    updateMutation.mutate(data);\n  };\n\n  const handleFileSelect = async (field: keyof typeof fileInputRefs, event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(field);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file);\n      setFormData(prev => ({ ...prev, [field]: imageUrl }));\n      \n      toast({\n        title: \"✅ Thành công!\",\n        description: `Đã tải lên ảnh ${getFieldLabel(field)} thành công`,\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: `Không thể tải lên ảnh ${getFieldLabel(field)}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(null);\n      // Reset file input\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const getFieldLabel = (field: string): string => {\n    const labels: { [key: string]: string } = {\n      bridePhoto: \"cô dâu\",\n      groomPhoto: \"chú rể\",\n      heroImage: \"hình nền\"\n    };\n    return labels[field] || field;\n  };\n\n  const handleRemoveImage = (field: keyof typeof fileInputRefs) => {\n    setFormData(prev => ({ ...prev, [field]: \"\" }));\n  };\n\n  const triggerFileInput = (field: keyof typeof fileInputRefs) => {\n    fileInputRefs[field].current?.click();\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  // Hidden file inputs\n  const renderHiddenFileInput = (field: keyof typeof fileInputRefs) => (\n    <input\n      type=\"file\"\n      ref={fileInputRefs[field]}\n      onChange={(e) => handleFileSelect(field, e)}\n      accept=\"image/*\"\n      className=\"hidden\"\n    />\n  );\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      <motion.div className=\"mb-8\" variants={containerVariants} initial=\"hidden\" animate=\"visible\">\n        <motion.h2 \n          className=\"text-3xl font-serif mb-2 text-foreground\" \n          data-testid=\"heading-couple-info\"\n          variants={itemVariants}\n        >\n          👰‍♀️🤵‍♂️ Thông Tin Cô Dâu Chú Rể\n        </motion.h2>\n        <motion.p \n          className=\"text-muted-foreground\"\n          variants={itemVariants}\n        >\n          Quản lý thông tin chi tiết về cô dâu chú rể và câu chuyện tình yêu\n        </motion.p>\n      </motion.div>\n\n      <motion.div\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"border-2 border-border/50 shadow-xl\">\n          <CardHeader className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b\">\n            <motion.div variants={itemVariants}>\n              <CardTitle className=\"flex items-center gap-2 text-2xl\">\n                <Heart className=\"text-primary\" size={24} fill=\"currentColor\" />\n                Chỉnh Sửa Thông Tin Cặp Đôi\n              </CardTitle>\n            </motion.div>\n          </CardHeader>\n          <CardContent className=\"p-6\">\n            {/* Hidden file inputs */}\n            {renderHiddenFileInput('bridePhoto')}\n            {renderHiddenFileInput('groomPhoto')}\n            {renderHiddenFileInput('heroImage')}\n\n            <motion.form onSubmit={handleSubmit} className=\"space-y-8\" variants={containerVariants}>\n              {/* Names Section */}\n              <motion.div \n                className=\"grid md:grid-cols-2 gap-6 p-4 bg-card rounded-xl border\"\n                variants={itemVariants}\n                whileHover={{ scale: 1.01 }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"brideName\" className=\"text-lg font-medium flex items-center gap-2\">\n                    <User className=\"text-pink-500\" size={20} />\n                    Tên Cô Dâu\n                  </Label>\n                  <Input\n                    id=\"brideName\"\n                    value={formData.brideName}\n                    onChange={(e) => setFormData({ ...formData, brideName: e.target.value })}\n                    className=\"h-12 text-lg border-2 focus:border-pink-500 transition-all duration-300\"\n                    data-testid=\"input-bride-name\"\n                  />\n                </div>\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"groomName\" className=\"text-lg font-medium flex items-center gap-2\">\n                    <User className=\"text-blue-500\" size={20} />\n                    Tên Chú Rể\n                  </Label>\n                  <Input\n                    id=\"groomName\"\n                    value={formData.groomName}\n                    onChange={(e) => setFormData({ ...formData, groomName: e.target.value })}\n                    className=\"h-12 text-lg border-2 focus:border-blue-500 transition-all duration-300\"\n                    data-testid=\"input-groom-name\"\n                  />\n                </div>\n              </motion.div>\n\n              {/* Bride and Groom Descriptions */}\n              <motion.div \n                className=\"grid md:grid-cols-2 gap-6 p-4 bg-card rounded-xl border\"\n                variants={itemVariants}\n                whileHover={{ scale: 1.01 }}\n                transition={{ type: \"spring\", stiffness: 300 }}\n              >\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"brideDescription\" className=\"text-lg font-medium flex items-center gap-2\">\n                    💝 Giới Thiệu Cô Dâu\n                  </Label>\n                  <Textarea\n                    id=\"brideDescription\"\n                    value={formData.brideDescription}\n                    onChange={(e) => setFormData({ ...formData, brideDescription: e.target.value })}\n                    rows={4}\n                    className=\"text-lg border-2 focus:border-pink-500 transition-all duration-300 resize-none\"\n                    data-testid=\"input-bride-description\"\n                    placeholder=\"Vài dòng giới thiệu về cô dâu...\"\n                  />\n                </div>\n                <div className=\"space-y-3\">\n                  <Label htmlFor=\"groomDescription\" className=\"text-lg font-medium flex items-center gap-2\">\n                    💙 Giới Thiệu Chú Rể\n                  </Label>\n                  <Textarea\n                    id=\"groomDescription\"\n                    value={formData.groomDescription}\n                    onChange={(e) => setFormData({ ...formData, groomDescription: e.target.value })}\n                    rows={4}\n                    className=\"text-lg border-2 focus:border-blue-500 transition-all duration-300 resize-none\"\n                    data-testid=\"input-groom-description\"\n                    placeholder=\"Vài dòng giới thiệu về chú rể...\"\n                  />\n                </div>\n              </motion.div>\n\n              {/* Wedding Date */}\n              <motion.div \n                className=\"p-4 bg-card rounded-xl border\"\n                variants={itemVariants}\n                whileHover={{ scale: 1.01 }}\n              >\n                <Label htmlFor=\"weddingDate\" className=\"text-lg font-medium flex items-center gap-2 mb-3\">\n                  <Calendar className=\"text-primary\" size={20} />\n                  Ngày Cưới\n                </Label>\n                <Input\n                  id=\"weddingDate\"\n                  type=\"date\"\n                  value={formData.weddingDate}\n                  onChange={(e) => setFormData({ ...formData, weddingDate: e.target.value })}\n                  className=\"h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                  data-testid=\"input-wedding-date\"\n                />\n              </motion.div>\n\n              {/* Our Story */}\n              <motion.div \n                className=\"p-4 bg-card rounded-xl border\"\n                variants={itemVariants}\n                whileHover={{ scale: 1.01 }}\n              >\n                <Label htmlFor=\"ourStory\" className=\"text-lg font-medium flex items-center gap-2 mb-3\">\n                  📖 Câu Chuyện Của Chúng Tôi\n                </Label>\n                <Textarea\n                  id=\"ourStory\"\n                  value={formData.ourStory}\n                  onChange={(e) => setFormData({ ...formData, ourStory: e.target.value })}\n                  rows={6}\n                  className=\"text-lg border-2 focus:border-primary transition-all duration-300 resize-none\"\n                  data-testid=\"input-our-story\"\n                  placeholder=\"Chia sẻ câu chuyện tình yêu đặc biệt của bạn...\"\n                />\n              </motion.div>\n\n              {/* Image Uploads */}\n              <motion.div \n                className=\"space-y-6 p-4 bg-card rounded-xl border\"\n                variants={itemVariants}\n                whileHover={{ scale: 1.01 }}\n              >\n                <h3 className=\"text-xl font-semibold flex items-center gap-2\">\n                  <Camera className=\"text-primary\" size={24} />\n                  Hình Ảnh\n                </h3>\n                \n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {/* Bride Photo */}\n                  <div className=\"space-y-3\">\n                    <Label className=\"text-lg font-medium flex items-center gap-2\">\n                      👰 Ảnh Cô Dâu\n                    </Label>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={formData.bridePhoto}\n                          onChange={(e) => setFormData({ ...formData, bridePhoto: e.target.value })}\n                          placeholder=\"URL hình ảnh hoặc tải lên từ thiết bị\"\n                          className=\"h-12 text-lg border-2 focus:border-pink-500 transition-all duration-300\"\n                          data-testid=\"input-bride-photo\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-12 w-12\"\n                          onClick={() => triggerFileInput('bridePhoto')}\n                          disabled={uploading === 'bridePhoto'}\n                        >\n                          {uploading === 'bridePhoto' ? (\n                            <motion.div\n                              animate={{ rotate: 360 }}\n                              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                            >\n                              ⏳\n                            </motion.div>\n                          ) : (\n                            <Upload size={20} />\n                          )}\n                        </Button>\n                      </div>\n                      {formData.bridePhoto && (\n                        <div className=\"relative group\">\n                          <img \n                            src={formData.bridePhoto} \n                            alt=\"Bride preview\" \n                            className=\"w-32 h-32 object-cover rounded-lg border-2 border-pink-200\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"icon\"\n                            className=\"absolute -top-2 -right-2 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => handleRemoveImage('bridePhoto')}\n                          >\n                            <X size={12} />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Groom Photo */}\n                  <div className=\"space-y-3\">\n                    <Label className=\"text-lg font-medium flex items-center gap-2\">\n                      🤵 Ảnh Chú Rể\n                    </Label>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex gap-2\">\n                        <Input\n                          value={formData.groomPhoto}\n                          onChange={(e) => setFormData({ ...formData, groomPhoto: e.target.value })}\n                          placeholder=\"URL hình ảnh hoặc tải lên từ thiết bị\"\n                          className=\"h-12 text-lg border-2 focus:border-blue-500 transition-all duration-300\"\n                          data-testid=\"input-groom-photo\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"icon\"\n                          className=\"h-12 w-12\"\n                          onClick={() => triggerFileInput('groomPhoto')}\n                          disabled={uploading === 'groomPhoto'}\n                        >\n                          {uploading === 'groomPhoto' ? (\n                            <motion.div\n                              animate={{ rotate: 360 }}\n                              transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                            >\n                              ⏳\n                            </motion.div>\n                          ) : (\n                            <Upload size={20} />\n                          )}\n                        </Button>\n                      </div>\n                      {formData.groomPhoto && (\n                        <div className=\"relative group\">\n                          <img \n                            src={formData.groomPhoto} \n                            alt=\"Groom preview\" \n                            className=\"w-32 h-32 object-cover rounded-lg border-2 border-blue-200\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"icon\"\n                            className=\"absolute -top-2 -right-2 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => handleRemoveImage('groomPhoto')}\n                          >\n                            <X size={12} />\n                          </Button>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Hero Image */}\n                <div className=\"space-y-3\">\n                  <Label className=\"text-lg font-medium flex items-center gap-2\">\n                    🏞️ Hình Nền Trang Chủ\n                  </Label>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={formData.heroImage}\n                        onChange={(e) => setFormData({ ...formData, heroImage: e.target.value })}\n                        placeholder=\"URL hình ảnh nền hoặc tải lên từ thiết bị\"\n                        className=\"h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                        data-testid=\"input-hero-image\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"icon\"\n                        className=\"h-12 w-12\"\n                        onClick={() => triggerFileInput('heroImage')}\n                        disabled={uploading === 'heroImage'}\n                      >\n                        {uploading === 'heroImage' ? (\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            ⏳\n                          </motion.div>\n                        ) : (\n                          <Image size={20} />\n                        )}\n                      </Button>\n                    </div>\n                    {formData.heroImage && (\n                      <div className=\"relative group\">\n                        <img \n                          src={formData.heroImage} \n                          alt=\"Hero preview\" \n                          className=\"w-full h-48 object-contain bg-muted rounded-lg border-2 border-primary/20\"\n                        />\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"icon\"\n                          className=\"absolute -top-2 -right-2 h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                          onClick={() => handleRemoveImage('heroImage')}\n                        >\n                          <X size={12} />\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Preview Section */}\n              <motion.div \n                className=\"p-6 bg-gradient-to-r from-primary/5 to-primary/10 rounded-xl border-2 border-dashed border-primary/20\"\n                variants={itemVariants}\n              >\n                <h3 className=\"text-xl font-semibold mb-4 flex items-center gap-2\">\n                  👁️ Xem Trước\n                </h3>\n                <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                  <div className=\"space-y-2\">\n                    <p><strong>Cô dâu:</strong> {formData.brideName}</p>\n                    <p><strong>Chú rể:</strong> {formData.groomName}</p>\n                    <p><strong>Ngày cưới:</strong> {formData.weddingDate ? new Date(formData.weddingDate).toLocaleDateString('vi-VN') : 'Chưa chọn'}</p>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <p className=\"text-muted-foreground\">\n                      {formData.ourStory.length > 100 \n                        ? formData.ourStory.substring(0, 100) + '...' \n                        : formData.ourStory || 'Chưa có câu chuyện...'\n                      }\n                    </p>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Submit Button */}\n              <motion.div variants={itemVariants}>\n                <Button \n                  type=\"submit\" \n                  className=\"w-full md:w-auto min-w-48 h-12 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden group\"\n                  data-testid=\"button-save-couple\"\n                  disabled={updateMutation.isPending}\n                >\n                  {/* Button Shine Effect */}\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000\" />\n                  \n                  <div className=\"flex items-center gap-2 relative z-10\">\n                    {updateMutation.isPending ? (\n                      <motion.div\n                        animate={{ rotate: 360 }}\n                        transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                      >\n                        ⏳\n                      </motion.div>\n                    ) : (\n                      <>\n                        <Save size={20} />\n                        Lưu Thay Đổi\n                      </>\n                    )}\n                  </div>\n                </Button>\n              </motion.div>\n            </motion.form>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </motion.div>\n  );\n}","size_bytes":24109},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"replit.md":{"content":"# Wedding Website - Xuân Lâm & Xuân Lợi\n\n## Overview\n\nA modern, full-featured Vietnamese wedding website platform that combines a public-facing wedding invitation site with a comprehensive admin dashboard. The application enables couples to manage their entire wedding digital presence - from personalized invitations and photo galleries to guest RSVP tracking and gift registry management.\n\n**Core Purpose**: Provide a complete, culturally-appropriate wedding management solution for Vietnamese couples with traditional elements (QR code money gifts) integrated seamlessly with modern web technologies.\n\n**Key Capabilities**:\n- Public wedding website with hero section, couple story, event schedule, photo gallery, guest messages, RSVP system, location details, and gift registry\n- Admin dashboard for managing all content, tracking responses, and moderating messages\n- Real-time RSVP tracking and guest management\n- Vietnamese-first design with full language support\n- Mobile-responsive design optimized for Vietnamese users\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React 18.3 with TypeScript 5.6\n- **UI Library**: Radix UI components styled with Tailwind CSS\n- **State Management**: TanStack Query (React Query) for server state\n- **Routing**: Wouter (lightweight client-side routing)\n- **Animations**: Framer Motion for smooth, elegant transitions\n- **Forms**: React Hook Form with Zod validation\n\n**Design System**:\n- Shadcn/ui component library (New York style variant)\n- Custom theming with CSS variables for light/dark mode\n- Vietnamese font support via Google Fonts (Noto Serif, Dancing Script, Great Vibes)\n- Responsive design with mobile-first approach\n\n**Key Design Patterns**:\n- Component composition with shared UI primitives\n- Server state synchronized via React Query with aggressive caching\n- Animation patterns using Intersection Observer for scroll-triggered effects\n- Image optimization through base64 data URLs (embedded in database)\n\n**Layout Structure**:\n- Public landing page: Single-page application with smooth scrolling sections\n- Admin dashboard: Sidebar navigation with nested routes for different management areas\n- Protected routes with authentication checks\n\n### Backend Architecture\n\n**Framework**: Express.js with TypeScript\n- **Runtime**: Node.js 20.x\n- **Build Tool**: Vite for frontend bundling, esbuild for server bundling\n- **Development**: tsx for TypeScript execution in development\n\n**API Design**:\n- RESTful endpoints organized by resource (`/api/couple`, `/api/schedule`, `/api/rsvps`, etc.)\n- Session-based authentication using Passport.js with local strategy\n- CORS configuration for Vercel deployment with allowed origins\n- Express middleware for JSON parsing (50MB limit for base64 images)\n\n**Authentication & Authorization**:\n- Passport.js Local Strategy with bcrypt password hashing\n- Session storage in PostgreSQL using connect-pg-simple\n- Protected routes using `isAuthenticated` middleware\n- Admin-only access to mutation endpoints\n- Cookie-based sessions with httpOnly, secure flags in production\n\n**Data Access Layer**:\n- Storage abstraction pattern (`server/storage.ts`) providing CRUD operations\n- All database operations go through storage interface for consistency\n- Separation of concerns: routes handle HTTP, storage handles data\n\n### Data Storage\n\n**Database**: PostgreSQL (Neon serverless)\n- **ORM**: Drizzle ORM with TypeScript schema definitions\n- **Migrations**: Drizzle Kit for schema management\n- **Connection Pooling**: node-postgres (pg) with minimal pooling for serverless (max: 1 connection)\n\n**Schema Design**:\n- `users` - Admin authentication\n- `sessions` - Express session storage (required for serverless)\n- `couple_info` - Bride/groom information and story\n- `schedule_events` - Wedding timeline events\n- `photos` - Gallery images with base64 storage\n- `guest_messages` - Guest wishes with approval workflow\n- `rsvps` - Guest attendance responses\n- `registry_items` - Gift registry (deprecated in favor of QR codes)\n- `settings` - Site configuration (venue, music, fonts, social links)\n- `wedding_party` - Bridesmaids/groomsmen information\n- `faqs` - Frequently asked questions\n- `popups` - Welcome and scroll-end promotional popups\n- `music_tracks` - Background music playlist\n\n**Data Storage Strategy**:\n- Images stored as base64 data URLs directly in database (simplifies deployment, no external storage needed)\n- Session data persisted to PostgreSQL (critical for Vercel serverless - cannot use memory store)\n- All timestamps use PostgreSQL timestamp type with timezone awareness\n\n### External Dependencies\n\n**Third-Party Services**:\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Vercel**: Serverless deployment platform (configured via vercel.json)\n- **Google Fonts API**: Dynamic font loading for Vietnamese typography\n- **Google Maps Embed API**: Venue location maps\n\n**Key NPM Packages**:\n- `@neondatabase/serverless` - Neon database client\n- `drizzle-orm` - TypeScript ORM with PostgreSQL dialect\n- `bcrypt` - Password hashing for admin authentication\n- `passport` / `passport-local` - Authentication middleware\n- `express-session` / `connect-pg-simple` - Session management with PostgreSQL backing\n- `@tanstack/react-query` - Server state management on frontend\n- `framer-motion` - React animation library\n- `@radix-ui/*` - Accessible UI component primitives\n- `tailwindcss` - Utility-first CSS framework\n- `zod` - TypeScript-first schema validation\n- `react-hook-form` - Form state management\n\n**Asset Management**:\n- Static assets served from `attached_assets/` directory\n- Wedding images organized in subdirectories (album, avatar, background, venue, etc.)\n- Music files served from `attached_assets/wedding_music/`\n- All uploads converted to base64 for database storage (no CDN dependency)\n\n**Deployment Architecture**:\n- **Vercel Serverless Functions**: Express app wrapped in serverless handler (`api/index.js`)\n- **Build Process**: Vite builds client to `dist/public`, esbuild bundles server to `dist/`\n- **Environment Variables**: `DATABASE_URL`, `SESSION_SECRET`, `ALLOWED_ORIGINS`\n- **Static File Serving**: Vercel serves from `dist/public` with rewrites for SPA routing\n\n**Development vs Production**:\n- Development: Vite dev server with HMR on port 5000\n- Production: Static files served by Vercel, API routes handled by serverless functions\n- Database pooling: 1 connection max in serverless to prevent \"too many connections\" errors\n- Session store: Always PostgreSQL (never in-memory) for serverless compatibility","size_bytes":6658},"client/src/components/WeddingParty.tsx":{"content":"import { Users, Heart, UserPlus } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { WeddingParty as WeddingPartyType } from \"@shared/schema\";\n\nexport default function WeddingParty() {\n  const [headerRef, headerInView] = useInView({\n    triggerOnce: true,\n    threshold: 0.1,\n  });\n\n  const { data: members = [], isLoading } = useQuery<WeddingPartyType[]>({\n    queryKey: [\"/api/wedding-party\"],\n  });\n\n  // Sort members by order\n  const sortedMembers = [...members].sort((a, b) => a.order - b.order);\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.15,\n        delayChildren: 0.3,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\",\n      },\n    },\n  };\n\n  if (isLoading || members.length === 0) {\n    return null;\n  }\n\n  return (\n    <section id=\"wedding-party\" className=\"section-padding bg-background overflow-hidden\">\n      <div className=\"container-max\">\n        {/* Section Header */}\n        <motion.div\n          ref={headerRef}\n          initial={{ opacity: 0, y: 50 }}\n          animate={headerInView ? { opacity: 1, y: 0 } : {}}\n          transition={{ duration: 0.8, ease: \"easeOut\" }}\n          className=\"text-center mb-16\"\n        >\n          <motion.h2 \n            className=\"section-heading\"\n            data-testid=\"heading-wedding-party\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={headerInView ? { opacity: 1, scale: 1 } : {}}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Đội Ngũ Đám Cưới\n          </motion.h2>\n          <motion.p \n            className=\"text-lg text-muted-foreground mt-2\"\n            initial={{ opacity: 0 }}\n            animate={headerInView ? { opacity: 1 } : {}}\n            transition={{ duration: 0.6, delay: 0.4 }}\n          >\n            Những người đồng hành cùng chúng tôi\n          </motion.p>\n          <motion.div \n            className=\"section-divider\"\n            initial={{ width: 0 }}\n            animate={headerInView ? { width: \"6rem\" } : {}}\n            transition={{ duration: 0.8, delay: 0.6 }}\n          />\n        </motion.div>\n\n        {/* Team Members Grid */}\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true, margin: \"-100px\" }}\n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8\"\n        >\n          {sortedMembers.map((member, index) => (\n            <MemberCard key={member.id} member={member} index={index} variants={itemVariants} />\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n\ninterface MemberCardProps {\n  member: WeddingPartyType;\n  index: number;\n  variants: any;\n}\n\nfunction MemberCard({ member, index, variants }: MemberCardProps) {\n  const [cardRef, cardInView] = useInView({\n    triggerOnce: true,\n    threshold: 0.1,\n  });\n\n  return (\n    <motion.div\n      ref={cardRef}\n      variants={variants}\n      className=\"group relative\"\n      data-testid={`card-wedding-party-${member.id}`}\n    >\n      <div className=\"relative overflow-hidden rounded-2xl bg-card border border-border shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2\">\n        {/* Photo */}\n        <div className=\"relative h-72 bg-gradient-to-br from-primary/10 to-primary/5 overflow-hidden\">\n          {member.photoUrl ? (\n            <motion.img\n              src={member.photoUrl}\n              alt={member.name}\n              className=\"w-full h-full object-cover\"\n              initial={{ scale: 1.1 }}\n              whileInView={{ scale: 1 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Users size={64} className=\"text-muted-foreground/30\" />\n            </div>\n          )}\n          \n          {/* Gradient Overlay */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-card via-card/50 to-transparent opacity-90\" />\n          \n          {/* Role Badge */}\n          <div className=\"absolute top-4 right-4\">\n            <motion.div\n              initial={{ scale: 0, rotate: -180 }}\n              whileInView={{ scale: 1, rotate: 0 }}\n              transition={{ delay: 0.2 + index * 0.1, type: \"spring\" }}\n              viewport={{ once: true }}\n              className=\"bg-primary/90 backdrop-blur-sm text-primary-foreground px-3 py-1.5 rounded-full text-xs font-medium shadow-lg\"\n            >\n              {member.role}\n            </motion.div>\n          </div>\n\n          {/* Floating Heart */}\n          <motion.div\n            className=\"absolute top-4 left-4 text-primary\"\n            animate={{\n              y: [0, -10, 0],\n              rotate: [0, 10, -10, 0],\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              ease: \"easeInOut\",\n              delay: index * 0.2,\n            }}\n          >\n            <Heart size={20} fill=\"currentColor\" />\n          </motion.div>\n        </div>\n\n        {/* Info */}\n        <div className=\"p-6 relative\">\n          <motion.h3\n            className=\"font-serif text-xl font-bold text-foreground mb-2\"\n            initial={{ opacity: 0, x: -20 }}\n            whileInView={{ opacity: 1, x: 0 }}\n            transition={{ delay: 0.3 + index * 0.1 }}\n            viewport={{ once: true }}\n            data-testid={`text-member-name-${member.id}`}\n          >\n            {member.name}\n          </motion.h3>\n\n          {member.description && (\n            <motion.p\n              className=\"text-sm text-muted-foreground leading-relaxed line-clamp-3\"\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              transition={{ delay: 0.4 + index * 0.1 }}\n              viewport={{ once: true }}\n            >\n              {member.description}\n            </motion.p>\n          )}\n\n          {/* Decorative Element */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-primary/0 via-primary to-primary/0 transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500\" />\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":6600},"client/src/components/Registry.tsx":{"content":"import { QrCode, Heart, Sparkles, CreditCard, Building2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport type { Settings } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Registry() {\n  const { data: settings, isLoading, isError } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const hasBankInfo = settings?.brideQrCodeUrl || settings?.groomQrCodeUrl || \n                      settings?.brideBankInfo || settings?.groomBankInfo;\n\n  return (\n    <section id=\"registry\" className=\"py-20 md:py-32 px-4 bg-card relative overflow-hidden\" data-testid=\"section-registry\">\n      {/* Background Decorations */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {[...Array(8)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute text-primary/10\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -30, 0],\n              rotate: [0, 180, 360],\n              scale: [0.8, 1.2, 0.8],\n            }}\n            transition={{\n              duration: 8 + Math.random() * 4,\n              delay: i * 0.5,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          >\n            <QrCode size={40} />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n        >\n          <motion.h2\n            className=\"font-serif text-4xl md:text-5xl mb-4 text-foreground\"\n            data-testid=\"heading-registry\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Mừng Cưới\n          </motion.h2>\n          <motion.div\n            className=\"w-24 h-1 bg-primary mx-auto mb-4\"\n            initial={{ width: 0 }}\n            whileInView={{ width: \"6rem\" }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n          />\n          <motion.p\n            className=\"text-muted-foreground text-lg max-w-2xl mx-auto leading-relaxed\"\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            Sự hiện diện của bạn trong đám cưới là món quà lớn nhất. \n            Tuy nhiên, nếu bạn muốn gửi lời chúc mừng, đây là thông tin chuyển khoản của chúng tôi.\n          </motion.p>\n        </motion.div>\n\n        {/* Bank Transfer Information */}\n        {isLoading ? (\n          <motion.div\n            className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {[...Array(2)].map((_, i) => (\n              <motion.div key={i} variants={itemVariants}>\n                <Card className=\"animate-pulse rounded-2xl\">\n                  <CardContent className=\"p-8 space-y-4\">\n                    <div className=\"w-full aspect-square bg-muted rounded-lg mx-auto\" />\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-3/4\" />\n                      <div className=\"h-4 bg-muted rounded w-1/2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </motion.div>\n        ) : isError || !hasBankInfo ? (\n          <motion.div\n            className=\"text-center py-16\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              animate={{ \n                scale: [1, 1.2, 1],\n              }}\n              transition={{ duration: 3, repeat: Infinity }}\n            >\n              <QrCode className=\"mx-auto mb-4 text-muted-foreground\" size={64} />\n            </motion.div>\n            <p className=\"text-muted-foreground text-lg\">\n              Thông tin chuyển khoản sẽ sớm được cập nhật!\n            </p>\n          </motion.div>\n        ) : (\n          <motion.div\n            className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            {/* Bride's Bank Transfer */}\n            {(settings.brideQrCodeUrl || settings.brideBankInfo) && (\n              <motion.div variants={itemVariants}>\n                <Card className=\"bg-gradient-to-br from-pink-50 to-white dark:from-pink-950/20 dark:to-background border-pink-200 dark:border-pink-800 rounded-2xl shadow-xl hover:shadow-2xl transition-shadow duration-300 overflow-hidden\">\n                  <CardContent className=\"p-8\">\n                    {/* Header */}\n                    <motion.div\n                      className=\"text-center mb-6\"\n                      initial={{ opacity: 0 }}\n                      whileInView={{ opacity: 1 }}\n                      transition={{ delay: 0.2 }}\n                    >\n                      <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-pink-100 dark:bg-pink-900/30 mb-4\">\n                        <Heart className=\"text-pink-500\" size={32} />\n                      </div>\n                      <h3 className=\"font-serif text-2xl text-pink-600 dark:text-pink-400 mb-2\" data-testid=\"heading-bride-bank\">\n                        Mừng Cưới Cô Dâu\n                      </h3>\n                    </motion.div>\n\n                    {/* QR Code */}\n                    {settings.brideQrCodeUrl && (\n                      <motion.div\n                        className=\"mb-6\"\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        whileInView={{ opacity: 1, scale: 1 }}\n                        transition={{ type: \"spring\", stiffness: 200, delay: 0.3 }}\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"bg-white dark:bg-gray-900 p-4 rounded-xl border-2 border-pink-200 dark:border-pink-800 shadow-md\">\n                          <img\n                            src={settings.brideQrCodeUrl}\n                            alt=\"Mã QR Chuyển Khoản Cô Dâu\"\n                            className=\"w-full max-w-sm mx-auto rounded-lg\"\n                            data-testid=\"img-bride-qr\"\n                          />\n                        </div>\n                      </motion.div>\n                    )}\n\n                    {/* Bank Information */}\n                    {settings.brideBankInfo && (\n                      <motion.div\n                        className=\"bg-white dark:bg-gray-900 p-6 rounded-xl border border-pink-200 dark:border-pink-800\"\n                        initial={{ opacity: 0, y: 20 }}\n                        whileInView={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.4 }}\n                      >\n                        <div className=\"flex items-start gap-3 mb-3\">\n                          <Building2 className=\"text-pink-500 mt-1 flex-shrink-0\" size={20} />\n                          <h4 className=\"font-medium text-foreground\">Thông Tin Tài Khoản:</h4>\n                        </div>\n                        <div className=\"pl-8\">\n                          <pre className=\"whitespace-pre-wrap text-sm text-muted-foreground font-mono leading-relaxed\" data-testid=\"text-bride-bank-info\">\n                            {settings.brideBankInfo}\n                          </pre>\n                        </div>\n                      </motion.div>\n                    )}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n\n            {/* Groom's Bank Transfer */}\n            {(settings.groomQrCodeUrl || settings.groomBankInfo) && (\n              <motion.div variants={itemVariants}>\n                <Card className=\"bg-gradient-to-br from-blue-50 to-white dark:from-blue-950/20 dark:to-background border-blue-200 dark:border-blue-800 rounded-2xl shadow-xl hover:shadow-2xl transition-shadow duration-300 overflow-hidden\">\n                  <CardContent className=\"p-8\">\n                    {/* Header */}\n                    <motion.div\n                      className=\"text-center mb-6\"\n                      initial={{ opacity: 0 }}\n                      whileInView={{ opacity: 1 }}\n                      transition={{ delay: 0.2 }}\n                    >\n                      <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-full bg-blue-100 dark:bg-blue-900/30 mb-4\">\n                        <CreditCard className=\"text-blue-500\" size={32} />\n                      </div>\n                      <h3 className=\"font-serif text-2xl text-blue-600 dark:text-blue-400 mb-2\" data-testid=\"heading-groom-bank\">\n                        Mừng Cưới Chú Rể\n                      </h3>\n                    </motion.div>\n\n                    {/* QR Code */}\n                    {settings.groomQrCodeUrl && (\n                      <motion.div\n                        className=\"mb-6\"\n                        initial={{ opacity: 0, scale: 0.8 }}\n                        whileInView={{ opacity: 1, scale: 1 }}\n                        transition={{ type: \"spring\", stiffness: 200, delay: 0.3 }}\n                        whileHover={{ scale: 1.05 }}\n                      >\n                        <div className=\"bg-white dark:bg-gray-900 p-4 rounded-xl border-2 border-blue-200 dark:border-blue-800 shadow-md\">\n                          <img\n                            src={settings.groomQrCodeUrl}\n                            alt=\"Mã QR Chuyển Khoản Chú Rể\"\n                            className=\"w-full max-w-sm mx-auto rounded-lg\"\n                            data-testid=\"img-groom-qr\"\n                          />\n                        </div>\n                      </motion.div>\n                    )}\n\n                    {/* Bank Information */}\n                    {settings.groomBankInfo && (\n                      <motion.div\n                        className=\"bg-white dark:bg-gray-900 p-6 rounded-xl border border-blue-200 dark:border-blue-800\"\n                        initial={{ opacity: 0, y: 20 }}\n                        whileInView={{ opacity: 1, y: 0 }}\n                        transition={{ delay: 0.4 }}\n                      >\n                        <div className=\"flex items-start gap-3 mb-3\">\n                          <Building2 className=\"text-blue-500 mt-1 flex-shrink-0\" size={20} />\n                          <h4 className=\"font-medium text-foreground\">Thông Tin Tài Khoản:</h4>\n                        </div>\n                        <div className=\"pl-8\">\n                          <pre className=\"whitespace-pre-wrap text-sm text-muted-foreground font-mono leading-relaxed\" data-testid=\"text-groom-bank-info\">\n                            {settings.groomBankInfo}\n                          </pre>\n                        </div>\n                      </motion.div>\n                    )}\n                  </CardContent>\n                </Card>\n              </motion.div>\n            )}\n          </motion.div>\n        )}\n\n        {/* Thank You Note */}\n        <motion.div\n          className=\"mt-16 text-center\"\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8, delay: 0.6 }}\n          viewport={{ once: true }}\n        >\n          <motion.div\n            className=\"bg-primary/5 rounded-2xl p-8 border border-primary/20 max-w-3xl mx-auto relative overflow-hidden\"\n            whileHover={{ scale: 1.02 }}\n            transition={{ type: \"spring\", stiffness: 300 }}\n          >\n            {/* Background Sparkles */}\n            <div className=\"absolute inset-0 pointer-events-none\">\n              {[...Array(3)].map((_, i) => (\n                <motion.div\n                  key={i}\n                  className=\"absolute text-primary/20\"\n                  style={{\n                    left: `${20 + i * 30}%`,\n                    top: `${20 + i * 20}%`,\n                  }}\n                  animate={{\n                    rotate: [0, 180, 360],\n                    scale: [0.8, 1.2, 0.8],\n                  }}\n                  transition={{\n                    duration: 4 + i * 2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\"\n                  }}\n                >\n                  <Sparkles size={24} />\n                </motion.div>\n              ))}\n            </div>\n\n            <motion.div\n              className=\"relative z-10\"\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              transition={{ delay: 0.8 }}\n            >\n              <motion.div\n                animate={{\n                  scale: [1, 1.1, 1],\n                  rotate: [0, 5, -5, 0]\n                }}\n                transition={{\n                  duration: 3,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                <Heart className=\"mx-auto mb-4 text-primary\" size={48} />\n              </motion.div>\n              <motion.p\n                className=\"text-lg text-foreground italic leading-relaxed mb-4\"\n                initial={{ opacity: 0 }}\n                whileInView={{ opacity: 1 }}\n                transition={{ delay: 1 }}\n                data-testid=\"text-thank-you\"\n              >\n                \"Tình yêu, tiếng cười và sự hiện diện của bạn trong ngày cưới của chúng tôi là món quà lớn nhất. Cảm ơn bạn đã là một phần trong hành trình của chúng tôi!\"\n              </motion.p>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":14670},"scripts/restore_backup.ts":{"content":"\nimport * as dotenv from 'dotenv';\ndotenv.config();\n\nimport { pool } from '../server/db';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nasync function restoreBackup() {\n  const client = await pool.connect();\n  \n  try {\n    console.log('📦 Starting database restore...');\n    \n    const backupPath = path.join(process.cwd(), 'database_backup.sql');\n    \n    if (!fs.existsSync(backupPath)) {\n      throw new Error(`Backup file not found: ${backupPath}`);\n    }\n    \n    const backupSQL = fs.readFileSync(backupPath, 'utf8');\n    \n    // Split SQL commands by semicolon and newline\n    const commands = backupSQL\n      .split('\\n')\n      .filter(line => !line.startsWith('--') && line.trim() !== '');\n    \n    let currentCommand = '';\n    \n    for (const line of commands) {\n      currentCommand += line + '\\n';\n      \n      if (line.trim().endsWith(';')) {\n        try {\n          await client.query(currentCommand);\n        } catch (error: any) {\n          // Ignore errors for SET statements and comments\n          if (!currentCommand.includes('SET ') && !currentCommand.includes('TRUNCATE')) {\n            console.log(`Executing: ${currentCommand.substring(0, 50)}...`);\n          }\n        }\n        currentCommand = '';\n      }\n    }\n    \n    console.log('✅ Database restore completed successfully!');\n    \n    // Verify data\n    const tables = [\n      'couple_info',\n      'schedule_events', \n      'photos',\n      'guest_messages',\n      'rsvps',\n      'registry_items',\n      'settings'\n    ];\n    \n    console.log('\\n📊 Verifying restored data:');\n    for (const table of tables) {\n      const result = await client.query(`SELECT COUNT(*) FROM ${table}`);\n      console.log(`  ${table}: ${result.rows[0].count} rows`);\n    }\n    \n  } catch (error) {\n    console.error('❌ Error restoring backup:', error);\n    throw error;\n  } finally {\n    client.release();\n    await pool.end();\n  }\n}\n\nrestoreBackup().catch(console.error);\n","size_bytes":1952},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        cursive: [\"var(--font-cursive)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"fade-in-up\": {\n          from: { opacity: \"0\", transform: \"translateY(20px)\" },\n          to: { opacity: \"1\", transform: \"translateY(0)\" },\n        },\n        \"fade-in\": {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        \"scale-in\": {\n          from: { opacity: \"0\", transform: \"scale(0.9)\" },\n          to: { opacity: \"1\", transform: \"scale(1)\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0)\" },\n          \"50%\": { transform: \"translateY(-20px)\" },\n        },\n        \"heart-float\": {\n          \"0%\": { transform: \"translateY(0) translateX(0)\", opacity: \"0.8\" },\n          \"100%\": { transform: \"translateY(-100vh) translateX(20px)\", opacity: \"0\" },\n        },\n        \"spin-slow\": {\n          from: { transform: \"rotate(0deg)\" },\n          to: { transform: \"rotate(360deg)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in-up\": \"fade-in-up 0.6s ease-out\",\n        \"fade-in\": \"fade-in 0.4s ease-out\",\n        \"scale-in\": \"scale-in 0.4s ease-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"heart-float\": \"heart-float 15s linear infinite\",\n        \"spin-slow\": \"spin-slow 3s linear infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5263},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/RSVP.tsx":{"content":"import { useState } from \"react\";\nimport { Calendar, Mail, Phone, Users, Utensils, Heart, Clock, MapPin, CheckCircle, XCircle, AlertCircle, User, Send, Sparkles, Video } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { MotionButton } from \"@/components/ui/motion-button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { CoupleInfo, Settings, LivestreamInfo } from \"@shared/schema\";\n\nexport default function RSVP() {\n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n  \n  const { data: settings } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const { data: livestream } = useQuery<LivestreamInfo>({\n    queryKey: [\"/api/livestream\"],\n  });\n  const [formData, setFormData] = useState({\n    guestName: \"\",\n    email: \"\",\n    phone: \"\",\n    attending: true,\n    guestCount: 1,\n    mealPreference: \"\",\n    specialRequirements: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const createRsvpMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"POST\", \"/api/rsvps\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Đã Nhận Xác Nhận!\",\n        description: \"Cảm ơn phản hồi của bạn. Chúng tôi rất mong được ăn mừng cùng bạn!\",\n      });\n      setFormData({\n        guestName: \"\",\n        email: \"\",\n        phone: \"\",\n        attending: true,\n        guestCount: 1,\n        mealPreference: \"\",\n        specialRequirements: \"\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Lỗi\",\n        description: \"Không thể gửi xác nhận. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.guestName || !formData.email) {\n      toast({\n        title: \"Thiếu thông tin\",\n        description: \"Vui lòng điền tất cả các trường bắt buộc\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createRsvpMutation.mutate(formData);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const formVariants = {\n    hidden: { opacity: 0, x: -50 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const sidebarVariants = {\n    hidden: { opacity: 0, x: 50 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: {\n        duration: 0.8,\n        delay: 0.2,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <section id=\"rsvp\" className=\"py-20 md:py-32 px-4 bg-card relative overflow-hidden\">\n      {/* Background Decorations */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {[...Array(6)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute text-primary/10\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -40, 0],\n              rotate: [0, 180, 360],\n              scale: [0.8, 1.2, 0.8],\n            }}\n            transition={{\n              duration: 8 + Math.random() * 4,\n              delay: i * 0.5,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          >\n            <Heart size={40} />\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"max-w-5xl mx-auto relative z-10\">\n        {/* Header */}\n        <motion.div\n          className=\"text-center mb-16\"\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n        >\n          <motion.h2\n            className=\"font-serif text-4xl md:text-5xl mb-4 text-foreground\"\n            data-testid=\"heading-rsvp\"\n            initial={{ opacity: 0, scale: 0.9 }}\n            whileInView={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n          >\n            Xác Nhận Tham Dự\n          </motion.h2>\n          <motion.div\n            className=\"w-24 h-1 bg-primary mx-auto mb-4\"\n            initial={{ width: 0 }}\n            whileInView={{ width: \"6rem\" }}\n            transition={{ duration: 0.8, delay: 0.4 }}\n          />\n          <motion.p\n            className=\"text-muted-foreground text-lg\"\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.6 }}\n          >\n            Vui lòng phản hồi trước ngày <span className=\"text-primary font-semibold\">\n              {coupleInfo?.weddingDate \n                ? (() => {\n                    const deadline = new Date(coupleInfo.weddingDate);\n                    deadline.setDate(deadline.getDate() - 7);\n                    return deadline.toLocaleDateString('vi-VN', { \n                      day: 'numeric', \n                      month: 'long', \n                      year: 'numeric' \n                    });\n                  })()\n                : \"01 Tháng 5, 2025\"}\n            </span>\n          </motion.p>\n        </motion.div>\n\n        <div className=\"grid lg:grid-cols-5 gap-8\">\n          {/* Form */}\n          <motion.div\n            className=\"lg:col-span-3\"\n            variants={formVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            <motion.div\n              className=\"bg-background rounded-2xl p-6 md:p-8 border border-border shadow-2xl backdrop-blur-sm relative overflow-hidden\"\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              {/* Background Gradient */}\n              <div className=\"absolute top-0 right-0 w-32 h-32 bg-primary/5 rounded-full -translate-y-16 translate-x-16\" />\n              \n              <motion.form\n                onSubmit={handleSubmit}\n                className=\"space-y-6 relative z-10\"\n                variants={containerVariants}\n                initial=\"hidden\"\n                whileInView=\"visible\"\n                viewport={{ once: true }}\n              >\n                {/* Name */}\n                <motion.div variants={itemVariants}>\n                  <Label htmlFor=\"name\" className=\"text-foreground mb-3 block text-lg font-medium flex items-center gap-2\">\n                    <User size={18} />\n                    Họ Và Tên *\n                  </Label>\n                  <Input\n                    id=\"name\"\n                    type=\"text\"\n                    placeholder=\"Nguyễn Văn A\"\n                    className=\"rounded-xl h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                    required\n                    value={formData.guestName}\n                    onChange={(e) => setFormData({ ...formData, guestName: e.target.value })}\n                    data-testid=\"input-rsvp-name\"\n                    disabled={createRsvpMutation.isPending}\n                  />\n                </motion.div>\n\n                {/* Email */}\n                <motion.div variants={itemVariants}>\n                  <Label htmlFor=\"email\" className=\"text-foreground mb-3 block text-lg font-medium flex items-center gap-2\">\n                    <Mail size={18} />\n                    Email *\n                  </Label>\n                  <div className=\"relative\">\n                    <Mail\n                      className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\"\n                      size={20}\n                    />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      placeholder=\"nguyen@example.com\"\n                      className=\"pl-12 rounded-xl h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                      required\n                      value={formData.email}\n                      onChange={(e) => setFormData({ ...formData, email: e.target.value })}\n                      data-testid=\"input-rsvp-email\"\n                      disabled={createRsvpMutation.isPending}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Phone */}\n                <motion.div variants={itemVariants}>\n                  <Label htmlFor=\"phone\" className=\"text-foreground mb-3 block text-lg font-medium flex items-center gap-2\">\n                    <Phone size={18} />\n                    Số Điện Thoại\n                  </Label>\n                  <div className=\"relative\">\n                    <Phone\n                      className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\"\n                      size={20}\n                    />\n                    <Input\n                      id=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"+84 (xxx) xxx-xxxx\"\n                      className=\"pl-12 rounded-xl h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                      value={formData.phone}\n                      onChange={(e) => setFormData({ ...formData, phone: e.target.value })}\n                      data-testid=\"input-rsvp-phone\"\n                      disabled={createRsvpMutation.isPending}\n                    />\n                  </div>\n                </motion.div>\n\n                {/* Attending */}\n                <motion.div variants={itemVariants}>\n                  <Label className=\"text-foreground mb-4 block text-lg font-medium flex items-center gap-2\">\n                    <Heart size={18} />\n                    Bạn có tham dự không? *\n                  </Label>\n                  <RadioGroup\n                    value={formData.attending ? \"yes\" : \"no\"}\n                    onValueChange={(value) => setFormData({ ...formData, attending: value === \"yes\" })}\n                    className=\"flex gap-6\"\n                    data-testid=\"radio-attending\"\n                    disabled={createRsvpMutation.isPending}\n                  >\n                    <motion.div \n                      className=\"flex items-center space-x-3\"\n                      whileHover={{ scale: 1.05 }}\n                    >\n                      <RadioGroupItem value=\"yes\" id=\"yes\" className=\"w-5 h-5\" />\n                      <Label htmlFor=\"yes\" className=\"cursor-pointer text-lg font-medium flex items-center gap-2\">\n                        <CheckCircle size={18} />\n                        Có, tôi sẽ đến\n                      </Label>\n                    </motion.div>\n                    <motion.div \n                      className=\"flex items-center space-x-3\"\n                      whileHover={{ scale: 1.05 }}\n                    >\n                      <RadioGroupItem value=\"no\" id=\"no\" className=\"w-5 h-5\" />\n                      <Label htmlFor=\"no\" className=\"cursor-pointer text-lg font-medium flex items-center gap-2\">\n                        <XCircle size={18} />\n                        Rất tiếc, tôi không thể đến\n                      </Label>\n                    </motion.div>\n                  </RadioGroup>\n                </motion.div>\n\n                <AnimatePresence mode=\"wait\">\n                  {formData.attending && (\n                    <motion.div\n                      key=\"attending-fields\"\n                      initial={{ opacity: 0, height: 0, overflow: \"hidden\" }}\n                      animate={{ opacity: 1, height: \"auto\", overflow: \"visible\" }}\n                      exit={{ opacity: 0, height: 0, overflow: \"hidden\" }}\n                      transition={{ duration: 0.4, ease: \"easeInOut\" }}\n                      className=\"space-y-6\"\n                    >\n                      {/* Guest Count */}\n                      <motion.div variants={itemVariants}>\n                        <Label className=\"text-foreground mb-4 block text-lg font-medium flex items-center gap-2\">\n                          <Users size={20} />\n                          Số Lượng Khách\n                        </Label>\n                        <div className=\"flex items-center gap-4 bg-muted/50 rounded-xl p-4\">\n                          <MotionButton\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"rounded-full w-12 h-12\"\n                            onClick={() => setFormData({ ...formData, guestCount: Math.max(1, formData.guestCount - 1) })}\n                            data-testid=\"button-decrease-guests\"\n                            disabled={createRsvpMutation.isPending}\n                            whileHover={{ scale: 1.1 }}\n                            whileTap={{ scale: 0.9 }}\n                          >\n                            -\n                          </MotionButton>\n                          <motion.span\n                            className=\"text-2xl font-bold w-16 text-center text-primary\"\n                            data-testid=\"text-guest-count\"\n                            key={formData.guestCount}\n                            initial={{ scale: 1.2 }}\n                            animate={{ scale: 1 }}\n                            transition={{ type: \"spring\", stiffness: 200 }}\n                          >\n                            {formData.guestCount}\n                          </motion.span>\n                          <MotionButton\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            className=\"rounded-full w-12 h-12\"\n                            onClick={() => setFormData({ ...formData, guestCount: Math.min(10, formData.guestCount + 1) })}\n                            data-testid=\"button-increase-guests\"\n                            disabled={createRsvpMutation.isPending}\n                            whileHover={{ scale: 1.1 }}\n                            whileTap={{ scale: 0.9 }}\n                          >\n                            +\n                          </MotionButton>\n                        </div>\n                      </motion.div>\n\n                      {/* Meal Preference */}\n                      <motion.div variants={itemVariants}>\n                        <Label htmlFor=\"meal\" className=\"text-foreground mb-3 block text-lg font-medium flex items-center gap-2\">\n                          <Utensils size={20} />\n                          Lựa Chọn Món Ăn\n                        </Label>\n                        <Select\n                          value={formData.mealPreference}\n                          onValueChange={(value) => setFormData({ ...formData, mealPreference: value })}\n                          disabled={createRsvpMutation.isPending}\n                        >\n                          <SelectTrigger\n                            id=\"meal\"\n                            className=\"rounded-xl h-12 text-lg border-2 focus:border-primary transition-all duration-300\"\n                            data-testid=\"select-meal\"\n                          >\n                            <SelectValue placeholder=\"Chọn món bạn thích\" />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"chicken\">Gà</SelectItem>\n                            <SelectItem value=\"beef\">Bò</SelectItem>\n                            <SelectItem value=\"fish\">Cá</SelectItem>\n                            <SelectItem value=\"vegetarian\">Chay</SelectItem>\n                            <SelectItem value=\"vegan\">Thuần Chay</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </motion.div>\n\n                      {/* Special Requirements */}\n                      <motion.div variants={itemVariants}>\n                        <Label htmlFor=\"special\" className=\"text-foreground mb-3 block text-lg font-medium flex items-center gap-2\">\n                          <Sparkles size={18} />\n                          Yêu Cầu Đặc Biệt\n                        </Label>\n                        <Textarea\n                          id=\"special\"\n                          placeholder=\"Hạn chế chế độ ăn, dị ứng, nhu cầu tiếp cận...\"\n                          rows={4}\n                          className=\"rounded-xl resize-none text-lg border-2 focus:border-primary transition-all duration-300\"\n                          value={formData.specialRequirements}\n                          onChange={(e) => setFormData({ ...formData, specialRequirements: e.target.value })}\n                          data-testid=\"input-special-requirements\"\n                          disabled={createRsvpMutation.isPending}\n                        />\n                      </motion.div>\n                    </motion.div>\n                  )}\n                </AnimatePresence>\n\n                <motion.div variants={itemVariants} className=\"space-y-3\">\n                  <MotionButton\n                    type=\"submit\"\n                    className=\"w-full rounded-xl h-14 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden group\"\n                    size=\"lg\"\n                    data-testid=\"button-submit-rsvp\"\n                    disabled={createRsvpMutation.isPending}\n                    whileHover={{ scale: 1.02 }}\n                    whileTap={{ scale: 0.98 }}\n                  >\n                    {/* Button Shine Effect */}\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000\" />\n                    \n                    <div className=\"flex items-center gap-3 relative z-10\">\n                      {createRsvpMutation.isPending ? (\n                        <>\n                          <motion.div\n                            animate={{ rotate: 360 }}\n                            transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                          >\n                            <Clock size={20} />\n                          </motion.div>\n                          Đang gửi...\n                        </>\n                      ) : (\n                        <>\n                          <Send size={20} />\n                          Gửi Xác Nhận\n                        </>\n                      )}\n                    </div>\n                  </MotionButton>\n\n                  {livestream?.isActive && livestream?.streamUrl && (\n                    <MotionButton\n                      type=\"button\"\n                      variant=\"outline\"\n                      className=\"w-full rounded-xl h-14 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 relative overflow-hidden group border-2 border-red-500 hover:bg-red-50 dark:hover:bg-red-950/20\"\n                      size=\"lg\"\n                      data-testid=\"button-watch-livestream\"\n                      onClick={() => {\n                        const livestreamSection = document.getElementById('livestream');\n                        if (livestreamSection) {\n                          livestreamSection.scrollIntoView({ behavior: 'smooth' });\n                        }\n                      }}\n                      whileHover={{ scale: 1.02 }}\n                      whileTap={{ scale: 0.98 }}\n                    >\n                      <div className=\"flex items-center gap-3 relative z-10 text-red-600 dark:text-red-400\">\n                        <Video size={20} />\n                        🔴 Xem Livestream\n                      </div>\n                    </MotionButton>\n                  )}\n                </motion.div>\n              </motion.form>\n            </motion.div>\n          </motion.div>\n\n          {/* Event Details Sidebar */}\n          <motion.div\n            className=\"lg:col-span-2\"\n            variants={sidebarVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true }}\n          >\n            <motion.div\n              className=\"bg-primary/5 rounded-2xl p-6 md:p-8 border border-primary/20 backdrop-blur-sm sticky top-4\"\n              whileHover={{ y: -5 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <motion.h3\n                className=\"font-serif text-2xl mb-6 text-foreground flex items-center gap-2\"\n                initial={{ opacity: 0 }}\n                whileInView={{ opacity: 1 }}\n                transition={{ delay: 0.4 }}\n              >\n                <Heart className=\"text-primary\" size={24} fill=\"currentColor\" />\n                Thông Tin Sự Kiện\n              </motion.h3>\n              \n              <motion.div\n                className=\"space-y-6\"\n                variants={containerVariants}\n                initial=\"hidden\"\n                whileInView=\"visible\"\n                viewport={{ once: true }}\n              >\n                <motion.div variants={itemVariants} className=\"flex items-start gap-3\">\n                  <Calendar className=\"text-primary mt-1 flex-shrink-0\" size={20} />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Ngày</p>\n                    <p className=\"text-foreground font-medium text-lg\">\n                      {coupleInfo?.weddingDate \n                        ? new Date(coupleInfo.weddingDate).toLocaleDateString('vi-VN', { \n                            day: 'numeric', \n                            month: 'long', \n                            year: 'numeric' \n                          })\n                        : \"15 Tháng 6, 2025\"}\n                    </p>\n                  </div>\n                </motion.div>\n\n                <motion.div variants={itemVariants} className=\"flex items-start gap-3\">\n                  <Clock className=\"text-primary mt-1 flex-shrink-0\" size={20} />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Thời Gian</p>\n                    <p className=\"text-foreground font-medium text-lg\">\n                      {settings?.eventStartTime && settings?.eventEndTime\n                        ? (() => {\n                            const startTime = new Date(settings.eventStartTime);\n                            const endTime = new Date(settings.eventEndTime);\n                            const startTimeStr = startTime.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });\n                            const endTimeStr = endTime.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });\n                            return `${startTimeStr} - ${endTimeStr}`;\n                          })()\n                        : \"3:00 Chiều - 10:00 Tối\"}\n                    </p>\n                  </div>\n                </motion.div>\n\n                <motion.div variants={itemVariants} className=\"flex items-start gap-3\">\n                  <MapPin className=\"text-primary mt-1 flex-shrink-0\" size={20} />\n                  <div>\n                    <p className=\"text-sm text-muted-foreground mb-1\">Địa Điểm</p>\n                    <p className=\"text-foreground font-medium text-lg\">\n                      {settings?.venueName || \"Rose Garden Estate\"}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground mt-1 leading-relaxed\">\n                      {settings?.venueAddress || \"123 Garden Lane, Spring Valley, CA 91977\"}\n                    </p>\n                  </div>\n                </motion.div>\n\n                <motion.div variants={itemVariants}>\n                  <p className=\"text-sm text-muted-foreground mb-2\">👔 Trang Phục</p>\n                  <p className=\"text-foreground font-medium text-lg\">\n                    Trang Trọng / Vest Đen Tùy Chọn\n                  </p>\n                </motion.div>\n\n                {/* Countdown Note */}\n                <motion.div\n                  className=\"bg-primary/10 rounded-xl p-4 border border-primary/20 mt-6\"\n                  variants={itemVariants}\n                >\n                  <p className=\"text-sm text-foreground font-medium text-center\">\n                    ⏰ Vui lòng phản hồi trước ngày{' '}\n                    {coupleInfo?.weddingDate \n                      ? (() => {\n                          const deadline = new Date(coupleInfo.weddingDate);\n                          deadline.setDate(deadline.getDate() - 7);\n                          return deadline.toLocaleDateString('vi-VN', { \n                            day: '2-digit', \n                            month: '2-digit', \n                            year: 'numeric' \n                          });\n                        })()\n                      : \"01/05/2025\"}\n                  </p>\n                </motion.div>\n              </motion.div>\n            </motion.div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":25932},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle, Home, ArrowLeft, Heart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion } from \"framer-motion\";\nimport { Link } from \"wouter\";\n\nexport default function NotFound() {\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const floatingVariants = {\n    float: {\n      y: [0, -20, 0],\n      transition: {\n        duration: 3,\n        repeat: Infinity,\n        ease: \"easeInOut\"\n      }\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-primary/10 relative overflow-hidden\">\n      {/* Background Decorations */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Floating Hearts */}\n        {[...Array(6)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute text-primary/20\"\n            style={{\n              left: `${10 + i * 15}%`,\n              top: `${20 + Math.random() * 60}%`,\n            }}\n            variants={floatingVariants}\n            animate=\"float\"\n            transition={{\n              duration: 4 + i,\n              delay: i * 0.5,\n            }}\n          >\n            <Heart size={40} />\n          </motion.div>\n        ))}\n\n        {/* Gradient Orbs */}\n        <motion.div\n          className=\"absolute top-1/3 -left-20 w-96 h-96 rounded-full bg-gradient-to-r from-primary/10 to-primary/5 blur-3xl\"\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.3, 0.5, 0.3],\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n        <motion.div\n          className=\"absolute bottom-1/3 -right-20 w-96 h-96 rounded-full bg-gradient-to-l from-primary/10 to-primary/5 blur-3xl\"\n          animate={{\n            scale: [1.2, 1, 1.2],\n            opacity: [0.4, 0.6, 0.4],\n          }}\n          transition={{\n            duration: 10,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      </div>\n\n      <motion.div\n        className=\"w-full max-w-md mx-4\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <Card className=\"w-full border-2 border-border/50 shadow-2xl backdrop-blur-sm bg-card/80\">\n          <CardContent className=\"p-8\">\n            <motion.div\n              className=\"text-center mb-6\"\n              variants={itemVariants}\n            >\n              {/* Animated 404 Number */}\n              <motion.div\n                className=\"text-8xl font-bold mb-4 bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\"\n                initial={{ scale: 0, rotate: -180 }}\n                animate={{ scale: 1, rotate: 0 }}\n                transition={{\n                  type: \"spring\",\n                  stiffness: 200,\n                  damping: 15,\n                  delay: 0.2\n                }}\n              >\n                404\n              </motion.div>\n\n              {/* Icon and Title */}\n              <motion.div\n                className=\"flex items-center justify-center gap-3 mb-4\"\n                variants={itemVariants}\n              >\n                <motion.div\n                  animate={{\n                    scale: [1, 1.1, 1],\n                    rotate: [0, 5, -5, 0]\n                  }}\n                  transition={{\n                    duration: 2,\n                    repeat: Infinity,\n                    ease: \"easeInOut\"\n                  }}\n                >\n                  <AlertCircle className=\"h-12 w-12 text-destructive\" />\n                </motion.div>\n                <h1 className=\"text-3xl font-serif font-bold text-foreground\">\n                  Trang Không Tìm Thấy\n                </h1>\n              </motion.div>\n\n              {/* Description */}\n              <motion.p\n                className=\"text-lg text-muted-foreground mb-2 leading-relaxed\"\n                variants={itemVariants}\n              >\n                Rất tiếc! Trang bạn đang tìm kiếm không tồn tại hoặc đã được di chuyển.\n              </motion.p>\n              <motion.p\n                className=\"text-sm text-muted-foreground mb-8\"\n                variants={itemVariants}\n              >\n                Có thể bạn đã nhập sai địa chỉ hoặc trang đã bị xóa.\n              </motion.p>\n            </motion.div>\n\n            {/* Action Buttons */}\n            <motion.div\n              className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n              variants={itemVariants}\n            >\n              <Button\n                asChild\n                variant=\"outline\"\n                className=\"rounded-xl shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 transition-all duration-300\"\n              >\n                <Link href=\"/\">\n                  <ArrowLeft size={18} className=\"mr-2\" />\n                  Quay Lại\n                </Link>\n              </Button>\n              <Button\n                asChild\n                className=\"rounded-xl shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 transition-all duration-300 bg-primary hover:bg-primary/90\"\n              >\n                <Link href=\"/\">\n                  <Home size={18} className=\"mr-2\" />\n                  Về Trang Chủ\n                </Link>\n              </Button>\n            </motion.div>\n\n            {/* Additional Help */}\n            <motion.div\n              className=\"mt-8 p-4 bg-muted/50 rounded-xl border border-border/50\"\n              variants={itemVariants}\n            >\n              <p className=\"text-sm text-muted-foreground text-center\">\n                💡 Nếu bạn tin đây là lỗi, vui lòng liên hệ với quản trị viên.\n              </p>\n            </motion.div>\n\n            {/* Wedding Theme Touch */}\n            <motion.div\n              className=\"mt-6 text-center\"\n              variants={itemVariants}\n            >\n              <motion.div\n                className=\"inline-flex items-center gap-2 text-sm text-muted-foreground\"\n                animate={{\n                  scale: [1, 1.05, 1],\n                }}\n                transition={{\n                  duration: 3,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }}\n              >\n                <Heart size={16} className=\"text-primary\" fill=\"currentColor\" />\n                <span>Xuân Lâm & Xuân Lợi - 01.01.2026</span>\n                <Heart size={16} className=\"text-primary\" fill=\"currentColor\" />\n              </motion.div>\n            </motion.div>\n          </CardContent>\n        </Card>\n\n        {/* Decorative Elements */}\n        <motion.div\n          className=\"flex justify-center gap-2 mt-8\"\n          variants={containerVariants}\n        >\n          {[...Array(3)].map((_, i) => (\n            <motion.div\n              key={i}\n              className=\"w-2 h-2 bg-primary/30 rounded-full\"\n              animate={{\n                scale: [1, 1.5, 1],\n                opacity: [0.5, 1, 0.5],\n              }}\n              transition={{\n                duration: 1.5,\n                repeat: Infinity,\n                delay: i * 0.3,\n              }}\n            />\n          ))}\n        </motion.div>\n      </motion.div>\n    </div>\n  );\n}","size_bytes":7738},"client/src/pages/AdminSchedule.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Calendar, Plus, Trash2, Pencil, Clock, MapPin, Search, Filter, Users, Music, Utensils, Heart } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ScheduleEvent, InsertScheduleEvent } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst iconOptions = [\n  { value: \"heart\", label: \"💖 Heart\", icon: Heart },\n  { value: \"calendar\", label: \"📅 Calendar\", icon: Calendar },\n  { value: \"clock\", label: \"⏰ Clock\", icon: Clock },\n  { value: \"map-pin\", label: \"📍 Map Pin\", icon: MapPin },\n  { value: \"users\", label: \"👥 Users\", icon: Users },\n  { value: \"music\", label: \"🎵 Music\", icon: Music },\n  { value: \"utensils\", label: \"🍽️ Utensils\", icon: Utensils },\n];\n\nexport default function AdminSchedule() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<ScheduleEvent | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [timeFilter, setTimeFilter] = useState(\"all\");\n\n  const { data: events = [], isLoading } = useQuery<ScheduleEvent[]>({\n    queryKey: [\"/api/schedule\"],\n  });\n\n  // Filter events based on search and time\n  const filteredEvents = events.filter(event => {\n    const matchesSearch = event.title.toLowerCase().includes(searchTerm.toLowerCase()) || \n                         event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         event.location?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const eventTime = new Date(event.eventTime);\n    const now = new Date();\n    const isPast = eventTime < now;\n    const isUpcoming = eventTime >= now;\n    \n    const matchesTime = timeFilter === \"all\" || \n                       (timeFilter === \"past\" && isPast) ||\n                       (timeFilter === \"upcoming\" && isUpcoming);\n    \n    return matchesSearch && matchesTime;\n  });\n\n  // Sort events by time\n  const sortedEvents = [...filteredEvents].sort((a, b) => \n    new Date(a.eventTime).getTime() - new Date(b.eventTime).getTime()\n  );\n\n  const stats = {\n    total: events.length,\n    upcoming: events.filter(event => new Date(event.eventTime) >= new Date()).length,\n    past: events.filter(event => new Date(event.eventTime) < new Date()).length,\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertScheduleEvent) => {\n      return await apiRequest(\"POST\", \"/api/schedule\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule\"] });\n      toast({ \n        title: \"✅ Tạo sự kiện thành công\",\n        description: \"Sự kiện đã được thêm vào lịch trình\"\n      });\n      setIsDialogOpen(false);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tạo sự kiện lịch trình\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertScheduleEvent> }) => {\n      return await apiRequest(\"PATCH\", `/api/schedule/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule\"] });\n      toast({ \n        title: \"✅ Cập nhật sự kiện thành công\",\n        description: \"Thông tin sự kiện đã được cập nhật\"\n      });\n      setIsDialogOpen(false);\n      setEditingEvent(null);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật sự kiện lịch trình\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/schedule/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/schedule\"] });\n      toast({ \n        title: \"🗑️ Xóa sự kiện thành công\",\n        description: \"Sự kiện đã được xóa khỏi lịch trình\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa sự kiện lịch trình\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.currentTarget);\n    const data: InsertScheduleEvent = {\n      title: formData.get(\"title\") as string,\n      description: formData.get(\"description\") as string,\n      eventTime: new Date(formData.get(\"eventTime\") as string),\n      location: formData.get(\"location\") as string,\n      icon: formData.get(\"icon\") as string,\n      order: parseInt(formData.get(\"order\") as string) || 0,\n      duration: formData.get(\"duration\") as string,\n    };\n\n    if (editingEvent) {\n      updateMutation.mutate({ id: editingEvent.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -8,\n      scale: 1.02,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  const getEventStatus = (eventTime: Date) => {\n    const now = new Date();\n    const timeDiff = new Date(eventTime).getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 60 * 60);\n    \n    if (hoursDiff < 0) return { status: \"past\", label: \"Đã qua\", color: \"bg-gray-500/20 text-gray-600\" };\n    if (hoursDiff < 24) return { status: \"soon\", label: \"Sắp tới\", color: \"bg-orange-500/20 text-orange-600\" };\n    return { status: \"upcoming\", label: \"Sắp diễn ra\", color: \"bg-green-500/20 text-green-600\" };\n  };\n\n  const getIconComponent = (iconName: string) => {\n    const iconOption = iconOptions.find(opt => opt.value === iconName);\n    return iconOption ? iconOption.icon : Calendar;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Header */}\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div className=\"flex justify-between items-center mb-6\" variants={itemVariants}>\n          <div>\n            <h2 className=\"text-3xl font-serif mb-2 text-foreground\">📅 Sự Kiện Lịch Trình</h2>\n            <p className=\"text-muted-foreground text-lg\">Quản lý thời gian biểu đám cưới của bạn</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button \n                onClick={() => setEditingEvent(null)}\n                className=\"rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n              >\n                <Plus size={18} className=\"mr-2\" />\n                Thêm Sự Kiện\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center gap-2\">\n                  {editingEvent ? \"✏️ Chỉnh Sửa Sự Kiện\" : \"📅 Thêm Sự Kiện Mới\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"title\" className=\"text-sm font-medium\">Tiêu Đề Sự Kiện *</Label>\n                  <Input\n                    id=\"title\"\n                    name=\"title\"\n                    required\n                    placeholder=\"Lễ cưới chính thức\"\n                    defaultValue={editingEvent?.title}\n                    className=\"h-12 text-lg\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"description\" className=\"text-sm font-medium\">Mô Tả</Label>\n                  <Textarea\n                    id=\"description\"\n                    name=\"description\"\n                    rows={3}\n                    placeholder=\"Mô tả chi tiết về sự kiện...\"\n                    defaultValue={editingEvent?.description || \"\"}\n                    className=\"text-lg\"\n                  />\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"eventTime\" className=\"text-sm font-medium\">Thời Gian *</Label>\n                    <Input\n                      id=\"eventTime\"\n                      name=\"eventTime\"\n                      type=\"datetime-local\"\n                      required\n                      defaultValue={editingEvent?.eventTime ? new Date(editingEvent.eventTime).toISOString().slice(0, 16) : \"\"}\n                      className=\"h-12\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"duration\" className=\"text-sm font-medium\">Thời Lượng</Label>\n                    <Input\n                      id=\"duration\"\n                      name=\"duration\"\n                      placeholder=\"2 giờ\"\n                      defaultValue={editingEvent?.duration || \"\"}\n                      className=\"h-12\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"location\" className=\"text-sm font-medium\">Địa Điểm</Label>\n                    <Input\n                      id=\"location\"\n                      name=\"location\"\n                      placeholder=\"Nhà thờ chính tòa\"\n                      defaultValue={editingEvent?.location || \"\"}\n                      className=\"h-12\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"order\" className=\"text-sm font-medium\">Thứ Tự Hiển Thị</Label>\n                    <Input\n                      id=\"order\"\n                      name=\"order\"\n                      type=\"number\"\n                      min=\"0\"\n                      defaultValue={editingEvent?.order || 0}\n                      className=\"h-12\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"icon\" className=\"text-sm font-medium\">Biểu Tượng</Label>\n                  <Select name=\"icon\" defaultValue={editingEvent?.icon || \"calendar\"}>\n                    <SelectTrigger className=\"h-12\">\n                      <SelectValue placeholder=\"Chọn biểu tượng\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {iconOptions.map((option) => {\n                        const IconComponent = option.icon;\n                        return (\n                          <SelectItem key={option.value} value={option.value}>\n                            <div className=\"flex items-center gap-2\">\n                              <IconComponent size={16} />\n                              {option.label}\n                            </div>\n                          </SelectItem>\n                        );\n                      })}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                    className=\"rounded-lg\"\n                  >\n                    Hủy\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    className=\"rounded-lg shadow-lg\"\n                    disabled={createMutation.isPending || updateMutation.isPending}\n                  >\n                    {editingEvent ? \"💾 Cập Nhật\" : \"📤 Tạo\"} Sự Kiện\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </motion.div>\n\n        {/* Stats */}\n        <motion.div className=\"grid grid-cols-3 gap-4 mb-6\" variants={itemVariants}>\n          <Card className=\"bg-blue-500/5 border-blue-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-blue-500\">{stats.total}</p>\n              <p className=\"text-sm text-muted-foreground\">Tổng sự kiện</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-green-500/5 border-green-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-green-500\">{stats.upcoming}</p>\n              <p className=\"text-sm text-muted-foreground\">Sắp diễn ra</p>\n            </CardContent>\n          </Card>\n          <Card className=\"bg-orange-500/5 border-orange-500/20\">\n            <CardContent className=\"p-4 text-center\">\n              <p className=\"text-2xl font-bold text-orange-500\">{stats.past}</p>\n              <p className=\"text-sm text-muted-foreground\">Đã qua</p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Search and Filter */}\n        <motion.div className=\"flex flex-col sm:flex-row gap-4 mb-6\" variants={itemVariants}>\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\" size={18} />\n            <Input\n              placeholder=\"🔍 Tìm kiếm sự kiện theo tiêu đề, mô tả hoặc địa điểm...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 rounded-xl\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <Select value={timeFilter} onValueChange={setTimeFilter}>\n              <SelectTrigger className=\"w-40 rounded-xl\">\n                <Filter size={16} className=\"mr-2\" />\n                <SelectValue placeholder=\"Tất cả thời gian\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">⏰ Tất cả</SelectItem>\n                <SelectItem value=\"upcoming\">🟢 Sắp tới</SelectItem>\n                <SelectItem value=\"past\">🔴 Đã qua</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      {/* Events List */}\n      {isLoading ? (\n        <motion.div\n          className=\"grid gap-4\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          {[...Array(4)].map((_, i) => (\n            <motion.div key={i} variants={itemVariants}>\n              <Card className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-6 bg-muted rounded w-1/3\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-4 bg-muted rounded w-2/3\" />\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </motion.div>\n      ) : (\n        <motion.div\n          className=\"grid gap-4\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <AnimatePresence>\n            {sortedEvents.length === 0 ? (\n              <motion.div\n                initial={{ opacity: 0, scale: 0.8 }}\n                animate={{ opacity: 1, scale: 1 }}\n                transition={{ duration: 0.6 }}\n              >\n                <Card className=\"border-dashed\">\n                  <CardContent className=\"py-16 text-center text-muted-foreground\">\n                    <Calendar size={64} className=\"mx-auto mb-4 opacity-50\" />\n                    <p className=\"text-lg mb-2\">Không tìm thấy sự kiện nào</p>\n                    <p>\n                      {searchTerm || timeFilter !== \"all\" \n                        ? \"Thử thay đổi bộ lọc tìm kiếm\" \n                        : \"Chưa có sự kiện nào trong lịch trình\"\n                      }\n                    </p>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ) : (\n              sortedEvents.map((event, index) => {\n                const IconComponent = getIconComponent(event.icon || \"calendar\");\n                const status = getEventStatus(event.eventTime);\n                \n                return (\n                  <motion.div\n                    key={event.id}\n                    variants={cardVariants}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                    whileHover=\"hover\"\n                    exit=\"hidden\"\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <Card className=\"border-2 border-border/50 shadow-lg hover:shadow-xl transition-all duration-300 backdrop-blur-sm group\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex items-start gap-4 flex-1\">\n                            <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0 group-hover:bg-primary/20 transition-colors\">\n                              <IconComponent className=\"text-primary\" size={24} />\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <div className=\"flex items-center gap-3 mb-2\">\n                                <CardTitle className=\"text-xl text-foreground\">\n                                  {event.title}\n                                </CardTitle>\n                                <Badge className={status.color}>\n                                  {status.label}\n                                </Badge>\n                              </div>\n                              \n                              <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center gap-1\">\n                                  <Clock size={14} />\n                                  {new Date(event.eventTime).toLocaleString('vi-VN', {\n                                    weekday: 'long',\n                                    year: 'numeric',\n                                    month: 'long',\n                                    day: 'numeric',\n                                    hour: '2-digit',\n                                    minute: '2-digit'\n                                  })}\n                                </div>\n                                {event.duration && (\n                                  <div className=\"flex items-center gap-1\">\n                                    <span>⏱️ {event.duration}</span>\n                                  </div>\n                                )}\n                                {event.location && (\n                                  <div className=\"flex items-center gap-1\">\n                                    <MapPin size={14} />\n                                    {event.location}\n                                  </div>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"rounded-full\"\n                              onClick={() => {\n                                setEditingEvent(event);\n                                setIsDialogOpen(true);\n                              }}\n                            >\n                              <Pencil size={14} />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"rounded-full border-destructive text-destructive hover:bg-destructive/10\"\n                              onClick={() => {\n                                if (confirm(`Bạn có chắc muốn xóa sự kiện \"${event.title}\"?`)) {\n                                  deleteMutation.mutate(event.id);\n                                }\n                              }}\n                            >\n                              <Trash2 size={14} />\n                            </Button>\n                          </div>\n                        </div>\n                      </CardHeader>\n                      \n                      <CardContent>\n                        {event.description && (\n                          <motion.p \n                            className=\"text-foreground leading-relaxed text-lg\"\n                            initial={{ opacity: 0 }}\n                            animate={{ opacity: 1 }}\n                            transition={{ delay: 0.2 }}\n                          >\n                            {event.description}\n                          </motion.p>\n                        )}\n                        \n                        <div className=\"flex justify-between items-center mt-3\">\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Thứ tự: {event.order}\n                          </Badge>\n                          \n                          {status.status === \"soon\" && (\n                            <Badge variant=\"default\" className=\"bg-orange-500 text-white animate-pulse\">\n                              ⚡ Sắp diễn ra!\n                            </Badge>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </motion.div>\n                );\n              })\n            )}\n          </AnimatePresence>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n}","size_bytes":24137},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/Footer.tsx":{"content":"import { Heart, Instagram, Facebook, Twitter } from \"lucide-react\";\nimport { motion } from \"framer-motion\";\nimport { useInView } from \"react-intersection-observer\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { CoupleInfo, Settings } from \"@shared/schema\";\n\nexport default function Footer() {\n  const [ref, inView] = useInView({\n    triggerOnce: true,\n    threshold: 0.1,\n  });\n\n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  const { data: settings } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n        delayChildren: 0.3\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const socialLinks = [\n    { icon: Instagram, href: settings?.instagramUrl || \"#\", label: \"Instagram\", show: !!settings?.instagramUrl },\n    { icon: Facebook, href: settings?.facebookUrl || \"#\", label: \"Facebook\", show: !!settings?.facebookUrl },\n    { icon: Twitter, href: settings?.twitterUrl || \"#\", label: \"Twitter\", show: !!settings?.twitterUrl }\n  ].filter(link => link.show);\n\n  const coupleNames = coupleInfo \n    ? `${coupleInfo.brideName.split(' ').pop()} & ${coupleInfo.groomName.split(' ').pop()}`\n    : \"Cô Dâu & Chú Rể\";\n\n  const footerText = settings?.footerText || \"Cùng chia sẻ câu chuyện tình yêu của chúng tôi\";\n  const hashtag = settings?.hashtag || `#${coupleNames.replace(/\\s+/g, '')}2025`;\n\n  return (\n    <motion.footer\n      ref={ref}\n      initial=\"hidden\"\n      animate={inView ? \"visible\" : \"hidden\"}\n      className=\"bg-card border-t border-card-border py-16 px-4 overflow-hidden relative\"\n    >\n      {/* Background Decorative Elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <motion.div\n          className=\"absolute -bottom-10 -left-10 w-32 h-32 rounded-full bg-primary/5\"\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.3, 0.5, 0.3],\n          }}\n          transition={{\n            duration: 8,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n          }}\n        />\n        <motion.div\n          className=\"absolute -top-10 -right-10 w-24 h-24 rounded-full bg-primary/10\"\n          animate={{\n            scale: [1, 1.3, 1],\n            opacity: [0.2, 0.4, 0.2],\n          }}\n          transition={{\n            duration: 6,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n            delay: 2,\n          }}\n        />\n      </div>\n\n      <div className=\"max-w-7xl mx-auto relative z-10\">\n        <motion.div\n          variants={containerVariants}\n          className=\"flex flex-col items-center justify-center gap-8\"\n        >\n          {/* Brand Section - Centered */}\n          <motion.div\n            variants={itemVariants}\n            className=\"text-center\"\n          >\n            <motion.div\n              className=\"flex items-center gap-3 justify-center mb-6\"\n              whileHover={{ scale: 1.05 }}\n              transition={{ type: \"spring\", stiffness: 300 }}\n            >\n              <motion.div\n                animate={{\n                  scale: [1, 1.2, 1],\n                  rotate: [0, 10, -10, 0],\n                }}\n                transition={{\n                  duration: 4,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                }}\n              >\n                <Heart className=\"text-primary\" size={28} fill=\"currentColor\" />\n              </motion.div>\n              <span className=\"font-cursive text-3xl text-primary bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\">\n                {coupleNames}\n              </span>\n            </motion.div>\n            <motion.p\n              className=\"text-muted-foreground text-lg leading-relaxed max-w-2xl\"\n              whileHover={{ scale: 1.02 }}\n            >\n              {footerText}\n            </motion.p>\n          </motion.div>\n\n          {/* Social & Hashtag */}\n          {socialLinks.length > 0 && (\n            <motion.div\n              variants={itemVariants}\n              className=\"text-center\"\n            >\n              <motion.div\n                className=\"flex gap-4 justify-center mb-4\"\n                variants={containerVariants}\n              >\n                {socialLinks.map((social, idx) => (\n                  <motion.a\n                    key={idx}\n                    href={social.href}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"social-icon\"\n                    data-testid={`link-${social.label.toLowerCase()}`}\n                    variants={itemVariants}\n                    whileHover={{ \n                      scale: 1.2,\n                      rotate: 360,\n                      backgroundColor: \"hsl(var(--primary))\",\n                      color: \"white\"\n                    }}\n                    whileTap={{ scale: 0.9 }}\n                    transition={{ type: \"spring\", stiffness: 400 }}\n                  >\n                    <social.icon size={20} />\n                  </motion.a>\n                ))}\n              </motion.div>\n              <motion.p\n                className=\"text-muted-foreground text-lg font-medium bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent\"\n                animate={{\n                  backgroundPosition: ['0%', '100%', '0%'],\n                }}\n                transition={{\n                  duration: 3,\n                  repeat: Infinity,\n                  ease: \"easeInOut\",\n                }}\n                style={{\n                  backgroundSize: '200% 100%',\n                }}\n              >\n                {hashtag}\n              </motion.p>\n            </motion.div>\n          )}\n        </motion.div>\n\n        {/* Copyright */}\n        <motion.div\n          className=\"text-center pt-12 border-t border-card-border mt-12\"\n          initial={{ opacity: 0, y: 20 }}\n          animate={inView ? { opacity: 1, y: 0 } : {}}\n          transition={{ delay: 0.8, duration: 0.6 }}\n        >\n          <motion.p\n            className=\"text-muted-foreground text-base flex items-center justify-center gap-2\"\n            whileHover={{ scale: 1.02 }}\n          >\n            © 2025 {coupleNames}. Được tạo với{\" \"}\n            <motion.span\n              animate={{\n                scale: [1, 1.3, 1],\n              }}\n              transition={{\n                duration: 2,\n                repeat: Infinity,\n                ease: \"easeInOut\",\n              }}\n            >\n              <Heart\n                size={16}\n                className=\"inline text-primary\"\n                fill=\"currentColor\"\n              />\n            </motion.span>{\" \"}\n            cho ngày đặc biệt của chúng tôi\n          </motion.p>\n          \n          {/* Floating Hearts */}\n          <div className=\"flex justify-center gap-1 mt-4\">\n            {[1, 2, 3, 4, 5].map((i) => (\n              <motion.div\n                key={i}\n                animate={{\n                  y: [0, -10, 0],\n                  opacity: [0.5, 1, 0.5],\n                }}\n                transition={{\n                  duration: 2,\n                  repeat: Infinity,\n                  delay: i * 0.2,\n                  ease: \"easeInOut\",\n                }}\n              >\n                <Heart\n                  size={12}\n                  className=\"text-primary/60\"\n                  fill=\"currentColor\"\n                />\n              </motion.div>\n            ))}\n          </div>\n        </motion.div>\n      </div>\n    </motion.footer>\n  );\n}\n","size_bytes":7888},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/AdminSettings.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Save, Settings as SettingsIcon, Music, MapPin, Palette, Bell, Shield, Eye, Upload, Image, Trash2, Power, Heart, Instagram } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Settings, Popup, MusicTrack } from \"@shared/schema\";\nimport { insertSettingsSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { motion } from \"framer-motion\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { FontPreview } from \"@/components/FontPreview\";\n\n// Helper function to extract embed URL from iframe HTML or convert regular Google Maps URLs\nconst convertToGoogleMapsEmbed = (input: string): string => {\n  if (!input) return input;\n  \n  // Check if input is an iframe HTML tag\n  if (input.trim().startsWith('<iframe')) {\n    // Extract the src attribute from the iframe\n    const srcMatch = input.match(/src=[\"']([^\"']+)[\"']/);\n    if (srcMatch && srcMatch[1]) {\n      return srcMatch[1];\n    }\n  }\n  \n  // If already an embed URL, return as is\n  if (input.includes('/maps/embed')) {\n    return input;\n  }\n  \n  // For other Google Maps URLs, return as is\n  return input;\n};\n\nexport default function AdminSettings() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [uploadingAudio, setUploadingAudio] = useState(false);\n  const [uploadingVenueImage, setUploadingVenueImage] = useState(false);\n  const audioFileInputRef = useRef<HTMLInputElement>(null);\n  const venueImageInputRef = useRef<HTMLInputElement>(null);\n  const songNameDebounceRef = useRef<Record<string, NodeJS.Timeout>>({});\n\n  const { data: settings, isLoading } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const { data: popups = [] } = useQuery<Popup[]>({\n    queryKey: [\"/api/popups\"],\n  });\n\n  const { data: musicTracks = [] } = useQuery<MusicTrack[]>({\n    queryKey: [\"/api/music-tracks\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertSettingsSchema),\n    defaultValues: {\n      venueName: \"\",\n      venueAddress: \"\",\n      venueMapLink: \"\",\n      venueImage: \"\",\n      venuePhone: \"\",\n      venueEmail: \"\",\n      eventStartTime: undefined as Date | undefined,\n      eventEndTime: undefined as Date | undefined,\n      backgroundMusicUrl: \"\",\n      backgroundMusicType: \"upload\",\n      backgroundMusicUrls: [] as string[],\n      backgroundMusicNames: [] as string[],\n      footerText: \"\",\n      facebookUrl: \"\",\n      instagramUrl: \"\",\n      twitterUrl: \"\",\n      hashtag: \"\",\n      fontHeading: \"\",\n      fontBody: \"\",\n      fontCursive: \"\",\n      fontSerif: \"\",\n    },\n  });\n\n  const toLocalDatetimeString = (date: Date | string | null | undefined): string | undefined => {\n    if (!date) return undefined;\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const day = String(d.getDate()).padStart(2, '0');\n    const hours = String(d.getHours()).padStart(2, '0');\n    const minutes = String(d.getMinutes()).padStart(2, '0');\n    return `${year}-${month}-${day}T${hours}:${minutes}`;\n  };\n\n  useEffect(() => {\n    if (settings) {\n      form.reset({\n        venueName: settings.venueName || \"\",\n        venueAddress: settings.venueAddress || \"\",\n        venueMapLink: settings.venueMapLink || \"\",\n        venueImage: settings.venueImage || \"\",\n        venuePhone: settings.venuePhone || \"\",\n        venueEmail: settings.venueEmail || \"\",\n        eventStartTime: toLocalDatetimeString(settings.eventStartTime) as any,\n        eventEndTime: toLocalDatetimeString(settings.eventEndTime) as any,\n        backgroundMusicUrl: settings.backgroundMusicUrl || \"\",\n        backgroundMusicType: settings.backgroundMusicType || \"upload\",\n        backgroundMusicUrls: settings.backgroundMusicUrls || [],\n        backgroundMusicNames: settings.backgroundMusicNames || [],\n        footerText: settings.footerText || \"\",\n        facebookUrl: settings.facebookUrl || \"\",\n        instagramUrl: settings.instagramUrl || \"\",\n        twitterUrl: settings.twitterUrl || \"\",\n        hashtag: settings.hashtag || \"\",\n        fontHeading: settings.fontHeading || \"\",\n        fontBody: settings.fontBody || \"\",\n        fontCursive: settings.fontCursive || \"\",\n        fontSerif: settings.fontSerif || \"\",\n      });\n    }\n  }, [settings, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: typeof insertSettingsSchema._type) => {\n      const processedData = {\n        ...data,\n        eventStartTime: data.eventStartTime ? new Date(data.eventStartTime) : undefined,\n        eventEndTime: data.eventEndTime ? new Date(data.eventEndTime) : undefined,\n      };\n      return await apiRequest(\"POST\", \"/api/settings\", processedData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({ \n        title: \"✅ Cài đặt đã được lưu\",\n        description: \"Thay đổi của bạn đã được cập nhật thành công\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể lưu cài đặt\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = form.handleSubmit((data) => {\n    updateMutation.mutate(data);\n  });\n\n  // Music Track Mutations\n  const createMusicTrackMutation = useMutation({\n    mutationFn: async (trackData: { title: string; filename: string; displayOrder: number }) => {\n      return await apiRequest(\"POST\", \"/api/music-tracks\", trackData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/music-tracks\"] });\n      toast({\n        title: \"✅ Thành công!\",\n        description: \"Đã thêm bài hát vào playlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tạo bài hát\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMusicTrackMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<{ title: string; displayOrder: number; isActive: boolean }> }) => {\n      return await apiRequest(\"PATCH\", `/api/music-tracks/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/music-tracks\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật bài hát\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMusicTrackMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/music-tracks/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/music-tracks\"] });\n      toast({\n        title: \"✅ Đã xóa\",\n        description: \"Đã xóa bài hát khỏi playlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa bài hát\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAudioFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('audio/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file âm thanh (MP3, WAV, etc.)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadingAudio(true);\n\n    try {\n      const audioUrl = await uploadImageToCloudinary(file);\n      \n      // Extract filename as default title\n      const getSongName = (filename: string) => {\n        try {\n          const nameWithoutExt = filename.replace(/\\.[^/.]+$/, '');\n          return nameWithoutExt || `Bài hát ${musicTracks.length + 1}`;\n        } catch {\n          return `Bài hát ${musicTracks.length + 1}`;\n        }\n      };\n      \n      const title = getSongName(file.name);\n      const filename = audioUrl;\n      const displayOrder = musicTracks.length;\n      \n      await createMusicTrackMutation.mutateAsync({ title, filename, displayOrder });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên file nhạc\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingAudio(false);\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const handleRemoveSong = async (trackId: string) => {\n    await deleteMusicTrackMutation.mutateAsync(trackId);\n  };\n  \n  const handleSongNameChange = (trackId: string, newTitle: string) => {\n    if (songNameDebounceRef.current[trackId]) {\n      clearTimeout(songNameDebounceRef.current[trackId]);\n    }\n    \n    songNameDebounceRef.current[trackId] = setTimeout(async () => {\n      try {\n        await updateMusicTrackMutation.mutateAsync({\n          id: trackId,\n          data: { title: newTitle },\n        });\n        toast({\n          title: \"✅ Đã lưu\",\n          description: \"Tên bài hát đã được cập nhật\",\n        });\n      } catch (error) {\n        console.error(\"Failed to save song name:\", error);\n      }\n    }, 1000);\n  };\n\n  const handleVenueImageSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file ảnh (JPG, PNG, etc.)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadingVenueImage(true);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file);\n      form.setValue('venueImage', imageUrl);\n      \n      toast({\n        title: \"✅ Thành công!\",\n        description: \"Đã tải lên ảnh địa điểm thành công\",\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh địa điểm\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingVenueImage(false);\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const tabs = [\n    { id: \"general\", label: \"Địa Điểm\", icon: SettingsIcon, color: \"text-blue-500\", bgColor: \"bg-blue-50 dark:bg-blue-950/30\" },\n    { id: \"fonts\", label: \"Font Chữ\", icon: Palette, color: \"text-purple-500\", bgColor: \"bg-purple-50 dark:bg-purple-950/30\" },\n    { id: \"footer\", label: \"Chân Trang\", icon: Heart, color: \"text-pink-500\", bgColor: \"bg-pink-50 dark:bg-pink-950/30\" },\n    { id: \"popups\", label: \"Popup Thiệp\", icon: Image, color: \"text-orange-500\", bgColor: \"bg-orange-50 dark:bg-orange-950/30\" },\n    { id: \"features\", label: \"Âm thanh\", icon: Music, color: \"text-green-500\", bgColor: \"bg-green-50 dark:bg-green-950/30\" },\n    { id: \"security\", label: \"Bảo Mật\", icon: Shield, color: \"text-gray-500\", bgColor: \"bg-gray-50 dark:bg-gray-950/30\" },\n  ];\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n        className=\"admin-page\"\n      >\n        <div className=\"mb-8\">\n          <h2 className=\"admin-heading mb-2 text-foreground\">⚙️ Cài Đặt Website</h2>\n          <p className=\"text-muted-foreground\">Cấu hình trang web đám cưới của bạn</p>\n        </div>\n        <Card className=\"animate-pulse\">\n          <CardHeader>\n            <div className=\"h-6 bg-muted rounded w-1/4\" />\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-10 bg-muted rounded\" />\n            ))}\n          </CardContent>\n        </Card>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"admin-page\"\n    >\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div variants={itemVariants} className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"admin-heading mb-2 text-foreground flex items-center gap-3\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-primary/70 rounded-2xl flex items-center justify-center shadow-lg\">\n                <SettingsIcon size={24} className=\"text-white\" />\n              </div>\n              Cài Đặt Website\n            </h2>\n            <p className=\"text-muted-foreground text-base\">Tùy chỉnh và cấu hình trang web đám cưới của bạn</p>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      <div className=\"grid lg:grid-cols-5 gap-6\">\n        <motion.div variants={itemVariants} className=\"lg:col-span-1\">\n          <Card className=\"sticky top-6 shadow-lg border-2\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-lg\">Danh Mục</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-3\">\n              <nav className=\"space-y-1.5\">\n                {tabs.map((tab) => {\n                  const IconComponent = tab.icon;\n                  const isActive = activeTab === tab.id;\n                  return (\n                    <motion.button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id)}\n                      whileHover={{ scale: 1.02, x: 4 }}\n                      whileTap={{ scale: 0.98 }}\n                      className={`w-full flex items-center gap-3 px-3.5 py-3 rounded-xl text-left transition-all duration-300 border-2 ${\n                        isActive\n                          ? `${tab.bgColor} border-${tab.color.split('-')[1]}-300 shadow-md`\n                          : \"border-transparent hover:bg-muted/50 hover:border-border\"\n                      }`}\n                      data-testid={`tab-${tab.id}`}\n                    >\n                      <div className={`p-1.5 rounded-lg ${isActive ? 'bg-white/80 dark:bg-black/20' : 'bg-transparent'}`}>\n                        <IconComponent size={18} className={tab.color} />\n                      </div>\n                      <span className={`font-medium text-sm ${isActive ? 'text-foreground' : 'text-muted-foreground'}`}>\n                        {tab.label}\n                      </span>\n                      {isActive && (\n                        <motion.div\n                          layoutId=\"activeTab\"\n                          className=\"ml-auto w-2 h-2 bg-primary rounded-full\"\n                          transition={{ type: \"spring\", stiffness: 380, damping: 30 }}\n                        />\n                      )}\n                    </motion.button>\n                  );\n                })}\n              </nav>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div \n          className=\"lg:col-span-4\"\n          variants={containerVariants}\n          initial=\"hidden\"\n          animate=\"visible\"\n        >\n          <Form {...form}>\n            <form onSubmit={onSubmit}>\n            <AnimatedTabContent activeTab={activeTab}>\n              {activeTab === \"general\" && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"bg-gradient-to-r from-blue-500/5 to-blue-500/10 border-b\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <MapPin className=\"text-blue-500\" size={20} />\n                        Thông Tin Địa Điểm\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4 pt-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"venueName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Tên Địa Điểm *</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Khách sạn Grand Ballroom\"\n                                className=\"h-12 text-lg\"\n                                data-testid=\"input-venue-name\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"venueAddress\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Địa Chỉ Địa Điểm *</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"123 Đường Cưới, Quận 1, Thành phố Hồ Chí Minh\"\n                                className=\"h-12 text-lg\"\n                                data-testid=\"input-venue-address\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"venueMapLink\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">Link Google Maps (Nhúng iframe)</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder='Dán toàn bộ iframe code hoặc chỉ link embed'\n                                className=\"h-12\"\n                                data-testid=\"input-venue-map-link\"\n                                value={field.value || \"\"}\n                                onChange={(e) => {\n                                  const processedValue = convertToGoogleMapsEmbed(e.target.value);\n                                  field.onChange(processedValue);\n                                }}\n                                onBlur={field.onBlur}\n                              />\n                            </FormControl>\n                            <div className=\"text-xs text-muted-foreground space-y-1 bg-muted/50 p-3 rounded-lg\">\n                              <p className=\"font-medium text-foreground\">📍 Cách nhúng Google Maps:</p>\n                              <ol className=\"list-decimal list-inside space-y-1 ml-2\">\n                                <li>Vào <a href=\"https://www.google.com/maps\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-primary hover:underline\">Google Maps</a></li>\n                                <li>Tìm kiếm địa điểm của bạn</li>\n                                <li>Nhấn nút \"Chia sẻ\" (Share)</li>\n                                <li>Chọn tab \"Nhúng bản đồ\" (Embed a map)</li>\n                                <li><strong className=\"text-foreground\">Nhấn \"Sao chép HTML\" và dán TOÀN BỘ đoạn code vào đây</strong></li>\n                                <li className=\"text-xs text-green-600\">✅ Hệ thống sẽ tự động trích xuất link embed từ iframe</li>\n                              </ol>\n                              <div className=\"mt-2 p-2 bg-primary/5 rounded border border-primary/20\">\n                                <p className=\"text-xs font-medium text-foreground mb-1\">Ví dụ: Bạn có thể dán:</p>\n                                <code className=\"text-[10px] block bg-background p-1 rounded overflow-x-auto\">\n                                  {'<iframe src=\"https://www.google.com/maps/embed?pb=...\" width=\"600\" height=\"450\"></iframe>'}\n                                </code>\n                              </div>\n                            </div>\n                            \n                            {/* Google Maps Preview */}\n                            {field.value && field.value.includes('google.com/maps') && (\n                              <div className=\"mt-4\">\n                                <p className=\"text-sm font-medium mb-2 flex items-center gap-2\">\n                                  <Eye size={16} className=\"text-green-500\" />\n                                  Xem Trước Bản Đồ\n                                </p>\n                                <div className=\"w-full h-64 rounded-lg overflow-hidden border-2 border-border shadow-lg\">\n                                  <iframe\n                                    src={field.value}\n                                    width=\"100%\"\n                                    height=\"100%\"\n                                    style={{ border: 0 }}\n                                    allowFullScreen\n                                    loading=\"lazy\"\n                                    referrerPolicy=\"no-referrer-when-downgrade\"\n                                  />\n                                </div>\n                              </div>\n                            )}\n                            \n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"venueImage\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">🖼️ Ảnh Địa Điểm</FormLabel>\n                            <div className=\"space-y-3\">\n                              {field.value && (\n                                <div className=\"relative w-full max-w-md\">\n                                  <img\n                                    src={field.value}\n                                    alt=\"Venue\"\n                                    className=\"w-full h-48 object-cover rounded-lg border-2 border-border\"\n                                  />\n                                </div>\n                              )}\n                              <div className=\"flex gap-2\">\n                                <input\n                                  type=\"file\"\n                                  ref={venueImageInputRef}\n                                  onChange={handleVenueImageSelect}\n                                  accept=\"image/*\"\n                                  className=\"hidden\"\n                                />\n                                <Button \n                                  type=\"button\" \n                                  variant=\"outline\" \n                                  className=\"h-12 flex-1\"\n                                  onClick={() => venueImageInputRef.current?.click()}\n                                  disabled={uploadingVenueImage}\n                                  data-testid=\"button-upload-venue-image\"\n                                >\n                                  {uploadingVenueImage ? (\n                                    <motion.div\n                                      animate={{ rotate: 360 }}\n                                      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                                      className=\"mr-2\"\n                                    >\n                                      <Upload size={18} />\n                                    </motion.div>\n                                  ) : (\n                                    <Upload size={18} className=\"mr-2\" />\n                                  )}\n                                  {uploadingVenueImage ? \"Đang tải lên...\" : \"Tải Ảnh Lên\"}\n                                </Button>\n                              </div>\n                            </div>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Tải lên ảnh địa điểm để hiển thị tại trang chủ (tối đa 5MB)\n                            </p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"venuePhone\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">📞 Số Điện Thoại Liên Hệ</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"tel\"\n                                  placeholder=\"(84) 123-456-789\"\n                                  className=\"h-12\"\n                                  data-testid=\"input-venue-phone\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"venueEmail\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">📧 Email Liên Hệ</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"email\"\n                                  placeholder=\"contact@venue.com\"\n                                  className=\"h-12\"\n                                  data-testid=\"input-venue-email\"\n                                  {...field}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"eventStartTime\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">⏰ Thời Gian Bắt Đầu</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"datetime-local\"\n                                  className=\"h-12\"\n                                  data-testid=\"input-event-start-time\"\n                                  value={(typeof field.value === 'string' ? field.value : '') || \"\"}\n                                  onChange={(e) => field.onChange(e.target.value || undefined)}\n                                />\n                              </FormControl>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Thời gian bắt đầu sự kiện\n                              </p>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"eventEndTime\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel className=\"text-sm font-medium\">⏱️ Thời Gian Kết Thúc</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"datetime-local\"\n                                  className=\"h-12\"\n                                  data-testid=\"input-event-end-time\"\n                                  value={(typeof field.value === 'string' ? field.value : '') || \"\"}\n                                  onChange={(e) => field.onChange(e.target.value || undefined)}\n                                />\n                              </FormControl>\n                              <p className=\"text-xs text-muted-foreground\">\n                                Thời gian dự kiến kết thúc sự kiện\n                              </p>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"fonts\" && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"bg-gradient-to-r from-purple-500/5 to-purple-500/10 border-b\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Palette className=\"text-purple-500\" size={20} />\n                        Tùy Chỉnh Font Chữ\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6 pt-6\">\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                        <h4 className=\"text-sm font-semibold text-blue-900 mb-2\">ℹ️ Hướng Dẫn</h4>\n                        <p className=\"text-sm text-blue-800\">\n                          Chọn font chữ phù hợp với tiếng Việt để hiển thị đẹp và rõ ràng trên trang web của bạn.\n                          Tất cả các font đều hỗ trợ đầy đủ dấu tiếng Việt.\n                        </p>\n                      </div>\n\n                      <FormField\n                        control={form.control}\n                        name=\"fontHeading\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base font-semibold\">\n                              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-purple-500 to-purple-600 flex items-center justify-center text-white\">\n                                🎨\n                              </div>\n                              Font Tiêu Đề Chính\n                            </FormLabel>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 ml-10\">\n                              Hiển thị ở phần Hero (đầu trang), tên cặp đôi và các tiêu đề lớn\n                            </p>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-12 ml-10\" data-testid=\"select-font-heading\">\n                                  <SelectValue placeholder=\"Chọn font cho tiêu đề\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"Parisienne\">Parisienne (Cursive lãng mạn)</SelectItem>\n                                <SelectItem value=\"Alex Brush\">Alex Brush (Chữ viết tay)</SelectItem>\n                                <SelectItem value=\"Great Vibes\">Great Vibes (Thanh lịch)</SelectItem>\n                                <SelectItem value=\"Allura\">Allura (Sang trọng)</SelectItem>\n                                <SelectItem value=\"Satisfy\">Satisfy (Hiện đại)</SelectItem>\n                                <SelectItem value=\"Playfair Display\">Playfair Display (Cổ điển)</SelectItem>\n                                <SelectItem value=\"Cormorant Garamond\">Cormorant Garamond (Truyền thống)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {field.value && (\n                              <FontPreview \n                                fontFamily={field.value}\n                                previewType=\"heading\"\n                              />\n                            )}\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"fontBody\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base font-semibold\">\n                              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center text-white\">\n                                📝\n                              </div>\n                              Font Nội Dung Chính\n                            </FormLabel>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 ml-10\">\n                              Dùng cho tất cả đoạn văn, mô tả, thông tin sự kiện và nội dung chi tiết\n                            </p>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-12 ml-10\" data-testid=\"select-font-body\">\n                                  <SelectValue placeholder=\"Chọn font cho nội dung\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"Cormorant Garamond\">Cormorant Garamond (Dễ đọc)</SelectItem>\n                                <SelectItem value=\"Playfair Display\">Playfair Display (Thanh lịch)</SelectItem>\n                                <SelectItem value=\"Noto Serif\">Noto Serif (Tiêu chuẩn)</SelectItem>\n                                <SelectItem value=\"Georgia\">Georgia (Cổ điển)</SelectItem>\n                                <SelectItem value=\"Times New Roman\">Times New Roman (Truyền thống)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {field.value && (\n                              <FontPreview \n                                fontFamily={field.value}\n                                previewType=\"body\"\n                              />\n                            )}\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"fontCursive\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base font-semibold\">\n                              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-pink-500 to-pink-600 flex items-center justify-center text-white\">\n                                ✨\n                              </div>\n                              Font Chữ Nghệ Thuật\n                            </FormLabel>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 ml-10\">\n                              Chữ viết tay lãng mạn cho tên cô dâu/chú rể và lời mời đặc biệt\n                            </p>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-12 ml-10\" data-testid=\"select-font-cursive\">\n                                  <SelectValue placeholder=\"Chọn font chữ nghệ thuật\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"Dancing Script\">Dancing Script (Lãng mạn)</SelectItem>\n                                <SelectItem value=\"Yellowtail\">Yellowtail (Tinh tế)</SelectItem>\n                                <SelectItem value=\"Yesteryear\">Yesteryear (Cổ điển)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {field.value && (\n                              <FontPreview \n                                fontFamily={field.value}\n                                previewType=\"cursive\"\n                              />\n                            )}\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"fontSerif\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"flex items-center gap-2 text-base font-semibold\">\n                              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-green-500 to-green-600 flex items-center justify-center text-white\">\n                                📜\n                              </div>\n                              Font Serif Bổ Sung\n                            </FormLabel>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400 ml-10\">\n                              Dùng cho lời cảm ơn, thông tin quan trọng và tin nhắn đặc biệt\n                            </p>\n                            <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                              <FormControl>\n                                <SelectTrigger className=\"h-12 ml-10\" data-testid=\"select-font-serif\">\n                                  <SelectValue placeholder=\"Chọn font serif bổ sung\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"Cormorant Garamond\">Cormorant Garamond (Dễ đọc)</SelectItem>\n                                <SelectItem value=\"Playfair Display\">Playfair Display (Thanh lịch)</SelectItem>\n                                <SelectItem value=\"Noto Serif\">Noto Serif (Tiêu chuẩn)</SelectItem>\n                                <SelectItem value=\"Crimson Text\">Crimson Text (Sang trọng)</SelectItem>\n                                <SelectItem value=\"Lora\">Lora (Hiện đại)</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            {field.value && (\n                              <FontPreview \n                                fontFamily={field.value}\n                                previewType=\"serif\"\n                              />\n                            )}\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"footer\" && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"bg-gradient-to-r from-pink-500/5 to-pink-500/10 border-b\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Heart className=\"text-pink-500\" size={20} />\n                        Quản Lý Chân Trang\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6 pt-6\">\n                      <FormField\n                        control={form.control}\n                        name=\"footerText\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">💬 Thông Điệp Chân Trang</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Cùng chia sẻ câu chuyện tình yêu của chúng tôi\"\n                                className=\"h-12 text-lg\"\n                                data-testid=\"input-footer-text\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Tin nhắn sẽ hiển thị ở cuối trang\n                            </p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"hashtag\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel className=\"text-sm font-medium\">#️⃣ Hashtag Đám Cưới</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"#CôDâuChúRể2025\"\n                                className=\"h-12 text-lg\"\n                                data-testid=\"input-hashtag\"\n                                {...field}\n                              />\n                            </FormControl>\n                            <p className=\"text-xs text-muted-foreground\">\n                              Hashtag sẽ hiển thị ở chân trang\n                            </p>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <div className=\"border-t pt-6\">\n                        <h4 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n                          <Instagram className=\"text-pink-500\" size={18} />\n                          Liên Kết Mạng Xã Hội\n                        </h4>\n                        <div className=\"space-y-4\">\n                          <FormField\n                            control={form.control}\n                            name=\"facebookUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-sm font-medium\">Facebook URL</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"url\"\n                                    placeholder=\"https://facebook.com/your-page\"\n                                    className=\"h-12\"\n                                    data-testid=\"input-facebook-url\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Để trống nếu không muốn hiển thị icon Facebook\n                                </p>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"instagramUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-sm font-medium\">Instagram URL</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"url\"\n                                    placeholder=\"https://instagram.com/your-profile\"\n                                    className=\"h-12\"\n                                    data-testid=\"input-instagram-url\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Để trống nếu không muốn hiển thị icon Instagram\n                                </p>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name=\"twitterUrl\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel className=\"text-sm font-medium\">Twitter/X URL</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"url\"\n                                    placeholder=\"https://twitter.com/your-handle\"\n                                    className=\"h-12\"\n                                    data-testid=\"input-twitter-url\"\n                                    {...field}\n                                  />\n                                </FormControl>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  Để trống nếu không muốn hiển thị icon Twitter\n                                </p>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"popups\" && (\n                <div className=\"space-y-6\">\n                  <PopupManagement popups={popups} />\n                </div>\n              )}\n\n              {activeTab === \"features\" && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"bg-gradient-to-r from-orange-500/5 to-orange-500/10 border-b\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Music className=\"text-orange-500\" size={20} />\n                        Cài Đặt Âm Thanh\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4 pt-6\">\n                      <div>\n                        <FormLabel className=\"text-sm font-medium\">🎵 Playlist Nhạc Nền</FormLabel>\n                        <p className=\"text-xs text-muted-foreground mb-3\">\n                          Tải lên nhiều bài hát. Playlist sẽ tự động phát lại từ đầu khi hết.\n                        </p>\n                        \n                        {/* Upload Button */}\n                        <div className=\"flex gap-2 mb-4\">\n                          <input\n                            type=\"file\"\n                            ref={audioFileInputRef}\n                            onChange={handleAudioFileSelect}\n                            accept=\"audio/*\"\n                            className=\"hidden\"\n                          />\n                          <Button \n                            type=\"button\" \n                            variant=\"outline\" \n                            className=\"h-12 flex-1\"\n                            onClick={() => audioFileInputRef.current?.click()}\n                            disabled={uploadingAudio}\n                            data-testid=\"button-upload-audio\"\n                          >\n                            {uploadingAudio ? (\n                              <motion.div\n                                animate={{ rotate: 360 }}\n                                transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                                className=\"mr-2\"\n                              >\n                                <Upload size={18} />\n                              </motion.div>\n                            ) : (\n                              <Music size={18} className=\"mr-2\" />\n                            )}\n                            {uploadingAudio ? \"Đang tải lên...\" : \"Thêm Bài Hát\"}\n                          </Button>\n                        </div>\n\n                        {/* Playlist Display */}\n                        <div className=\"space-y-2\">\n                          {musicTracks.length === 0 ? (\n                            <div className=\"p-4 border border-dashed rounded-lg text-center text-muted-foreground\">\n                              <Music size={32} className=\"mx-auto mb-2 opacity-50\" />\n                              <p className=\"text-sm\">Chưa có bài hát nào</p>\n                              <p className=\"text-xs\">Nhấn \"Thêm Bài Hát\" để upload nhạc</p>\n                            </div>\n                          ) : (\n                            musicTracks.map((track, index) => (\n                              <div \n                                key={track.id}\n                                className=\"flex items-center gap-3 p-3 bg-muted rounded-lg group hover:bg-muted/70 transition-colors\"\n                              >\n                                <Music size={18} className=\"text-primary flex-shrink-0\" />\n                                <div className=\"flex-1 min-w-0\">\n                                  <input\n                                    type=\"text\"\n                                    defaultValue={track.title}\n                                    onChange={(e) => handleSongNameChange(track.id, e.target.value)}\n                                    className=\"text-sm font-medium bg-transparent border-none focus:outline-none focus:ring-2 focus:ring-primary/20 rounded px-2 py-1 w-full\"\n                                    placeholder=\"Tên bài hát\"\n                                    data-testid={`input-song-name-${track.id}`}\n                                  />\n                                  <p className=\"text-xs text-muted-foreground px-2\">\n                                    Track #{index + 1}\n                                  </p>\n                                </div>\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"icon\"\n                                  className=\"flex-shrink-0 h-8 w-8 opacity-0 group-hover:opacity-100 transition-opacity\"\n                                  onClick={() => handleRemoveSong(track.id)}\n                                  data-testid={`button-remove-song-${track.id}`}\n                                >\n                                  <Trash2 size={16} className=\"text-destructive\" />\n                                </Button>\n                              </div>\n                            ))\n                          )}\n                        </div>\n                        \n                        {musicTracks.length > 0 && (\n                          <p className=\"text-xs text-muted-foreground mt-2\">\n                            📊 Tổng: {musicTracks.length} bài hát trong playlist\n                          </p>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n\n              {activeTab === \"security\" && (\n                <div className=\"space-y-6\">\n                  <Card>\n                    <CardHeader className=\"bg-gradient-to-r from-red-500/5 to-red-500/10 border-b\">\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Shield className=\"text-red-500\" size={20} />\n                        Bảo Mật & Quyền Riêng Tư\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4 pt-6\">\n                      <div className=\"p-4 border rounded-lg bg-muted/50\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <Badge variant=\"default\">🔒 Bảo mật</Badge>\n                          <span className=\"text-sm font-medium\">Duyệt Tin Nhắn</span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Tất cả tin nhắn từ khách mời sẽ được kiểm duyệt trước khi hiển thị công khai\n                        </p>\n                      </div>\n\n                      <div className=\"p-4 border rounded-lg bg-muted/50\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <Badge variant=\"secondary\">👁️ Riêng tư</Badge>\n                          <span className=\"text-sm font-medium\">Thông Tin Liên Hệ</span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Thông tin liên hệ chỉ hiển thị cho khách mời đã xác nhận tham dự\n                        </p>\n                      </div>\n\n                      <div className=\"p-4 border rounded-lg bg-muted/50\">\n                        <div className=\"flex items-center gap-3 mb-2\">\n                          <Badge variant=\"outline\">📊 Phân tích</Badge>\n                          <span className=\"text-sm font-medium\">Theo Dõi Hiệu Suất</span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Hệ thống tự động theo dõi hiệu suất và bảo mật website 24/7\n                        </p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </AnimatedTabContent>\n\n            <motion.div \n              className=\"flex justify-end gap-4 mt-6 p-6 bg-card border rounded-lg sticky bottom-6 shadow-lg\"\n              variants={itemVariants}\n            >\n              <Button \n                type=\"button\" \n                variant=\"outline\"\n                className=\"rounded-lg\"\n                onClick={() => window.open('/', '_blank')}\n              >\n                <Eye size={16} className=\"mr-2\" />\n                Xem trước\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"rounded-lg shadow-lg min-w-32\"\n                disabled={updateMutation.isPending}\n              >\n                <Save size={16} className=\"mr-2\" />\n                {updateMutation.isPending ? \"💾 Đang lưu...\" : \"💾 Lưu Cài Đặt\"}\n              </Button>\n            </motion.div>\n          </form>\n          </Form>\n        </motion.div>\n      </div>\n    </motion.div>\n  );\n}\n\nfunction AnimatedTabContent({ children, activeTab }: { children: React.ReactNode; activeTab: string }) {\n  return (\n    <motion.div\n      key={activeTab}\n      initial={{ opacity: 0, x: 20 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: -20 }}\n      transition={{ duration: 0.3 }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n\nfunction PopupManagement({ popups }: { popups: Popup[] }) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadingPopup, setUploadingPopup] = useState<string | null>(null);\n  const welcomePopupRef = useRef<HTMLInputElement>(null);\n  const scrollEndPopupRef = useRef<HTMLInputElement>(null);\n\n  const welcomePopup = popups.find(p => p.type === 'welcome');\n  const scrollEndPopup = popups.find(p => p.type === 'scroll_end');\n\n  const createOrUpdatePopupMutation = useMutation({\n    mutationFn: async ({ type, imageUrl, isActive }: { type: string; imageUrl: string; isActive: boolean }) => {\n      const existingPopup = popups.find(p => p.type === type);\n      if (existingPopup) {\n        return await apiRequest(\"PATCH\", `/api/popups/${existingPopup.id}`, { imageUrl, isActive });\n      } else {\n        return await apiRequest(\"POST\", \"/api/popups\", { type, imageUrl, isActive });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/popups\"] });\n      toast({\n        title: \"✅ Thành công!\",\n        description: \"Popup đã được cập nhật\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật popup\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const togglePopupMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/popups/${id}`, { isActive });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/popups\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật trạng thái popup\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePopupImageUpload = async (type: 'welcome' | 'scroll_end', file: File) => {\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploadingPopup(type);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file);\n      await createOrUpdatePopupMutation.mutateAsync({ type, imageUrl, isActive: true });\n      toast({\n        title: \"✅ Thành công!\",\n        description: `Đã tải lên ảnh popup ${type === 'welcome' ? 'chào mừng' : 'cuối trang'}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh popup\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploadingPopup(null);\n    }\n  };\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"bg-gradient-to-r from-pink-500/5 to-pink-500/10 border-b\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Image className=\"text-pink-500\" size={20} />\n            Popup Chào Mừng (Khi Vào Trang)\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 pt-6\">\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <Power className={welcomePopup?.isActive ? \"text-green-500\" : \"text-muted-foreground\"} size={20} />\n              <div>\n                <p className=\"font-medium\">Hiển thị popup khi lần đầu truy cập</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Popup sẽ hiện sau 1 giây khi khách truy cập trang lần đầu\n                </p>\n              </div>\n            </div>\n            <Switch\n              checked={welcomePopup?.isActive || false}\n              onCheckedChange={(checked) => {\n                if (welcomePopup) {\n                  togglePopupMutation.mutate({ id: welcomePopup.id, isActive: checked });\n                }\n              }}\n              disabled={!welcomePopup}\n            />\n          </div>\n\n          {welcomePopup?.imageUrl && (\n            <div className=\"relative w-full max-w-md\">\n              <img\n                src={welcomePopup.imageUrl}\n                alt=\"Welcome Popup\"\n                className=\"w-full h-64 object-contain rounded-lg border-2 border-border bg-muted\"\n              />\n            </div>\n          )}\n\n          <div>\n            <input\n              type=\"file\"\n              ref={welcomePopupRef}\n              onChange={(e) => {\n                const file = e.target.files?.[0];\n                if (file) handlePopupImageUpload('welcome', file);\n              }}\n              accept=\"image/*\"\n              className=\"hidden\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full h-12\"\n              onClick={() => welcomePopupRef.current?.click()}\n              disabled={uploadingPopup === 'welcome'}\n            >\n              {uploadingPopup === 'welcome' ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"mr-2\"\n                >\n                  <Upload size={18} />\n                </motion.div>\n              ) : (\n                <Upload size={18} className=\"mr-2\" />\n              )}\n              {welcomePopup ? 'Thay Đổi Ảnh Popup' : 'Tải Ảnh Popup Lên'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardHeader className=\"bg-gradient-to-r from-purple-500/5 to-purple-500/10 border-b\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Image className=\"text-purple-500\" size={20} />\n            Popup Cuối Trang (Khi Lướt Xuống Cuối)\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4 pt-6\">\n          <div className=\"flex items-center justify-between p-4 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-3\">\n              <Power className={scrollEndPopup?.isActive ? \"text-green-500\" : \"text-muted-foreground\"} size={20} />\n              <div>\n                <p className=\"font-medium\">Hiển thị popup khi lướt đến cuối trang</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Popup sẽ hiện khi khách lướt đến gần cuối trang (95%)\n                </p>\n              </div>\n            </div>\n            <Switch\n              checked={scrollEndPopup?.isActive || false}\n              onCheckedChange={(checked) => {\n                if (scrollEndPopup) {\n                  togglePopupMutation.mutate({ id: scrollEndPopup.id, isActive: checked });\n                }\n              }}\n              disabled={!scrollEndPopup}\n            />\n          </div>\n\n          {scrollEndPopup?.imageUrl && (\n            <div className=\"relative w-full max-w-md\">\n              <img\n                src={scrollEndPopup.imageUrl}\n                alt=\"Scroll End Popup\"\n                className=\"w-full h-64 object-contain rounded-lg border-2 border-border bg-muted\"\n              />\n            </div>\n          )}\n\n          <div>\n            <input\n              type=\"file\"\n              ref={scrollEndPopupRef}\n              onChange={(e) => {\n                const file = e.target.files?.[0];\n                if (file) handlePopupImageUpload('scroll_end', file);\n              }}\n              accept=\"image/*\"\n              className=\"hidden\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"w-full h-12\"\n              onClick={() => scrollEndPopupRef.current?.click()}\n              disabled={uploadingPopup === 'scroll_end'}\n            >\n              {uploadingPopup === 'scroll_end' ? (\n                <motion.div\n                  animate={{ rotate: 360 }}\n                  transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                  className=\"mr-2\"\n                >\n                  <Upload size={18} />\n                </motion.div>\n              ) : (\n                <Upload size={18} className=\"mr-2\" />\n              )}\n              {scrollEndPopup ? 'Thay Đổi Ảnh Popup' : 'Tải Ảnh Popup Lên'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n","size_bytes":66052},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"scripts/upload_images.ts":{"content":"import { readFileSync, readdirSync, writeFileSync } from 'fs';\nimport { join, dirname } from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\ninterface ImageMapping {\n  folder: string;\n  files: string[];\n  category: string;\n}\n\nasync function convertImagesToBase64() {\n  const basePath = join(__dirname, '..', 'attached_assets', 'wedding_images');\n  \n  const imagesMappings: ImageMapping[] = [\n    { folder: 'album', files: readdirSync(join(basePath, 'album')), category: 'album' },\n    { folder: 'background', files: readdirSync(join(basePath, 'background')), category: 'background' },\n    { folder: 'avatar', files: readdirSync(join(basePath, 'avatar')), category: 'avatar' },\n    { folder: 'venue', files: readdirSync(join(basePath, 'venue')), category: 'venue' },\n    { folder: 'bridesmaids', files: readdirSync(join(basePath, 'bridesmaids')), category: 'bridesmaids' },\n    { folder: 'groomsmen', files: readdirSync(join(basePath, 'groomsmen')), category: 'groomsmen' },\n    { folder: 'qr', files: readdirSync(join(basePath, 'qr')), category: 'qr' },\n  ];\n\n  const results: Record<string, Record<string, string>> = {};\n\n  console.log('🚀 Bắt đầu convert ảnh thành base64 data URLs...\\n');\n\n  for (const mapping of imagesMappings) {\n    console.log(`📁 Đang xử lý folder: ${mapping.folder}`);\n    results[mapping.category] = {};\n\n    for (const filename of mapping.files) {\n      const filePath = join(basePath, mapping.folder, filename);\n      \n      try {\n        console.log(`  ⏳ Đang convert: ${filename}...`);\n        const file = readFileSync(filePath);\n        const extension = filename.toLowerCase().endsWith('.png') ? 'png' : 'jpeg';\n        const base64 = `data:image/${extension};base64,${file.toString('base64')}`;\n        \n        results[mapping.category][filename] = base64;\n        \n        console.log(`  ✅ Thành công: ${filename} (${(file.length / 1024).toFixed(2)} KB)`);\n      } catch (error) {\n        console.error(`  ❌ Lỗi convert ${filename}:`, error);\n      }\n    }\n    console.log('');\n  }\n\n  console.log('\\n📝 Lưu kết quả vào file image_data.json...\\n');\n  const outputPath = join(__dirname, 'image_data.json');\n  writeFileSync(outputPath, JSON.stringify(results, null, 2));\n  console.log(`✅ Hoàn thành! File đã được lưu tại ${outputPath}`);\n\n  return results;\n}\n\nconvertImagesToBase64().catch(console.error);\n","size_bytes":2477},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/app.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport path from \"path\";\nimport { registerRoutes } from \"./routes\";\nimport { log, serveStatic } from \"./vite\";\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\n\nexport async function createApp() {\n  const app = express();\n\n  // CORS configuration for Vercel deployment\n  app.use((req, res, next) => {\n    const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || ['http://localhost:5000'];\n    const origin = req.headers.origin;\n    \n    if (origin && allowedOrigins.includes(origin)) {\n      res.setHeader('Access-Control-Allow-Origin', origin);\n    }\n    \n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    \n    if (req.method === 'OPTIONS') {\n      return res.sendStatus(200);\n    }\n    \n    next();\n  });\n\n  app.use(express.json({\n    limit: '50mb',\n    verify: (req, _res, buf) => {\n      req.rawBody = buf;\n    }\n  }));\n\n  app.use(express.urlencoded({ extended: false, limit: '50mb' }));\n\n  // Serve static music files from wedding_music folder\n  app.use('/wedding_music', express.static(path.join(process.cwd(), 'attached_assets', 'wedding_music')));\n  \n  // Serve static image files from wedding_images folder\n  app.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\n\n  app.use((req, res, next) => {\n    const start = Date.now();\n    const path = req.path;\n    let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n    const originalResJson = res.json;\n    res.json = function (bodyJson, ...args) {\n      capturedJsonResponse = bodyJson;\n      return originalResJson.apply(res, [bodyJson, ...args]);\n    };\n\n    res.on(\"finish\", () => {\n      const duration = Date.now() - start;\n      if (path.startsWith(\"/api\")) {\n        let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n        if (capturedJsonResponse) {\n          logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n        }\n\n        if (logLine.length > 80) {\n          logLine = logLine.slice(0, 79) + \"…\";\n        }\n\n        log(logLine);\n      }\n    });\n\n    next();\n  });\n\n  await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    console.error('Error:', err);\n  });\n\n  // Serve static files in production\n  if (app.get(\"env\") !== \"development\") {\n    serveStatic(app);\n  }\n\n  return app;\n}\n","size_bytes":2764},"server/auth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.SESSION_SECRET) {\n  throw new Error(\"SESSION_SECRET environment variable is required\");\n}\n\nexport function getSession() {\n  if (!process.env.DATABASE_URL) {\n    throw new Error(\"DATABASE_URL is required for session storage - sessions will NOT work without it!\");\n  }\n\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  \n  // CRITICAL: Always use PostgreSQL store for serverless compatibility\n  // MemoryStore would lose sessions between serverless function invocations\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n\n  // Verify store is created successfully\n  if (!sessionStore) {\n    throw new Error(\"Failed to create PostgreSQL session store - sessions will NOT work!\");\n  }\n\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: process.env.NODE_ENV === \"production\" ? \"none\" : \"lax\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        const isValid = await bcrypt.compare(password, user.password);\n        if (!isValid) {\n          return done(null, false, { message: \"Invalid username or password\" });\n        }\n\n        return done(null, { id: user.id, username: user.username });\n      } catch (error) {\n        return done(error);\n      }\n    })\n  );\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user ? { id: user.id, username: user.username } : null);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Invalid credentials\" });\n      }\n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        return res.json({ message: \"Login successful\", user });\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.redirect(\"/?error=logout_failed\");\n      }\n      res.redirect(\"/\");\n    });\n  });\n\n  app.get(\"/api/auth/user\", isAuthenticated, async (req, res) => {\n    res.json(req.user);\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n\nexport async function hashPassword(password: string): Promise<string> {\n  const saltRounds = 10;\n  return bcrypt.hash(password, saltRounds);\n}\n","size_bytes":3989},"api/index.js":{"content":"// Vercel serverless function entry point\nlet app;\n\nexport default async function handler(req, res) {\n  if (!app) {\n    const { createApp } = await import('../dist/app.js');\n    app = await createApp();\n  }\n  return app(req, res);\n}\n","size_bytes":233},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table - Required for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table - For admin authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n// Couple information\nexport const coupleInfo = pgTable(\"couple_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  brideName: varchar(\"bride_name\").notNull(),\n  groomName: varchar(\"groom_name\").notNull(),\n  bridePhoto: text(\"bride_photo\"),\n  groomPhoto: text(\"groom_photo\"),\n  brideDescription: text(\"bride_description\"),\n  groomDescription: text(\"groom_description\"),\n  ourStory: text(\"our_story\"),\n  weddingDate: timestamp(\"wedding_date\").notNull(),\n  heroImage: text(\"hero_image\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertCoupleInfoSchema = createInsertSchema(coupleInfo).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  weddingDate: z.coerce.date(),\n});\n\nexport type InsertCoupleInfo = z.infer<typeof insertCoupleInfoSchema>;\nexport type CoupleInfo = typeof coupleInfo.$inferSelect;\n\n// Wedding schedule events\nexport const scheduleEvents = pgTable(\"schedule_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  eventTime: timestamp(\"event_time\").notNull(),\n  location: varchar(\"location\"),\n  icon: varchar(\"icon\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertScheduleEventSchema = createInsertSchema(scheduleEvents).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  eventTime: z.coerce.date(),\n});\n\nexport type InsertScheduleEvent = z.infer<typeof insertScheduleEventSchema>;\nexport type ScheduleEvent = typeof scheduleEvents.$inferSelect;\n\n// Photo gallery\nexport const photos = pgTable(\"photos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  url: text(\"url\").notNull(),\n  caption: text(\"caption\"),\n  category: varchar(\"category\").notNull().default(\"gallery\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPhotoSchema = createInsertSchema(photos).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertPhoto = z.infer<typeof insertPhotoSchema>;\nexport type Photo = typeof photos.$inferSelect;\n\n// Guest messages\nexport const guestMessages = pgTable(\"guest_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guestName: varchar(\"guest_name\").notNull(),\n  message: text(\"message\").notNull(),\n  approved: boolean(\"approved\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertGuestMessageSchema = createInsertSchema(guestMessages).omit({\n  id: true,\n  createdAt: true,\n  approved: true,\n});\n\nexport type InsertGuestMessage = z.infer<typeof insertGuestMessageSchema>;\nexport type GuestMessage = typeof guestMessages.$inferSelect;\n\n// RSVPs\nexport const rsvps = pgTable(\"rsvps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  guestName: varchar(\"guest_name\").notNull(),\n  email: varchar(\"email\").notNull(),\n  phone: varchar(\"phone\"),\n  attending: boolean(\"attending\").notNull(),\n  guestCount: integer(\"guest_count\").notNull().default(1),\n  mealPreference: varchar(\"meal_preference\"),\n  specialRequirements: text(\"special_requirements\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertRsvpSchema = createInsertSchema(rsvps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertRsvp = z.infer<typeof insertRsvpSchema>;\nexport type Rsvp = typeof rsvps.$inferSelect;\n\n// Gift registry items\nexport const registryItems = pgTable(\"registry_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\"),\n  price: integer(\"price\"),\n  imageUrl: text(\"image_url\"),\n  purchaseUrl: text(\"purchase_url\"),\n  isPurchased: boolean(\"is_purchased\").notNull().default(false),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertRegistryItemSchema = createInsertSchema(registryItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertRegistryItem = z.infer<typeof insertRegistryItemSchema>;\nexport type RegistryItem = typeof registryItems.$inferSelect;\n\n// Wedding settings\nexport const settings = pgTable(\"settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  venueName: varchar(\"venue_name\"),\n  venueAddress: text(\"venue_address\"),\n  venueMapLink: text(\"venue_map_link\"), // Google Maps link instead of lat/lng\n  venuePhone: varchar(\"venue_phone\"),\n  venueEmail: varchar(\"venue_email\"),\n  venueImage: text(\"venue_image\"), // Venue image/photo\n  eventStartTime: timestamp(\"event_start_time\"),\n  eventEndTime: timestamp(\"event_end_time\"),\n  backgroundMusicUrl: text(\"background_music_url\"), // Deprecated - kept for backward compatibility\n  backgroundMusicType: varchar(\"background_music_type\"), // 'youtube', 'mp3', 'upload'\n  backgroundMusicUrls: text(\"background_music_urls\").array(), // Array of music URLs for playlist\n  backgroundMusicNames: text(\"background_music_names\").array(), // Array of custom song names (parallel to URLs)\n  // Bank transfer information\n  brideQrCodeUrl: text(\"bride_qr_code_url\"), // QR code for bride's bank transfer\n  groomQrCodeUrl: text(\"groom_qr_code_url\"), // QR code for groom's bank transfer\n  brideBankInfo: text(\"bride_bank_info\"), // Bride's bank account information\n  groomBankInfo: text(\"groom_bank_info\"), // Groom's bank account information\n  // Footer information\n  footerText: text(\"footer_text\"), // Custom footer message\n  facebookUrl: text(\"facebook_url\"), // Facebook link\n  instagramUrl: text(\"instagram_url\"), // Instagram link\n  twitterUrl: text(\"twitter_url\"), // Twitter link\n  hashtag: varchar(\"hashtag\"), // Wedding hashtag\n  // Font customization\n  fontHeading: varchar(\"font_heading\"), // Font for headings (Playfair Display, Noto Serif, etc.)\n  fontBody: varchar(\"font_body\"), // Font for body text (Cormorant Garamond, Playfair Display, etc.)\n  fontCursive: varchar(\"font_cursive\"), // Font for cursive elements (Dancing Script, Yellowtail, Yesteryear)\n  fontSerif: varchar(\"font_serif\"), // Font for additional serif text (Crimson Text, Lora, etc.)\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertSettingsSchema = createInsertSchema(settings).omit({\n  id: true,\n  updatedAt: true,\n}).extend({\n  eventStartTime: z.coerce.date().optional(),\n  eventEndTime: z.coerce.date().optional(),\n});\n\nexport type InsertSettings = z.infer<typeof insertSettingsSchema>;\nexport type Settings = typeof settings.$inferSelect;\n\n// Wedding party members\nexport const weddingParty = pgTable(\"wedding_party\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  role: varchar(\"role\").notNull(),\n  description: text(\"description\"),\n  photoUrl: text(\"photo_url\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertWeddingPartySchema = createInsertSchema(weddingParty).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertWeddingParty = z.infer<typeof insertWeddingPartySchema>;\nexport type WeddingParty = typeof weddingParty.$inferSelect;\n\n// FAQs\nexport const faqs = pgTable(\"faqs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertFaqSchema = createInsertSchema(faqs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertFaq = z.infer<typeof insertFaqSchema>;\nexport type Faq = typeof faqs.$inferSelect;\n\n// Popups\nexport const popups = pgTable(\"popups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  type: varchar(\"type\").notNull().unique(), // 'welcome' or 'scroll_end' - unique constraint\n  imageUrl: text(\"image_url\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  title: varchar(\"title\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertPopupSchema = createInsertSchema(popups).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertPopup = z.infer<typeof insertPopupSchema>;\nexport type Popup = typeof popups.$inferSelect;\n\n// Music tracks for wedding playlist\nexport const musicTracks = pgTable(\"music_tracks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\").notNull(), // Song title\n  filename: varchar(\"filename\").notNull(), // File name in wedding_music folder\n  artist: varchar(\"artist\"), // Artist name\n  duration: integer(\"duration\"), // Duration in seconds\n  displayOrder: integer(\"display_order\").notNull().default(0), // Order in playlist\n  isActive: boolean(\"is_active\").notNull().default(true), // Whether to include in playlist\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertMusicTrackSchema = createInsertSchema(musicTracks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertMusicTrack = z.infer<typeof insertMusicTrackSchema>;\nexport type MusicTrack = typeof musicTracks.$inferSelect;\n\n// Guest Photos - Ảnh khách mời upload\nexport const guestPhotos = pgTable(\"guest_photos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  url: text(\"url\").notNull(), // URL ảnh\n  caption: text(\"caption\"), // Chú thích\n  guestName: varchar(\"guest_name\"), // Tên người upload (tùy chọn)\n  approved: boolean(\"approved\").notNull().default(false), // Admin duyệt ảnh\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertGuestPhotoSchema = createInsertSchema(guestPhotos).omit({\n  id: true,\n  createdAt: true,\n  approved: true,\n});\n\nexport type InsertGuestPhoto = z.infer<typeof insertGuestPhotoSchema>;\nexport type GuestPhoto = typeof guestPhotos.$inferSelect;\n\n// Livestream Information - Thông tin phát trực tiếp\nexport const livestreamInfo = pgTable(\"livestream_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  isActive: boolean(\"is_active\").notNull().default(true), // Bật/tắt tính năng livestream\n  platform: varchar(\"platform\").notNull().default(\"youtube\"), // 'youtube', 'facebook', 'zoom', 'custom'\n  streamUrl: text(\"stream_url\").notNull(), // Link xem trực tiếp\n  streamTitle: varchar(\"stream_title\"), // Tiêu đề livestream\n  streamDescription: text(\"stream_description\"), // Mô tả\n  startTime: timestamp(\"start_time\"), // Thời gian bắt đầu phát\n  endTime: timestamp(\"end_time\"), // Thời gian kết thúc\n  thumbnailUrl: text(\"thumbnail_url\"), // Ảnh thumbnail\n  chatEnabled: boolean(\"chat_enabled\").notNull().default(true), // Cho phép chat\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertLivestreamInfoSchema = createInsertSchema(livestreamInfo).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  startTime: z.coerce.date().optional(),\n  endTime: z.coerce.date().optional(),\n});\n\nexport type InsertLivestreamInfo = z.infer<typeof insertLivestreamInfoSchema>;\nexport type LivestreamInfo = typeof livestreamInfo.$inferSelect;\n","size_bytes":12903},"client/src/pages/AdminRSVPs.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Users, Check, X, Heart, Mail, Phone, Calendar, Utensils, Search, Filter, Download } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Rsvp } from \"@shared/schema\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nexport default function AdminRSVPs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [mealFilter, setMealFilter] = useState(\"all\");\n\n  const { data: rsvps = [], isLoading, isError, error } = useQuery<Rsvp[]>({\n    queryKey: [\"/api/rsvps\"],\n  });\n\n  // Filter RSVPs based on search and filters\n  const filteredRsvps = rsvps.filter(rsvp => {\n    const matchesSearch = rsvp.guestName.toLowerCase().includes(searchTerm.toLowerCase()) || \n                         rsvp.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"attending\" && rsvp.attending) ||\n                         (statusFilter === \"declined\" && !rsvp.attending);\n    const matchesMeal = mealFilter === \"all\" || rsvp.mealPreference === mealFilter;\n    return matchesSearch && matchesStatus && matchesMeal;\n  });\n\n  // Calculate statistics\n  const stats = {\n    total: rsvps.length,\n    attending: rsvps.filter(r => r.attending).length,\n    declined: rsvps.filter(r => !r.attending).length,\n    totalGuests: rsvps.reduce((sum, r) => sum + (r.attending ? r.guestCount : 0), 0),\n    responseRate: rsvps.length > 0 ? Math.round((rsvps.length / 150) * 100) : 0, // Assuming 150 invited\n  };\n\n  const mealPreferences = Array.from(new Set(rsvps.map(r => r.mealPreference).filter((meal): meal is string => Boolean(meal))));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const cardVariants = {\n    hidden: { opacity: 0, scale: 0.9 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    },\n    hover: {\n      y: -5,\n      scale: 1.02,\n      transition: {\n        type: \"spring\",\n        stiffness: 400,\n        damping: 25\n      }\n    }\n  };\n\n  const exportToCSV = () => {\n    const headers = ['Tên', 'Email', 'Số điện thoại', 'Tham dự', 'Số khách', 'Món ăn', 'Yêu cầu đặc biệt', 'Ngày gửi'];\n    const csvData = rsvps.map(rsvp => [\n      rsvp.guestName,\n      rsvp.email,\n      rsvp.phone || '',\n      rsvp.attending ? 'Có' : 'Không',\n      rsvp.guestCount,\n      rsvp.mealPreference || '',\n      rsvp.specialRequirements || '',\n      new Date(rsvp.createdAt!).toLocaleDateString('vi-VN')\n    ]);\n    \n    const csvContent = [headers, ...csvData].map(row => row.join(',')).join('\\n');\n    const BOM = '\\uFEFF';\n    const blob = new Blob([BOM + csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = 'rsvp-list.csv';\n    link.click();\n    window.URL.revokeObjectURL(url);\n  };\n\n  if (isLoading) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-serif mb-2 text-foreground\">📋 Quản Lý RSVP</h2>\n          <p className=\"text-muted-foreground\">Theo dõi và quản lý phản hồi của khách mời</p>\n        </div>\n        <div className=\"grid gap-6 md:grid-cols-4 mb-8\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardHeader className=\"space-y-0 pb-2\">\n                <div className=\"h-4 bg-muted rounded w-1/2\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-8 bg-muted rounded w-1/3\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </motion.div>\n    );\n  }\n\n  if (isError) {\n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-serif mb-2 text-foreground\">📋 Quản Lý RSVP</h2>\n          <p className=\"text-muted-foreground\">Theo dõi và quản lý phản hồi của khách mời</p>\n        </div>\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-16\">\n            <motion.div\n              animate={{ \n                scale: [1, 1.1, 1],\n                rotate: [0, -5, 5, 0]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Heart className=\"text-destructive mb-4\" size={64} />\n            </motion.div>\n            <p className=\"text-destructive text-lg mb-2\">Không thể tải RSVP</p>\n            <p className=\"text-muted-foreground text-center\">\n              {error instanceof Error ? error.message : \"Vui lòng thử lại sau\"}\n            </p>\n          </CardContent>\n        </Card>\n      </motion.div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Header */}\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div className=\"flex justify-between items-center mb-6\" variants={itemVariants}>\n          <div>\n            <h2 className=\"text-3xl font-serif mb-2 text-foreground\" data-testid=\"heading-rsvps\">\n              📋 Quản Lý RSVP\n            </h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Theo dõi và quản lý phản hồi của khách mời\n            </p>\n          </div>\n          <Button \n            variant=\"outline\" \n            onClick={exportToCSV}\n            className=\"rounded-xl\"\n          >\n            <Download size={16} className=\"mr-2\" />\n            Xuất CSV\n          </Button>\n        </motion.div>\n\n        {/* Stats */}\n        <motion.div className=\"grid gap-6 md:grid-cols-4 mb-8\" variants={itemVariants}>\n          <Card className=\"bg-blue-500/5 border-blue-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Tổng Phản Hồi</CardTitle>\n              <Users className=\"h-4 w-4 text-blue-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-blue-500\">{stats.total}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {stats.responseRate}% tỷ lệ phản hồi\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-green-500/5 border-green-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Tham Dự</CardTitle>\n              <Check className=\"h-4 w-4 text-green-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-green-500\">{stats.attending}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {stats.total > 0 ? Math.round((stats.attending / stats.total) * 100) : 0}% tổng số\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-red-500/5 border-red-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Từ Chối</CardTitle>\n              <X className=\"h-4 w-4 text-red-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-red-500\">{stats.declined}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {stats.total > 0 ? Math.round((stats.declined / stats.total) * 100) : 0}% tổng số\n              </p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-purple-500/5 border-purple-500/20\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Tổng Số Khách</CardTitle>\n              <Users className=\"h-4 w-4 text-purple-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-3xl font-bold text-purple-500\">{stats.totalGuests}</div>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {stats.attending > 0 ? Math.round(stats.totalGuests / stats.attending) : 0} khách/người\n              </p>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Search and Filter */}\n        <motion.div className=\"flex flex-col sm:flex-row gap-4 mb-6\" variants={itemVariants}>\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\" size={18} />\n            <Input\n              placeholder=\"🔍 Tìm kiếm theo tên hoặc email...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 rounded-xl\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40 rounded-xl\">\n                <Filter size={16} className=\"mr-2\" />\n                <SelectValue placeholder=\"Tất cả trạng thái\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">🎯 Tất cả</SelectItem>\n                <SelectItem value=\"attending\">✅ Tham dự</SelectItem>\n                <SelectItem value=\"declined\">❌ Từ chối</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={mealFilter} onValueChange={setMealFilter}>\n              <SelectTrigger className=\"w-40 rounded-xl\">\n                <Utensils size={16} className=\"mr-2\" />\n                <SelectValue placeholder=\"Tất cả món ăn\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">🍽️ Tất cả</SelectItem>\n                {mealPreferences.map(meal => (\n                  <SelectItem key={meal} value={meal}>\n                    {meal}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </motion.div>\n      </motion.div>\n\n      {/* RSVP List */}\n      <motion.div variants={containerVariants} initial=\"hidden\" animate=\"visible\">\n        <Card className=\"border-2 border-border/50 shadow-lg\">\n          <CardHeader className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b\">\n            <CardTitle className=\"flex items-center gap-2\">\n              <Users className=\"text-primary\" size={20} />\n              Tất Cả RSVP ({filteredRsvps.length})\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {filteredRsvps.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center py-16\">\n                <Heart className=\"text-muted-foreground mb-4 opacity-50\" size={64} />\n                <p className=\"text-muted-foreground text-lg mb-2\">\n                  {searchTerm || statusFilter !== \"all\" || mealFilter !== \"all\" \n                    ? \"Không tìm thấy RSVP nào\" \n                    : \"Chưa có RSVP nào\"\n                  }\n                </p>\n                <p className=\"text-muted-foreground text-center\">\n                  {searchTerm || statusFilter !== \"all\" || mealFilter !== \"all\" \n                    ? \"Thử thay đổi bộ lọc tìm kiếm\" \n                    : \"Khách mời sẽ xuất hiện ở đây khi họ gửi RSVP\"\n                  }\n                </p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-border/50\">\n                <AnimatePresence>\n                  {filteredRsvps.map((rsvp) => (\n                    <motion.div\n                      key={rsvp.id}\n                      className=\"p-4 hover:bg-muted/30 transition-colors group cursor-pointer\"\n                      variants={itemVariants}\n                      whileHover={{ x: 4 }}\n                      data-testid={`rsvp-${rsvp.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start gap-4 flex-1\">\n                          <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${\n                            rsvp.attending \n                              ? \"bg-green-500/10 text-green-600\" \n                              : \"bg-red-500/10 text-red-600\"\n                          }`}>\n                            {rsvp.attending ? <Check size={20} /> : <X size={20} />}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-3 mb-2\">\n                              <p className=\"font-semibold text-foreground text-lg\">\n                                {rsvp.guestName}\n                              </p>\n                              <Badge \n                                variant={rsvp.attending ? \"default\" : \"secondary\"}\n                                className={\n                                  rsvp.attending \n                                    ? \"bg-green-500/20 text-green-600 hover:bg-green-500/30\" \n                                    : \"bg-red-500/20 text-red-600 hover:bg-red-500/30\"\n                                }\n                              >\n                                {rsvp.attending ? \"✅ Tham dự\" : \"❌ Từ chối\"}\n                              </Badge>\n                            </div>\n                            \n                            <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground mb-2\">\n                              <div className=\"flex items-center gap-1\">\n                                <Mail size={14} />\n                                {rsvp.email}\n                              </div>\n                              {rsvp.phone && (\n                                <div className=\"flex items-center gap-1\">\n                                  <Phone size={14} />\n                                  {rsvp.phone}\n                                </div>\n                              )}\n                              <div className=\"flex items-center gap-1\">\n                                <Calendar size={14} />\n                                {new Date(rsvp.createdAt!).toLocaleDateString('vi-VN', {\n                                  day: 'numeric',\n                                  month: 'short',\n                                  year: 'numeric'\n                                })}\n                              </div>\n                            </div>\n\n                            {rsvp.attending && (\n                              <div className=\"flex flex-wrap gap-3 mt-2\">\n                                <Badge variant=\"outline\" className=\"bg-blue-500/10 text-blue-600\">\n                                  👥 {rsvp.guestCount} {rsvp.guestCount === 1 ? \"khách\" : \"khách\"}\n                                </Badge>\n                                {rsvp.mealPreference && (\n                                  <Badge variant=\"outline\" className=\"bg-orange-500/10 text-orange-600\">\n                                    <Utensils size={12} className=\"mr-1\" />\n                                    {rsvp.mealPreference}\n                                  </Badge>\n                                )}\n                              </div>\n                            )}\n\n                            {rsvp.specialRequirements && (\n                              <div className=\"mt-2\">\n                                <p className=\"text-sm text-muted-foreground\">\n                                  <span className=\"font-medium\">Yêu cầu đặc biệt:</span> {rsvp.specialRequirements}\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n                    </motion.div>\n                  ))}\n                </AnimatePresence>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </motion.div>\n    </motion.div>\n  );\n}","size_bytes":17390},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"scripts/create_backup.ts":{"content":"import * as dotenv from 'dotenv';\ndotenv.config();\n\nimport { pool } from '../server/db';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nasync function createBackup() {\n  const client = await pool.connect();\n  \n  try {\n    console.log('📦 Creating database backup...');\n    \n    let backup = `-- Wedding Website Database Backup\n-- Generated: ${new Date().toISOString()}\n-- Database: PostgreSQL (Neon)\n\nSET statement_timeout = 0;\nSET lock_timeout = 0;\nSET client_encoding = 'UTF8';\nSET standard_conforming_strings = on;\nSET check_function_bodies = false;\nSET xmloption = content;\nSET client_min_messages = warning;\nSET row_security = off;\n\n`;\n\n    const tables = [\n      'couple_info',\n      'schedule_events',\n      'photos',\n      'guest_messages',\n      'rsvps',\n      'registry_items',\n      'settings',\n      'wedding_party',\n      'faqs'\n    ];\n\n    for (const table of tables) {\n      console.log(`  Exporting ${table}...`);\n      \n      const result = await client.query(`SELECT * FROM ${table}`);\n      \n      if (result.rows.length > 0) {\n        backup += `\\n-- Data for table ${table}\\n`;\n        backup += `TRUNCATE TABLE ${table} CASCADE;\\n`;\n        \n        const columns = Object.keys(result.rows[0]);\n        \n        // Quote column names to handle reserved keywords like 'order'\n        const quotedColumns = columns.map(col => `\"${col}\"`);\n        \n        for (const row of result.rows) {\n          const values = columns.map(col => {\n            const val = row[col];\n            if (val === null) return 'NULL';\n            if (typeof val === 'string') {\n              // Properly escape single quotes and backslashes\n              return `'${val.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\")}'`;\n            }\n            if (val instanceof Date) {\n              return `'${val.toISOString()}'`;\n            }\n            if (typeof val === 'boolean') {\n              return val ? 'true' : 'false';\n            }\n            if (typeof val === 'number') {\n              return val.toString();\n            }\n            if (Array.isArray(val)) {\n              // Properly escape array values\n              const escapedValues = val.map(v => {\n                if (typeof v === 'string') {\n                  return `'${v.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\")}'`;\n                }\n                return `'${v}'`;\n              });\n              return `ARRAY[${escapedValues.join(',')}]`;\n            }\n            // Handle objects as JSON\n            return `'${JSON.stringify(val).replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\")}'`;\n          });\n          \n          backup += `INSERT INTO \"${table}\" (${quotedColumns.join(', ')}) VALUES (${values.join(', ')});\\n`;\n        }\n      }\n    }\n\n    backup += `\\n-- Backup completed: ${new Date().toISOString()}\\n`;\n\n    const backupPath = path.join(process.cwd(), 'database_backup.sql');\n    fs.writeFileSync(backupPath, backup, 'utf8');\n    \n    console.log(`✅ Backup created successfully: ${backupPath}`);\n    console.log(`📊 Backup size: ${(fs.statSync(backupPath).size / 1024).toFixed(2)} KB`);\n    \n  } catch (error) {\n    console.error('❌ Error creating backup:', error);\n    throw error;\n  } finally {\n    client.release();\n    await pool.end();\n  }\n}\n\ncreateBackup().catch(console.error);\n","size_bytes":3283},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/AdminRegistry.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { QrCode, Save, Upload, CloudUpload, Image as ImageIcon, Trash2 } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Settings } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { motion } from \"framer-motion\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function AdminRegistry() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadingBrideQR, setUploadingBrideQR] = useState(false);\n  const [uploadingGroomQR, setUploadingGroomQR] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const brideQRInputRef = useRef<HTMLInputElement>(null);\n  const groomQRInputRef = useRef<HTMLInputElement>(null);\n\n  const { data: settings, isLoading } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [brideBankInfo, setBrideBankInfo] = useState(\"\");\n  const [groomBankInfo, setGroomBankInfo] = useState(\"\");\n  const [brideQrCodeUrl, setBrideQrCodeUrl] = useState(\"\");\n  const [groomQrCodeUrl, setGroomQrCodeUrl] = useState(\"\");\n\n  // Update state when settings are loaded\n  useEffect(() => {\n    if (settings) {\n      setBrideBankInfo(settings.brideBankInfo || \"\");\n      setGroomBankInfo(settings.groomBankInfo || \"\");\n      setBrideQrCodeUrl(settings.brideQrCodeUrl || \"\");\n      setGroomQrCodeUrl(settings.groomQrCodeUrl || \"\");\n    }\n  }, [settings]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: Partial<Settings>) => {\n      return await apiRequest(\"POST\", \"/api/settings\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({ \n        title: \"✅ Cập nhật thành công\",\n        description: \"Thông tin chuyển khoản đã được lưu\"\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể lưu thông tin\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (\n    file: File | null, \n    type: 'bride' | 'groom'\n  ) => {\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh (JPEG, PNG, WebP)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 10 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 10MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (type === 'bride') {\n      setUploadingBrideQR(true);\n    } else {\n      setUploadingGroomQR(true);\n    }\n    setUploadProgress(0);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file, (progress) => {\n        setUploadProgress(progress);\n      });\n\n      if (type === 'bride') {\n        setBrideQrCodeUrl(imageUrl);\n      } else {\n        setGroomQrCodeUrl(imageUrl);\n      }\n\n      toast({\n        title: \"✅ Tải lên thành công!\",\n        description: `Mã QR ${type === 'bride' ? 'Cô dâu' : 'Chú rể'} đã được tải lên`,\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh\",\n        variant: \"destructive\",\n      });\n    } finally {\n      if (type === 'bride') {\n        setUploadingBrideQR(false);\n      } else {\n        setUploadingGroomQR(false);\n      }\n      setUploadProgress(0);\n    }\n  };\n\n  const handleSave = () => {\n    updateMutation.mutate({\n      brideBankInfo,\n      groomBankInfo,\n      brideQrCodeUrl,\n      groomQrCodeUrl,\n    });\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center min-h-[400px]\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      {/* Hidden file inputs */}\n      <input\n        type=\"file\"\n        ref={brideQRInputRef}\n        onChange={(e) => handleFileSelect(e.target.files?.[0] || null, 'bride')}\n        accept=\"image/*\"\n        className=\"hidden\"\n        data-testid=\"input-bride-qr-upload\"\n      />\n      <input\n        type=\"file\"\n        ref={groomQRInputRef}\n        onChange={(e) => handleFileSelect(e.target.files?.[0] || null, 'groom')}\n        accept=\"image/*\"\n        className=\"hidden\"\n        data-testid=\"input-groom-qr-upload\"\n      />\n\n      {/* Header */}\n      <motion.div \n        className=\"mb-8\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        <motion.div className=\"flex justify-between items-center mb-6\" variants={itemVariants}>\n          <div>\n            <h2 className=\"text-3xl font-serif mb-2 text-foreground\" data-testid=\"heading-registry\">\n              💳 Thông Tin Chuyển Khoản\n            </h2>\n            <p className=\"text-muted-foreground text-lg\">\n              Quản lý mã QR và thông tin tài khoản ngân hàng cho cô dâu và chú rể\n            </p>\n          </div>\n          <Button \n            onClick={handleSave}\n            disabled={updateMutation.isPending}\n            className=\"rounded-xl shadow-lg hover:shadow-xl transition-all duration-300\"\n            data-testid=\"button-save-bank-info\"\n          >\n            <Save size={18} className=\"mr-2\" />\n            {updateMutation.isPending ? \"Đang lưu...\" : \"Lưu Thay Đổi\"}\n          </Button>\n        </motion.div>\n\n        {/* Bank Transfer Cards */}\n        <motion.div className=\"grid md:grid-cols-2 gap-6\" variants={containerVariants}>\n          {/* Bride's Bank Transfer */}\n          <motion.div variants={itemVariants}>\n            <Card className=\"rounded-2xl border-pink-200 dark:border-pink-800 shadow-lg\">\n              <CardHeader className=\"bg-pink-50 dark:bg-pink-950/20 rounded-t-2xl\">\n                <CardTitle className=\"flex items-center gap-2 text-pink-600 dark:text-pink-400\" data-testid=\"heading-bride-bank\">\n                  <QrCode size={24} />\n                  Thông Tin Cô Dâu\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6 space-y-6\">\n                {/* QR Code Upload */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-foreground\">Mã QR Chuyển Khoản</label>\n                  \n                  {/* QR Code Preview */}\n                  {brideQrCodeUrl && (\n                    <div className=\"relative group\">\n                      <img\n                        src={brideQrCodeUrl}\n                        alt=\"Mã QR Cô Dâu\"\n                        className=\"w-full max-w-xs mx-auto rounded-lg border-2 border-pink-200 dark:border-pink-800 shadow-md\"\n                        data-testid=\"img-bride-qr\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => setBrideQrCodeUrl(\"\")}\n                        data-testid=\"button-remove-bride-qr\"\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Upload Buttons */}\n                  <div className=\"flex gap-2\">\n                    <Input\n                      type=\"url\"\n                      placeholder=\"Hoặc dán URL ảnh QR\"\n                      value={brideQrCodeUrl}\n                      onChange={(e) => setBrideQrCodeUrl(e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"input-bride-qr-url\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => brideQRInputRef.current?.click()}\n                      disabled={uploadingBrideQR}\n                      data-testid=\"button-upload-bride-qr\"\n                    >\n                      {uploadingBrideQR ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          ⏳\n                        </motion.div>\n                      ) : (\n                        <CloudUpload size={18} />\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Upload Progress */}\n                  {uploadingBrideQR && (\n                    <div className=\"space-y-2\">\n                      <Progress value={uploadProgress} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground text-center\">\n                        Đang tải lên... {Math.round(uploadProgress)}%\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Bank Information */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-foreground\">Thông Tin Tài Khoản</label>\n                  <Textarea\n                    placeholder=\"Ngân hàng: Vietcombank&#10;Số tài khoản: 1234567890&#10;Chủ tài khoản: Nguyễn Thị A&#10;Chi nhánh: TP.HCM\"\n                    value={brideBankInfo}\n                    onChange={(e) => setBrideBankInfo(e.target.value)}\n                    rows={6}\n                    className=\"font-mono text-sm\"\n                    data-testid=\"textarea-bride-bank-info\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Nhập thông tin tài khoản ngân hàng của cô dâu (mỗi thông tin một dòng)\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n\n          {/* Groom's Bank Transfer */}\n          <motion.div variants={itemVariants}>\n            <Card className=\"rounded-2xl border-blue-200 dark:border-blue-800 shadow-lg\">\n              <CardHeader className=\"bg-blue-50 dark:bg-blue-950/20 rounded-t-2xl\">\n                <CardTitle className=\"flex items-center gap-2 text-blue-600 dark:text-blue-400\" data-testid=\"heading-groom-bank\">\n                  <QrCode size={24} />\n                  Thông Tin Chú Rể\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6 space-y-6\">\n                {/* QR Code Upload */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-foreground\">Mã QR Chuyển Khoản</label>\n                  \n                  {/* QR Code Preview */}\n                  {groomQrCodeUrl && (\n                    <div className=\"relative group\">\n                      <img\n                        src={groomQrCodeUrl}\n                        alt=\"Mã QR Chú Rể\"\n                        className=\"w-full max-w-xs mx-auto rounded-lg border-2 border-blue-200 dark:border-blue-800 shadow-md\"\n                        data-testid=\"img-groom-qr\"\n                      />\n                      <Button\n                        variant=\"destructive\"\n                        size=\"icon\"\n                        className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => setGroomQrCodeUrl(\"\")}\n                        data-testid=\"button-remove-groom-qr\"\n                      >\n                        <Trash2 size={16} />\n                      </Button>\n                    </div>\n                  )}\n\n                  {/* Upload Buttons */}\n                  <div className=\"flex gap-2\">\n                    <Input\n                      type=\"url\"\n                      placeholder=\"Hoặc dán URL ảnh QR\"\n                      value={groomQrCodeUrl}\n                      onChange={(e) => setGroomQrCodeUrl(e.target.value)}\n                      className=\"flex-1\"\n                      data-testid=\"input-groom-qr-url\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => groomQRInputRef.current?.click()}\n                      disabled={uploadingGroomQR}\n                      data-testid=\"button-upload-groom-qr\"\n                    >\n                      {uploadingGroomQR ? (\n                        <motion.div\n                          animate={{ rotate: 360 }}\n                          transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n                        >\n                          ⏳\n                        </motion.div>\n                      ) : (\n                        <CloudUpload size={18} />\n                      )}\n                    </Button>\n                  </div>\n\n                  {/* Upload Progress */}\n                  {uploadingGroomQR && (\n                    <div className=\"space-y-2\">\n                      <Progress value={uploadProgress} className=\"h-2\" />\n                      <p className=\"text-xs text-muted-foreground text-center\">\n                        Đang tải lên... {Math.round(uploadProgress)}%\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                {/* Bank Information */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium text-foreground\">Thông Tin Tài Khoản</label>\n                  <Textarea\n                    placeholder=\"Ngân hàng: Vietcombank&#10;Số tài khoản: 0987654321&#10;Chủ tài khoản: Trần Văn B&#10;Chi nhánh: TP.HCM\"\n                    value={groomBankInfo}\n                    onChange={(e) => setGroomBankInfo(e.target.value)}\n                    rows={6}\n                    className=\"font-mono text-sm\"\n                    data-testid=\"textarea-groom-bank-info\"\n                  />\n                  <p className=\"text-xs text-muted-foreground\">\n                    Nhập thông tin tài khoản ngân hàng của chú rể (mỗi thông tin một dòng)\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </motion.div>\n\n        {/* Info Card */}\n        <motion.div className=\"mt-6\" variants={itemVariants}>\n          <Card className=\"bg-muted/50 border-dashed rounded-2xl\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex gap-4\">\n                <div className=\"text-primary\">\n                  <ImageIcon size={24} />\n                </div>\n                <div className=\"flex-1 space-y-2\">\n                  <h3 className=\"font-medium text-foreground\">Hướng dẫn sử dụng</h3>\n                  <ul className=\"text-sm text-muted-foreground space-y-1 list-disc list-inside\">\n                    <li>Tải lên ảnh mã QR hoặc dán URL ảnh QR của ngân hàng</li>\n                    <li>Nhập đầy đủ thông tin tài khoản bao gồm: tên ngân hàng, số tài khoản, tên chủ tài khoản</li>\n                    <li>Khách mời sẽ thấy mã QR và thông tin này trên trang chủ để chuyển khoản mừng cưới</li>\n                    <li>Hỗ trợ định dạng ảnh: JPEG, PNG, WebP (tối đa 10MB)</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n      </motion.div>\n    </motion.div>\n  );\n}\n","size_bytes":16715},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/pages/AdminDashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  LayoutDashboard,\n  Users,\n  MessageSquare,\n  Calendar,\n  Image,\n  Gift,\n  Settings,\n  Heart,\n  LogOut,\n  Menu,\n  X,\n  Bell,\n  User,\n  Sparkles,\n  Home,\n  ExternalLink,\n  CheckCircle,\n  ImagePlus,\n  DollarSign,\n  Video,\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Rsvp, GuestMessage } from \"@shared/schema\";\n\nconst menuItems = [\n  {\n    title: \"Tổng Quan\",\n    url: \"/admin\",\n    icon: LayoutDashboard,\n    description: \"Xem tổng quan đám cưới\",\n    color: \"text-blue-500\",\n    bgColor: \"bg-blue-50 dark:bg-blue-950/20\"\n  },\n  {\n    title: \"Thông Tin Cô Dâu Chú Rể\",\n    url: \"/admin/couple\",\n    icon: Heart,\n    description: \"Quản lý thông tin cặp đôi\",\n    color: \"text-pink-500\",\n    bgColor: \"bg-pink-50 dark:bg-pink-950/20\"\n  },\n  {\n    title: \"Lịch Trình\",\n    url: \"/admin/schedule\",\n    icon: Calendar,\n    description: \"Quản lý lịch trình sự kiện\",\n    color: \"text-green-500\",\n    bgColor: \"bg-green-50 dark:bg-green-950/20\"\n  },\n  {\n    title: \"Album Ảnh\",\n    url: \"/admin/gallery\",\n    icon: Image,\n    description: \"Quản lý hình ảnh đám cưới\",\n    color: \"text-purple-500\",\n    bgColor: \"bg-purple-50 dark:bg-purple-950/20\"\n  },\n  {\n    title: \"Lời Chúc\",\n    url: \"/admin/messages\",\n    icon: MessageSquare,\n    description: \"Xem và quản lý lời chúc\",\n    color: \"text-orange-500\",\n    bgColor: \"bg-orange-50 dark:bg-orange-950/20\"\n  },\n  {\n    title: \"Danh Sách Khách\",\n    url: \"/admin/rsvps\",\n    icon: Users,\n    description: \"Quản lý RSVP và khách mời\",\n    color: \"text-cyan-500\",\n    bgColor: \"bg-cyan-50 dark:bg-cyan-950/20\"\n  },\n  {\n    title: \"Đội Ngũ Đám Cưới\",\n    url: \"/admin/wedding-party\",\n    icon: Users,\n    description: \"Quản lý phù dâu, phù rể\",\n    color: \"text-rose-500\",\n    bgColor: \"bg-rose-50 dark:bg-rose-950/20\"\n  },\n  {\n    title: \"Quà Mừng\",\n    url: \"/admin/registry\",\n    icon: Gift,\n    description: \"Quản lý danh sách quà\",\n    color: \"text-yellow-500\",\n    bgColor: \"bg-yellow-50 dark:bg-yellow-950/20\"\n  },\n  {\n    title: \"Ảnh Khách Upload\",\n    url: \"/admin/guest-photos\",\n    icon: ImagePlus,\n    description: \"Quản lý ảnh khách tải lên\",\n    color: \"text-indigo-500\",\n    bgColor: \"bg-indigo-50 dark:bg-indigo-950/20\"\n  },\n  {\n    title: \"Livestream\",\n    url: \"/admin/livestream\",\n    icon: Video,\n    description: \"Cài đặt trực tiếp online\",\n    color: \"text-red-500\",\n    bgColor: \"bg-red-50 dark:bg-red-950/20\"\n  },\n  {\n    title: \"Cài Đặt\",\n    url: \"/admin/settings\",\n    icon: Settings,\n    description: \"Cài đặt website\",\n    color: \"text-gray-500\",\n    bgColor: \"bg-gray-50 dark:bg-gray-950/20\"\n  },\n];\n\nexport default function AdminDashboard({ children }: { children: React.ReactNode }) {\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const { toast } = useToast();\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [previousNotificationCount, setPreviousNotificationCount] = useState(0);\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n  const [viewedNotifications, setViewedNotifications] = useState<Set<string>>(() => {\n    const saved = localStorage.getItem('viewedNotifications');\n    return saved ? new Set(JSON.parse(saved)) : new Set();\n  });\n\n  const { data: rsvps = [] } = useQuery<Rsvp[]>({\n    queryKey: [\"/api/rsvps\"],\n    refetchInterval: 5000, // Poll every 5 seconds for real-time updates\n  });\n\n  const { data: messages = [] } = useQuery<GuestMessage[]>({\n    queryKey: [\"/api/messages\"],\n    refetchInterval: 5000, // Poll every 5 seconds for real-time updates\n  });\n\n  const recentRsvps = rsvps.slice(-5).reverse();\n  const recentMessages = messages.filter(m => !m.approved).slice(-5);\n  \n  // Filter out viewed notifications\n  const unviewedRsvps = recentRsvps.filter(r => !viewedNotifications.has(`rsvp-${r.id}`));\n  const unviewedMessages = recentMessages.filter(m => !viewedNotifications.has(`message-${m.id}`));\n  const notifications = unviewedRsvps.length + unviewedMessages.length;\n\n  // Initialize AudioContext once on first user interaction\n  useEffect(() => {\n    const initAudioContext = () => {\n      if (!audioContext) {\n        try {\n          const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\n          setAudioContext(ctx);\n          // Resume context on user interaction (required by browsers)\n          if (ctx.state === 'suspended') {\n            ctx.resume();\n          }\n        } catch (error) {\n          console.error('Error initializing audio context:', error);\n        }\n      }\n    };\n\n    // Initialize on first click\n    const handleClick = () => {\n      initAudioContext();\n      document.removeEventListener('click', handleClick);\n    };\n\n    document.addEventListener('click', handleClick);\n    \n    return () => {\n      document.removeEventListener('click', handleClick);\n    };\n  }, [audioContext]);\n\n  // Cleanup AudioContext on unmount\n  useEffect(() => {\n    return () => {\n      if (audioContext && audioContext.state !== 'closed') {\n        audioContext.close();\n      }\n    };\n  }, [audioContext]);\n\n  // Save viewed notifications to localStorage\n  useEffect(() => {\n    localStorage.setItem('viewedNotifications', JSON.stringify(Array.from(viewedNotifications)));\n  }, [viewedNotifications]);\n\n  // Play notification sound when count increases\n  useEffect(() => {\n    if (previousNotificationCount > 0 && notifications > previousNotificationCount) {\n      // Play notification sound using Web Audio API\n      playNotificationSound();\n      \n      toast({\n        title: \"🔔 Thông báo mới!\",\n        description: `Bạn có ${notifications - previousNotificationCount} thông báo mới`,\n      });\n    }\n    setPreviousNotificationCount(notifications);\n  }, [notifications]);\n\n  const markAllAsRead = () => {\n    const newViewed = new Set(viewedNotifications);\n    recentRsvps.forEach(r => newViewed.add(`rsvp-${r.id}`));\n    recentMessages.forEach(m => newViewed.add(`message-${m.id}`));\n    setViewedNotifications(newViewed);\n  };\n\n  const markAsRead = (id: string, type: 'rsvp' | 'message') => {\n    const notificationId = `${type}-${id}`;\n    const newViewed = new Set(viewedNotifications);\n    newViewed.add(notificationId);\n    setViewedNotifications(newViewed);\n  };\n\n  // Function to play notification sound using shared AudioContext\n  const playNotificationSound = () => {\n    if (!audioContext || audioContext.state === 'closed') {\n      console.warn('AudioContext not available');\n      return;\n    }\n\n    try {\n      // Resume context if suspended\n      if (audioContext.state === 'suspended') {\n        audioContext.resume();\n      }\n\n      // Create oscillator for beep sound\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      // Configure sound\n      oscillator.frequency.value = 800; // Frequency in Hz\n      oscillator.type = 'sine';\n      \n      // Volume envelope\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.01);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);\n      \n      // Play sound\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.3);\n      \n      // Clean up oscillator after it stops\n      oscillator.onended = () => {\n        oscillator.disconnect();\n        gainNode.disconnect();\n      };\n    } catch (error) {\n      console.error('Error playing notification sound:', error);\n    }\n  };\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"🔐 Chưa đăng nhập\",\n        description: \"Vui lòng đăng nhập để truy cập trang quản lý\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/login\";\n      }, 500);\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const handleLogout = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    toast({\n      title: \"👋 Đang đăng xuất...\",\n      description: \"Đang chuyển về trang chủ\",\n    });\n    \n    setTimeout(() => {\n      window.location.href = \"/api/logout\";\n    }, 300);\n  };\n\n  if (isLoading || !isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-rose-50 via-white to-pink-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900\">\n        <motion.div\n          initial={{ scale: 0, opacity: 0 }}\n          animate={{ scale: 1, opacity: 1 }}\n          transition={{ type: \"spring\", stiffness: 200, damping: 20 }}\n          className=\"text-center space-y-6\"\n        >\n          <motion.div\n            animate={{\n              scale: [1, 1.1, 1],\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            className=\"relative\"\n          >\n            <Heart size={80} className=\"text-rose-500 dark:text-rose-400 mx-auto\" fill=\"currentColor\" />\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 3, repeat: Infinity, ease: \"linear\" }}\n              className=\"absolute inset-0\"\n            >\n              <Sparkles size={80} className=\"text-pink-400/30 dark:text-pink-300/20\" />\n            </motion.div>\n          </motion.div>\n          <motion.p\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3 }}\n            className=\"text-foreground text-xl font-medium\"\n          >\n            Đang tải trang quản lý...\n          </motion.p>\n        </motion.div>\n      </div>\n    );\n  }\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.08\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -20 },\n    visible: {\n      opacity: 1,\n      x: 0,\n      transition: {\n        duration: 0.6,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <SidebarProvider>\n      <div className=\"flex h-screen w-full bg-background overflow-hidden\">\n        {/* Mobile Menu Overlay */}\n        <AnimatePresence>\n          {isMobileMenuOpen && (\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              className=\"lg:hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-40\"\n              onClick={() => setIsMobileMenuOpen(false)}\n            />\n          )}\n        </AnimatePresence>\n\n        {/* Sidebar */}\n        <motion.div\n          initial={{ x: -320 }}\n          animate={{ x: 0 }}\n          transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n          className=\"z-50\"\n        >\n          <Sidebar className=\"w-72 border-r border-border/40 bg-sidebar/98 backdrop-blur-xl shadow-xl\">\n            <SidebarContent className=\"gap-0\">\n              <SidebarGroup>\n                {/* Header */}\n                <motion.div\n                  className=\"p-6 pb-4 border-b border-border/40\"\n                  initial={{ opacity: 0, y: -20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: 0.2 }}\n                >\n                  <SidebarGroupLabel className=\"text-xl font-cursive text-primary mb-2 flex items-center gap-2\">\n                    <Heart size={22} fill=\"currentColor\" />\n                    Quản Lý Đám Cưới\n                  </SidebarGroupLabel>\n                  <div className=\"flex items-center gap-2 text-xs text-muted-foreground/80 mt-2\">\n                    <User size={12} />\n                    <span>{user?.name || user?.username || \"Admin\"}</span>\n                  </div>\n                </motion.div>\n\n                <SidebarGroupContent className=\"p-4\">\n                  <motion.div\n                    variants={containerVariants}\n                    initial=\"hidden\"\n                    animate=\"visible\"\n                  >\n                    <SidebarMenu className=\"space-y-2\">\n                      {menuItems.map((item, index) => {\n                        const isActive = location === item.url;\n                        return (\n                          <motion.div key={item.title} variants={itemVariants}>\n                            <SidebarMenuItem>\n                              <SidebarMenuButton\n                                asChild\n                                className={cn(\n                                  \"relative group transition-all duration-300 rounded-xl p-3 h-auto\",\n                                  \"hover:shadow-md border\",\n                                  isActive\n                                    ? cn(\n                                        \"bg-sidebar-accent text-foreground border-primary/40 shadow-md\",\n                                        item.bgColor\n                                      )\n                                    : \"border-transparent hover:border-border/50 bg-transparent\"\n                                )}\n                              >\n                                <Link \n                                  href={item.url} \n                                  data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                                  onClick={() => setIsMobileMenuOpen(false)}\n                                  className=\"flex items-center gap-3\"\n                                >\n                                  <div\n                                    className={cn(\n                                      \"p-1.5 rounded-lg transition-colors\",\n                                      isActive ? \"bg-white/50 dark:bg-black/20\" : \"bg-transparent\"\n                                    )}\n                                  >\n                                    <item.icon size={18} className={item.color} />\n                                  </div>\n                                  \n                                  <div className=\"flex-1 text-left\">\n                                    <span className=\"font-medium text-sm leading-tight block\">\n                                      {item.title}\n                                    </span>\n                                  </div>\n                                  \n                                  {/* Active indicator */}\n                                  {isActive && (\n                                    <div className=\"w-1.5 h-1.5 bg-primary rounded-full\" />\n                                  )}\n                                </Link>\n                              </SidebarMenuButton>\n                            </SidebarMenuItem>\n                          </motion.div>\n                        );\n                      })}\n                      \n                      {/* View Homepage Button */}\n                      <motion.div \n                        className=\"pt-6 mt-3\"\n                        variants={itemVariants}\n                      >\n                        <SidebarMenuItem>\n                          <SidebarMenuButton asChild>\n                            <Link \n                              href=\"/\" \n                              data-testid=\"link-homepage\"\n                              className=\"group relative rounded-2xl p-3.5 h-auto min-h-[60px] text-primary hover:bg-primary/10 hover:text-primary transition-all duration-400 border-2 border-transparent hover:border-primary/20\"\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                <motion.div\n                                  whileHover={{ scale: 1.1 }}\n                                  whileTap={{ scale: 0.95 }}\n                                  className=\"p-1.5 rounded-lg bg-primary/10\"\n                                >\n                                  <Home size={18} />\n                                </motion.div>\n                                <div className=\"flex-1 text-left\">\n                                  <span className=\"font-medium text-sm block\">Xem Trang Chủ</span>\n                                </div>\n                                <ExternalLink size={14} className=\"opacity-60\" />\n                              </div>\n                            </Link>\n                          </SidebarMenuButton>\n                        </SidebarMenuItem>\n                      </motion.div>\n\n                      {/* Logout Button */}\n                      <motion.div \n                        className=\"pt-3 mt-3 border-t border-border/40\"\n                        variants={itemVariants}\n                      >\n                        <SidebarMenuItem>\n                          <SidebarMenuButton asChild>\n                            <a \n                              href=\"/api/logout\" \n                              data-testid=\"button-logout\"\n                              onClick={handleLogout}\n                              className=\"group relative rounded-2xl p-3.5 h-auto min-h-[60px] text-destructive hover:bg-destructive/10 hover:text-destructive transition-all duration-400 border-2 border-transparent hover:border-destructive/20\"\n                            >\n                              <div className=\"flex items-center gap-3\">\n                                <motion.div\n                                  whileHover={{ scale: 1.1, x: 2 }}\n                                  whileTap={{ scale: 0.95 }}\n                                  className=\"p-1.5 rounded-lg bg-destructive/10\"\n                                >\n                                  <LogOut size={18} />\n                                </motion.div>\n                                <div className=\"flex-1 text-left\">\n                                  <span className=\"font-medium text-sm block\">Đăng Xuất</span>\n                                </div>\n                              </div>\n                            </a>\n                          </SidebarMenuButton>\n                        </SidebarMenuItem>\n                      </motion.div>\n                    </SidebarMenu>\n                  </motion.div>\n                </SidebarGroupContent>\n              </SidebarGroup>\n            </SidebarContent>\n          </Sidebar>\n        </motion.div>\n\n        {/* Main Content */}\n        <div className=\"flex flex-col flex-1 overflow-hidden min-w-0\">\n          {/* Header */}\n          <motion.header \n            className=\"flex items-center justify-between p-6 lg:p-8 border-b bg-background/95 backdrop-blur-xl sticky top-0 z-30\"\n            initial={{ y: -50, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ duration: 0.5 }}\n          >\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger \n                data-testid=\"button-sidebar-toggle\"\n                className=\"lg:hidden p-2 hover:bg-accent rounded-xl transition-colors\"\n                onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              >\n                {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}\n              </SidebarTrigger>\n              \n              <motion.div\n                className=\"flex items-center gap-3\"\n                whileHover={{ scale: 1.02 }}\n              >\n                <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-primary/70 rounded-xl flex items-center justify-center shadow-lg\">\n                  <Heart size={20} className=\"text-white\" fill=\"currentColor\" />\n                </div>\n                <div>\n                  <h1 className=\"font-serif text-2xl lg:text-3xl text-foreground font-bold\">\n                    Quản Lý Đám Cưới\n                  </h1>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Trang quản trị hệ thống\n                  </p>\n                </div>\n              </motion.div>\n            </div>\n\n            <div className=\"flex items-center gap-4\">\n              {/* Notifications */}\n              <Popover>\n                <PopoverTrigger asChild>\n                  <motion.div \n                    className=\"relative\"\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                  >\n                    <Button \n                      variant=\"ghost\" \n                      size=\"icon\" \n                      className=\"relative w-12 h-12 rounded-xl border border-border/50 hover:bg-accent/50\"\n                      data-testid=\"button-notifications\"\n                    >\n                      <Bell size={22} />\n                      {notifications > 0 && (\n                        <motion.span\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          className=\"absolute -top-1 -right-1 w-6 h-6 bg-destructive text-destructive-foreground text-xs rounded-full flex items-center justify-center font-medium border-2 border-background\"\n                        >\n                          {notifications}\n                        </motion.span>\n                      )}\n                    </Button>\n                  </motion.div>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-80 p-0\" align=\"end\">\n                  <div className=\"p-4 border-b bg-muted/50 flex items-center justify-between\">\n                    <div>\n                      <h3 className=\"font-semibold text-lg flex items-center gap-2\">\n                        <Bell size={18} />\n                        Thông Báo\n                      </h3>\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {notifications > 0 ? `Bạn có ${notifications} thông báo mới` : \"Không có thông báo mới\"}\n                      </p>\n                    </div>\n                    {notifications > 0 && (\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={markAllAsRead}\n                        className=\"text-xs\"\n                        data-testid=\"button-mark-all-read\"\n                      >\n                        <CheckCircle size={14} className=\"mr-1\" />\n                        Đọc hết\n                      </Button>\n                    )}\n                  </div>\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    {notifications === 0 ? (\n                      <div className=\"p-8 text-center text-muted-foreground\">\n                        <CheckCircle className=\"mx-auto mb-2\" size={32} />\n                        <p>Bạn đã xem hết thông báo</p>\n                      </div>\n                    ) : (\n                      <div className=\"divide-y\">\n                        {unviewedRsvps.length > 0 && (\n                          <div className=\"p-3\">\n                            <p className=\"text-xs font-semibold text-muted-foreground mb-2\">RSVP MỚI</p>\n                            {unviewedRsvps.map((rsvp) => (\n                              <Link \n                                key={rsvp.id} \n                                href=\"/admin/rsvps\"\n                                onClick={() => markAsRead(rsvp.id!, 'rsvp')}\n                              >\n                                <div className=\"p-2 hover:bg-muted rounded-lg cursor-pointer mb-1 relative\">\n                                  <div className=\"absolute left-0 top-1/2 -translate-y-1/2 w-1.5 h-1.5 bg-primary rounded-full\" />\n                                  <p className=\"text-sm font-medium pl-3\">{rsvp.guestName}</p>\n                                  <p className=\"text-xs text-muted-foreground pl-3\">\n                                    {rsvp.attending ? \"✅ Tham dự\" : \"❌ Từ chối\"} • {rsvp.guestCount} khách\n                                  </p>\n                                </div>\n                              </Link>\n                            ))}\n                          </div>\n                        )}\n                        {unviewedMessages.length > 0 && (\n                          <div className=\"p-3\">\n                            <p className=\"text-xs font-semibold text-muted-foreground mb-2\">LỜI CHÚC CHỜ DUYỆT</p>\n                            {unviewedMessages.map((msg) => (\n                              <Link \n                                key={msg.id} \n                                href=\"/admin/messages\"\n                                onClick={() => markAsRead(msg.id!, 'message')}\n                              >\n                                <div className=\"p-2 hover:bg-muted rounded-lg cursor-pointer mb-1 relative\">\n                                  <div className=\"absolute left-0 top-1/2 -translate-y-1/2 w-1.5 h-1.5 bg-primary rounded-full\" />\n                                  <p className=\"text-sm font-medium pl-3\">{msg.guestName}</p>\n                                  <p className=\"text-xs text-muted-foreground line-clamp-1 pl-3\">{msg.message}</p>\n                                </div>\n                              </Link>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </PopoverContent>\n              </Popover>\n\n              {/* User Profile */}\n              <motion.div\n                className=\"flex items-center gap-4 bg-card rounded-2xl px-5 py-3 border shadow-sm hover:shadow-md transition-shadow\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                transition={{ type: \"spring\", stiffness: 400 }}\n              >\n                <div className=\"w-12 h-12 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center border\">\n                  <User size={20} className=\"text-primary\" />\n                </div>\n                <div className=\"hidden sm:block text-left\">\n                  <p className=\"text-base font-semibold text-foreground\">\n                    {user?.name || \"Admin\"}\n                  </p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Quản trị viên\n                  </p>\n                </div>\n              </motion.div>\n            </div>\n          </motion.header>\n\n          {/* Main Content */}\n          <motion.main \n            className=\"flex-1 overflow-auto bg-gradient-to-br from-muted/30 via-background to-muted/20\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.6, delay: 0.2 }}\n            data-admin-page=\"true\"\n          >\n            <div className=\"max-w-7xl mx-auto w-full p-6 lg:p-8\" data-admin-page=\"true\">\n              <div className=\"bg-background/80 backdrop-blur-sm rounded-3xl border border-border/50 shadow-sm min-h-[calc(100vh-12rem)]\" data-admin-page=\"true\">\n                {children}\n              </div>\n            </div>\n          </motion.main>\n\n          {/* Footer */}\n          <motion.footer \n            className=\"p-6 border-t bg-background/80 backdrop-blur-lg\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n          >\n            <div className=\"max-w-7xl mx-auto w-full\">\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                <p className=\"flex items-center gap-2\">\n                  <Sparkles size={16} className=\"text-primary\" />\n                  Hệ thống quản lý đám cưới • {new Date().getFullYear()}\n                </p>\n                <p className=\"text-muted-foreground/70\">\n                  Made with 💝\n                </p>\n              </div>\n            </div>\n          </motion.footer>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":28825},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/lib/imageUpload.ts":{"content":"/**\n * Simple image upload utility\n * Converts image files to base64 data URLs for storage\n * Can be enhanced later with cloud storage (Cloudinary, AWS S3, etc.)\n */\n\nexport async function uploadImageToCloudinary(\n  file: File,\n  onProgress?: (progress: number) => void\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    // Validate file - accept both images and audio files\n    const isImage = file.type.startsWith('image/');\n    const isAudio = file.type.startsWith('audio/');\n    \n    if (!isImage && !isAudio) {\n      reject(new Error('File must be an image or audio file'));\n      return;\n    }\n\n    // Validate size - 5MB for images, 10MB for audio\n    const maxSize = isAudio ? 10 * 1024 * 1024 : 5 * 1024 * 1024;\n    const maxSizeLabel = isAudio ? '10MB' : '5MB';\n    \n    if (file.size > maxSize) {\n      reject(new Error(`File size must be less than ${maxSizeLabel}`));\n      return;\n    }\n\n    // Convert to base64\n    const reader = new FileReader();\n    \n    // Simulate progress if callback is provided\n    if (onProgress) {\n      let progress = 0;\n      const progressInterval = setInterval(() => {\n        progress += 10;\n        if (progress < 90) {\n          onProgress(progress);\n        } else {\n          clearInterval(progressInterval);\n        }\n      }, 50);\n      \n      reader.onload = () => {\n        clearInterval(progressInterval);\n        onProgress(100);\n        const result = reader.result as string;\n        resolve(result);\n      };\n      \n      reader.onerror = () => {\n        clearInterval(progressInterval);\n        reject(new Error('Failed to read image file'));\n      };\n    } else {\n      reader.onload = () => {\n        const result = reader.result as string;\n        resolve(result);\n      };\n      \n      reader.onerror = () => {\n        reject(new Error('Failed to read image file'));\n      };\n    }\n    \n    reader.readAsDataURL(file);\n  });\n}\n\n/**\n * Validate if a string is a valid image URL\n */\nexport function isValidImageUrl(url: string): boolean {\n  try {\n    const urlObj = new URL(url);\n    return /\\.(jpg|jpeg|png|gif|webp|svg)$/i.test(urlObj.pathname) || url.startsWith('data:image/');\n  } catch {\n    return url.startsWith('data:image/') || url.startsWith('/');\n  }\n}\n","size_bytes":2244},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/motion-button.tsx":{"content":"import { forwardRef } from \"react\";\nimport { motion, type HTMLMotionProps } from \"framer-motion\";\nimport { buttonVariants, type ButtonProps } from \"./button\";\nimport { type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MotionButtonProps\n  extends Omit<HTMLMotionProps<\"button\">, \"children\">,\n    VariantProps<typeof buttonVariants> {\n  children?: React.ReactNode;\n}\n\nexport const MotionButton = forwardRef<HTMLButtonElement, MotionButtonProps>(\n  ({ className, variant, size, children, ...props }, ref) => {\n    return (\n      <motion.button\n        ref={ref}\n        className={cn(buttonVariants({ variant, size, className }))}\n        {...props}\n      >\n        {children}\n      </motion.button>\n    );\n  }\n);\n\nMotionButton.displayName = \"MotionButton\";\n","size_bytes":803},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"VERCEL_SETUP.md":{"content":"# 🚀 Hướng Dẫn Deploy Lên Vercel - Chi Tiết\n\n## ⚠️ LỖI BẠN ĐANG GẶP\n\nNếu bạn thấy lỗi này trên website:\n```\n500: A server error has occurred\nFUNCTION_INVOCATION_FAILED\n```\n\n**Nguyên nhân**: Environment variables (DATABASE_URL, SESSION_SECRET, etc.) chưa được thiết lập trong Vercel Dashboard.\n\n---\n\n## 📋 Checklist Trước Khi Deploy\n\n- [ ] Đã có Neon PostgreSQL database\n- [ ] Đã chạy migrations: `npm run db:push` \n- [ ] Đã seed dữ liệu mẫu: `npx tsx server/seed.ts`\n- [ ] Code đã được push lên GitHub\n- [ ] Đã có tài khoản Vercel\n\n---\n\n## 🔧 BƯỚC 1: Chuẩn Bị Environment Variables\n\n### 1.1. Lấy DATABASE_URL từ Neon\n\nBạn đã có connection string này:\n```\npostgresql://neondb_owner:npg_LyNricmhG15A@ep-lingering-grass-a4djzzir-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require\n```\n\n**Quan trọng**: Xóa `&channel_binding=require` ở cuối (có thể gây lỗi):\n```\npostgresql://neondb_owner:npg_LyNricmhG15A@ep-lingering-grass-a4djzzir-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require\n```\n\n### 1.2. Tạo SESSION_SECRET Mới\n\nChạy lệnh sau trong terminal để generate secret key an toàn:\n\n**Windows PowerShell**:\n```powershell\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\n**Mac/Linux**:\n```bash\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\n**Kết quả** (ví dụ):\n```\na8f5f167f44f4964e6c998dee827110c47f5f167f44f4964e6c998dee827110c\n```\n\nCopy kết quả này - bạn sẽ dùng nó làm SESSION_SECRET.\n\n---\n\n## 🌐 BƯỚC 2: Set Environment Variables Trong Vercel\n\n### Cách 1: Qua Vercel Dashboard (Khuyến Nghị)\n\n#### Bước 2.1: Vào Project Settings\n\n1. Đăng nhập vào [Vercel Dashboard](https://vercel.com/dashboard)\n2. Click vào project **wedding-site-one-ruddy**\n3. Click tab **\"Settings\"** (góc trên cùng)\n4. Bên trái, click **\"Environment Variables\"**\n\n![Vercel Settings](../attached_assets/stock_images/vercel_dashboard_set_d4dd2e18.jpg)\n\n#### Bước 2.2: Thêm DATABASE_URL\n\n1. Click nút **\"Add New\"** hoặc **\"Add Environment Variable\"**\n2. Điền thông tin:\n   - **Key (Tên biến)**: `DATABASE_URL`\n   - **Value (Giá trị)**: \n     ```\n     postgresql://neondb_owner:npg_LyNricmhG15A@ep-lingering-grass-a4djzzir-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require\n     ```\n   - **Environments** (Môi trường): ✅ Chọn **ALL** (Production, Preview, Development)\n3. Click **\"Save\"**\n\n#### Bước 2.3: Thêm SESSION_SECRET\n\n1. Click **\"Add New\"** lần nữa\n2. Điền:\n   - **Key**: `SESSION_SECRET`\n   - **Value**: (Session secret bạn vừa generate ở Bước 1.2)\n   - **Environments**: ✅ Chọn **ALL**\n3. Click **\"Save\"**\n\n#### Bước 2.4: Thêm NODE_ENV\n\n1. Click **\"Add New\"**\n2. Điền:\n   - **Key**: `NODE_ENV`\n   - **Value**: `production`\n   - **Environments**: ✅ Chỉ chọn **Production**\n3. Click **\"Save\"**\n\n#### Bước 2.5: Thêm ALLOWED_ORIGINS\n\n1. Click **\"Add New\"**\n2. Điền:\n   - **Key**: `ALLOWED_ORIGINS`\n   - **Value**: `https://wedding-site-one-ruddy.vercel.app`\n   - **Environments**: ✅ Chọn **ALL**\n3. Click **\"Save\"**\n\n**Lưu ý**: Nếu bạn có custom domain sau này, thêm domain đó vào với dấu phẩy:\n```\nhttps://wedding-site-one-ruddy.vercel.app,https://your-custom-domain.com\n```\n\n---\n\n### Cách 2: Qua Vercel CLI (Nâng Cao)\n\nNếu bạn thích dùng terminal:\n\n```bash\n# Cài đặt Vercel CLI (nếu chưa có)\nnpm install -g vercel\n\n# Login vào Vercel\nvercel login\n\n# Link project\nvercel link\n\n# Thêm environment variables\nvercel env add DATABASE_URL production\n# Paste connection string khi được hỏi\n\nvercel env add SESSION_SECRET production\n# Paste session secret khi được hỏi\n\nvercel env add NODE_ENV production\n# Type: production\n\nvercel env add ALLOWED_ORIGINS production\n# Type: https://wedding-site-one-ruddy.vercel.app\n```\n\n---\n\n## 🔄 BƯỚC 3: Redeploy Website\n\n**QUAN TRỌNG**: Environment variables chỉ có hiệu lực sau khi redeploy!\n\n### Cách 1: Redeploy Qua Dashboard\n\n1. Vào Vercel Dashboard → Project **wedding-site-one-ruddy**\n2. Click tab **\"Deployments\"**\n3. Tìm deployment mới nhất (ở đầu danh sách)\n4. Click vào **3 chấm (⋮)** bên phải\n5. Chọn **\"Redeploy\"**\n6. Chọn **\"Use existing Build Cache\"** (để deploy nhanh hơn)\n7. Click **\"Redeploy\"**\n\n### Cách 2: Push Code Mới (Tự Động Deploy)\n\nNếu bạn muốn deploy code mới nhất từ Replit:\n\n```bash\n# Commit changes\ngit add .\ngit commit -m \"fix: Optimize database connection for Vercel serverless\"\n\n# Push to GitHub\ngit push origin main\n```\n\nVercel sẽ tự động deploy sau vài giây.\n\n---\n\n## ✅ BƯỚC 4: Kiểm Tra Website\n\n### 4.1. Đợi Deploy Hoàn Thành\n\n- Vào Vercel Dashboard → **Deployments**\n- Đợi cho đến khi status là **\"Ready\"** (màu xanh)\n- Thường mất khoảng 1-2 phút\n\n### 4.2. Test Website\n\nMở các trang sau và kiểm tra:\n\n1. **Homepage**: https://wedding-site-one-ruddy.vercel.app/\n   - ✅ Có dữ liệu couple info\n   - ✅ Có lịch trình sự kiện\n   - ✅ Có ảnh trong gallery\n   - ✅ Không còn lỗi 500\n\n2. **Admin Login**: https://wedding-site-one-ruddy.vercel.app/login\n   - ✅ Có thể đăng nhập với:\n     - Username: `admin`\n     - Password: `admin123`\n   - ✅ Sau khi login, redirect về `/admin/dashboard`\n\n3. **Admin Dashboard**: https://wedding-site-one-ruddy.vercel.app/admin/dashboard\n   - ✅ Thấy statistics (số RSVPs, messages, photos, etc.)\n   - ✅ Có thể navigate giữa các tab\n\n### 4.3. Đổi Mật Khẩu Admin (BẮT BUỘC!)\n\n**NGAY SAU KHI LOGIN THÀNH CÔNG**, đổi mật khẩu admin:\n\n1. Vào Admin Dashboard\n2. Click **\"Cài Đặt\"** hoặc **\"Settings\"**\n3. Tìm phần **\"Đổi Mật Khẩu\"** hoặc **\"Change Password\"**\n4. Đổi từ `admin123` sang mật khẩu mạnh của bạn\n5. **LƯU NGAY** mật khẩu mới vào nơi an toàn!\n\n---\n\n## 🐛 Troubleshooting - Giải Quyết Lỗi\n\n### ❌ Lỗi 1: Vẫn Thấy \"500: FUNCTION_INVOCATION_FAILED\"\n\n**Nguyên nhân**: \n- Environment variables chưa được lưu đúng\n- Hoặc chưa redeploy sau khi thêm env vars\n\n**Giải pháp**:\n1. Kiểm tra lại environment variables trong Vercel Settings\n2. Đảm bảo đã chọn **Production** environment cho tất cả variables\n3. **Redeploy** lại website (Bước 3)\n4. Xóa cache trình duyệt (Ctrl+Shift+R hoặc Cmd+Shift+R)\n\n### ❌ Lỗi 2: \"Cannot read properties of undefined\"\n\n**Nguyên nhân**: Database connection thành công nhưng chưa có data\n\n**Giải pháp**:\n```bash\n# Chạy seed script trên production database\nDATABASE_URL=\"postgresql://neondb_owner:npg_LyNricmhG15A@ep-lingering-grass-a4djzzir-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require\" npx tsx server/seed.ts\n```\n\n### ❌ Lỗi 3: \"too many connections for role\"\n\n**Nguyên nhân**: Quá nhiều connections đến database\n\n**Giải pháp**: \n- ✅ Đã được fix trong code mới (max: 1 connection)\n- Nếu vẫn gặp, vào Neon Console và terminate idle connections\n- Hoặc upgrade Neon plan để tăng connection limit\n\n### ❌ Lỗi 4: Admin Login Không Hoạt Động\n\n**Nguyên nhân**: SESSION_SECRET chưa được set\n\n**Giải pháp**:\n1. Kiểm tra SESSION_SECRET trong Vercel Environment Variables\n2. Phải có độ dài tối thiểu 32 ký tự\n3. Redeploy sau khi thêm/sửa\n\n### ❌ Lỗi 5: CORS Error Khi Gọi API\n\n**Nguyên nhân**: ALLOWED_ORIGINS không đúng\n\n**Giải pháp**:\n```\nALLOWED_ORIGINS=https://wedding-site-one-ruddy.vercel.app\n```\nKhông được có trailing slash `/` ở cuối!\n\n---\n\n## 📊 Kiểm Tra Deployment Logs\n\nNếu gặp lỗi khó hiểu, check logs:\n\n### Vercel Dashboard:\n1. Vào Project → **Deployments**\n2. Click vào deployment có lỗi\n3. Click tab **\"Functions\"**\n4. Click vào `api/index.js`\n5. Xem **\"Logs\"** để tìm error message chi tiết\n\n### Real-time Logs:\n```bash\n# Cài Vercel CLI nếu chưa có\nnpm install -g vercel\n\n# Xem logs real-time\nvercel logs wedding-site-one-ruddy --follow\n```\n\n---\n\n## 🎯 Checklist Sau Deploy Thành Công\n\n- [ ] Homepage load được dữ liệu (couple info, events, photos)\n- [ ] Admin login hoạt động (username: admin, password: admin123)\n- [ ] Dashboard hiển thị statistics\n- [ ] Đã đổi mật khẩu admin thành mật khẩu mạnh\n- [ ] RSVP form hoạt động (thử submit test RSVP)\n- [ ] Guest messages hoạt động (thử gửi test message)\n- [ ] Photo gallery load được ảnh\n- [ ] Music player hoạt động (nếu có upload nhạc)\n- [ ] Responsive trên mobile (test bằng điện thoại)\n\n---\n\n## 🔐 Bảo Mật\n\n### ⚠️ Các Lưu Ý Quan Trọng:\n\n1. **ĐỔI MẬT KHẨU ADMIN NGAY** sau khi deploy thành công\n2. **KHÔNG CHIA SẺ** SESSION_SECRET với ai\n3. **KHÔNG COMMIT** `.env` file lên GitHub\n4. **BACKUP DATABASE** thường xuyên qua Neon Console\n5. **SỬ DỤNG HTTPS** cho mọi request (Vercel tự động)\n\n### Tạo Backup Database:\n\n```bash\n# Cài pg_dump (PostgreSQL client)\n# Windows: Download từ https://www.postgresql.org/download/windows/\n# Mac: brew install postgresql\n# Linux: sudo apt install postgresql-client\n\n# Backup database\npg_dump \"postgresql://neondb_owner:npg_LyNricmhG15A@ep-lingering-grass-a4djzzir-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require\" > backup_$(date +%Y%m%d).sql\n```\n\n---\n\n## 📞 Hỗ Trợ\n\nNếu vẫn gặp vấn đề:\n\n1. **Check logs** trong Vercel Dashboard\n2. **Check network tab** trong Chrome DevTools (F12)\n3. **Thử lại** từ đầu với checklist ở trên\n4. **Liên hệ** support nếu cần help\n\n---\n\n## 🎉 Chúc Mừng!\n\nNếu tất cả đều hoạt động, website đám cưới của bạn đã sẵn sàng!\n\n**Next Steps**:\n1. Upload ảnh thật của bạn thay ảnh mẫu\n2. Cập nhật thông tin couple (tên, ngày cưới, địa điểm)\n3. Thêm wedding party members\n4. Upload nhạc yêu thích\n5. Tùy chỉnh theme và colors\n6. Chia sẻ link với gia đình và bạn bè! 🎊\n\n---\n\n**Website của bạn**: https://wedding-site-one-ruddy.vercel.app  \n**Admin panel**: https://wedding-site-one-ruddy.vercel.app/login\n\nGood luck và chúc bạn có một đám cưới thật tuyệt vời! 💕\n","size_bytes":10370},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"README.md":{"content":"# 💍 Website Đám Cưới - Vietnamese Wedding Website\n\n<div align=\"center\">\n\n![Version](https://img.shields.io/badge/version-1.3.0-blue?style=for-the-badge)\n![React](https://img.shields.io/badge/React-18.3-61DAFB?style=for-the-badge&logo=react&logoColor=black)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.6-3178C6?style=for-the-badge&logo=typescript&logoColor=white)\n![PostgreSQL](https://img.shields.io/badge/PostgreSQL-Neon-4169E1?style=for-the-badge&logo=postgresql&logoColor=white)\n\n**🎊 Nền tảng quản lý đám cưới chuyên nghiệp dành cho người Việt 🎊**\n\n</div>\n\n---\n\n## 📋 Mục Lục\n\n- [✨ Tính Năng Chính](#-tính-năng-chính)\n- [🚀 Cài Đặt Nhanh](#-cài-đặt-nhanh)\n- [🛠️ Công Nghệ](#%EF%B8%8F-công-nghệ)\n- [📱 Deploy lên Production](#-deploy-lên-production)\n- [📚 Version History](#-version-history)\n- [🐛 Troubleshooting](#-troubleshooting)\n\n---\n\n## ✨ Tính Năng Chính\n\n### 🎨 Giao Diện & Trải Nghiệm\n- ✅ Thiết kế responsive hoàn hảo (Mobile, Tablet, Desktop)\n- ✅ Animations mượt mà với Framer Motion\n- ✅ Dark Mode tự động\n- ✅ Loading screen với countdown\n- ✅ Popup hệ thống (chào mừng, cuối trang)\n\n### 🎵 Media & Gallery\n- ✅ Music Player thông minh với autoplay (sau user interaction)\n- ✅ Upload nhạc MP3/WAV từ thiết bị (max 10MB)\n- ✅ Gallery 3D với lightbox\n- ✅ Upload ảnh từ thiết bị hoặc Cloudinary\n- ✅ Hiển thị ảnh với object-contain (giữ nguyên tỷ lệ, không crop)\n\n### 💌 Tương Tác Khách Mời\n- ✅ RSVP Form (Xác nhận tham dự) với deadline tự động\n- ✅ Gửi lời chúc với hệ thống kiểm duyệt\n- ✅ Upload ảnh từ khách mời (Guest Photo Upload)\n- ✅ Gallery ảnh khách mời (Guest Photo Gallery)\n- ✅ Nút xem livestream bên cạnh RSVP (khi có livestream active)\n\n### 📺 Livestream\n- ✅ Tích hợp YouTube & Facebook livestream\n- ✅ Autoplay với muted (tuân thủ browser policies)\n- ✅ Bật/tắt livestream từ admin panel\n- ✅ Hiển thị trạng thái LIVE\n\n### 💰 Gift Money Tracking\n- ✅ Theo dõi mừng cưới (tiền mặt/chuyển khoản)\n- ✅ QR Code mừng cưới (cô dâu & chú rể)\n- ✅ Thống kê tổng số tiền nhận được\n- ✅ Export danh sách mừng cưới\n\n### ⚙️ Admin Panel\n- ✅ Dashboard tổng quan với biểu đồ\n- ✅ Quản lý toàn bộ nội dung website\n- ✅ Upload ảnh/nhạc từ thiết bị (hỗ trợ multiple files)\n- ✅ Phê duyệt tin nhắn, ảnh khách mời\n- ✅ Export RSVP list sang CSV (UTF-8 BOM)\n- ✅ Bảo mật với Passport.js + Bcrypt\n\n---\n\n## 🚀 Cài Đặt Nhanh\n\n### 📦 Yêu Cầu\n- Node.js 20.x+\n- PostgreSQL (khuyên dùng Neon DB - miễn phí)\n- Git\n\n### ⚡ Quick Start\n\n#### 🪟 **Windows Users** - Chạy file tự động:\n```batch\nsetup.bat\n```\nFile `setup.bat` sẽ tự động:\n1. Kiểm tra Node.js\n2. Cài đặt dependencies\n3. Tạo file `.env`\n4. Hướng dẫn setup database\n5. Chạy website\n\nLần sau chỉ cần chạy:\n```batch\nstart.bat\n```\n\n#### 🐧 **Linux/Mac Users** - Cài đặt thủ công:\n\n```bash\n# 1. Clone repository\ngit clone https://github.com/F12FLASH/WeddingSite.git\ncd WeddingSite\n\n# 2. Cài đặt dependencies\nnpm install\n\n# 3. Tạo file .env\ncp .env.example .env\n# Chỉnh sửa .env với DATABASE_URL và SESSION_SECRET của bạn\n\n# 4. Setup database\nnpm run db:push\n\n# 5. Seed dữ liệu mẫu\nnpx tsx server/seed.ts\n\n# 6. Chạy website\nnpm run dev\n```\n\nWebsite sẽ chạy tại: **http://localhost:5000**\n\n**Admin Login**: \n- Username: `admin`\n- Password: `admin123`\n\n⚠️ **Nhớ đổi mật khẩu ngay sau lần đăng nhập đầu tiên!**\n\n---\n\n## 🛠️ Công Nghệ\n\n### Frontend\n- **React 18.3** - UI library\n- **TypeScript 5.6** - Type safety\n- **Vite 5.4** - Build tool\n- **Tailwind CSS 3.4** - Utility-first CSS\n- **Framer Motion 11.13** - Animations\n- **Shadcn/UI** - Component library\n- **TanStack Query 5.60** - Data fetching\n- **Wouter 3.3** - Routing\n\n### Backend\n- **Node.js 20.x** - Runtime\n- **Express.js 4.21** - Web framework\n- **PostgreSQL** - Database\n- **Drizzle ORM 0.39** - Type-safe ORM\n- **Passport.js 0.7** - Authentication\n- **Bcrypt 6.0** - Password hashing\n\n---\n\n## 📱 Deploy lên Production\n\n### Vercel (Khuyên dùng - Miễn phí)\n\n1. **Tạo Neon Database cho Production**\n   - Truy cập [Neon Console](https://console.neon.tech/)\n   - Tạo project mới\n   - Copy connection string\n\n2. **Push code lên GitHub**\n   ```bash\n   git init\n   git add .\n   git commit -m \"Initial commit\"\n   git remote add origin https://github.com/username/repo.git\n   git push -u origin main\n   ```\n\n3. **Deploy trên Vercel**\n   - Truy cập [Vercel](https://vercel.com/)\n   - Import repository từ GitHub\n   - Cấu hình Environment Variables:\n     - `DATABASE_URL` - Connection string từ Neon\n     - `SESSION_SECRET` - Random 64-char string\n     - `NODE_ENV` - `production`\n   - Click \"Deploy\"\n\n4. **Run Database Migration**\n   ```bash\n   DATABASE_URL=\"your_prod_url\" npm run db:push\n   DATABASE_URL=\"your_prod_url\" npx tsx server/seed.ts\n   ```\n\n5. **Test và đổi mật khẩu admin**\n\nChi tiết deployment: Xem phần \"Deploy\" trong file README cũ hoặc documentation folder.\n\n---\n\n## 📚 Version History\n\n### 🎯 v1.3.0 - Latest (October 2025)\n**🎨 UI/UX Improvements & Bug Fixes**\n\n**New Features:**\n- ✅ Thêm nút \"Xem Livestream\" bên cạnh nút RSVP (khi livestream active)\n- ✅ Support multiple image uploads cho admin panels\n- ✅ Autoplay cho livestream và music player (tuân thủ browser policies)\n\n**Improvements:**\n- ✅ Thu hẹp navigation menu spacing (px-5 → px-3, gap-1 → gap-0.5)\n- ✅ Sửa lỗi hiển thị ảnh - dùng object-contain thay vì object-cover (giữ nguyên tỷ lệ)\n- ✅ Di chuyển Guest Photo sections xuống dưới Gallery section\n- ✅ Bỏ Registry section (sổ mừng cưới) khỏi landing page\n\n**Technical:**\n- ✅ Music player tự động phát sau user interaction (click/touch/scroll)\n- ✅ Livestream autoplay với muted parameter\n- ✅ Setup script cho Windows (.bat files)\n- ✅ Comprehensive README với version history\n\n**Files Changed:**\n- `client/src/components/MusicPlayer.tsx` - Added auto-play logic\n- `client/src/components/Livestream.tsx` - Added autoplay params\n- `client/src/components/RSVP.tsx` - Added livestream button\n- `client/src/components/Gallery.tsx` - Changed object-cover to object-contain\n- `client/src/components/GuestPhotoGallery.tsx` - Changed object-cover to object-contain\n- `client/src/components/Navigation.tsx` - Reduced spacing\n- `client/src/pages/Landing.tsx` - Reorganized sections, removed Registry\n- `client/src/pages/AdminGallery.tsx` - Added multiple file upload\n- `README.md` - Complete rewrite with versioning\n- `setup.bat`, `start.bat` - Windows automation scripts\n\n---\n\n### 🎁 v1.2.0 (Previous Version)\n**Gift Money Tracking & Guest Photos**\n\n**New Features:**\n- ✅ Gift Money tracking system (tiền mừng cưới)\n- ✅ Guest Photo upload with approval system\n- ✅ Livestream management (YouTube & Facebook)\n- ✅ Admin photo approval workflow\n\n**Database Changes:**\n- Added `gift_money` table\n- Added `guest_photos` table\n- Added `livestream_info` table\n\n**Files Added:**\n- `client/src/pages/AdminGiftMoney.tsx`\n- `client/src/pages/AdminGuestPhotos.tsx`\n- `client/src/pages/AdminLivestream.tsx`\n- `client/src/components/GuestPhotoUpload.tsx`\n- `client/src/components/GuestPhotoGallery.tsx`\n- `client/src/components/Livestream.tsx`\n\n---\n\n### 🎨 v1.1.0\n**Enhanced UI/UX & Media Features**\n\n**New Features:**\n- ✅ 3D Gallery với lightbox\n- ✅ Music player với upload từ thiết bị\n- ✅ Popup system (welcome & footer popups)\n- ✅ Dark mode support\n- ✅ Loading screen với countdown\n\n**Improvements:**\n- ✅ Improved animations với Framer Motion\n- ✅ Better responsive design\n- ✅ Enhanced admin dashboard\n- ✅ Cloudinary integration cho upload ảnh\n\n---\n\n### 🎉 v1.0.0 - Initial Release\n**Core Wedding Website Features**\n\n**Features:**\n- ✅ Landing page với hero section\n- ✅ Couple information management\n- ✅ RSVP system với deadline\n- ✅ Guest message system với approval\n- ✅ Photo gallery\n- ✅ Schedule events\n- ✅ Location với Google Maps\n- ✅ Wedding party management\n- ✅ Admin authentication\n- ✅ Admin dashboard\n- ✅ PostgreSQL database với Drizzle ORM\n- ✅ Responsive design\n- ✅ Session management\n\n**Tech Stack:**\n- React 18 + TypeScript\n- Express.js backend\n- PostgreSQL database\n- Tailwind CSS\n- Framer Motion\n- Shadcn/UI components\n\n---\n\n## 🐛 Troubleshooting\n\n### ❌ Lỗi: \"Cannot load data\"\n**Nguyên nhân**: Database connection issue\n\n**Giải pháp**:\n1. Kiểm tra `DATABASE_URL` trong `.env`\n2. Đảm bảo PostgreSQL đang chạy\n3. Chạy lại `npm run db:push`\n\n### ❌ Lỗi: Build Failed\n**Nguyên nhân**: Dependency issues\n\n**Giải pháp**:\n```bash\nrm -rf node_modules package-lock.json\nnpm install\nnpm run build\n```\n\n### ❌ Lỗi: Admin login không được\n**Nguyên nhân**: Session issue\n\n**Giải pháp**:\n1. Kiểm tra `SESSION_SECRET` trong `.env`\n2. Clear browser cache\n3. Thử incognito mode\n4. Check database sessions table:\n   ```sql\n   SELECT * FROM sessions;\n   ```\n\n### ❌ Lỗi: Nhạc/Livestream không tự động phát\n**Nguyên nhân**: Browser autoplay policies\n\n**Giải pháp**:\n- Đây là hành vi bình thường của browsers hiện đại\n- Nhạc/video sẽ tự động phát sau khi user có interaction đầu tiên (click/scroll)\n- Để test: Click anywhere trên trang hoặc scroll\n\n### 🪟 Windows Setup Issues\n\n**Lỗi: \"npm not found\"**\n- Cài đặt Node.js từ [nodejs.org](https://nodejs.org/)\n- Restart terminal/command prompt\n\n**Lỗi: \"Permission denied\"**\n- Chạy Command Prompt với quyền Administrator\n- Hoặc dùng PowerShell: `Set-ExecutionPolicy RemoteSigned`\n\n---\n\n## 📞 Support & Documentation\n\n- **Full Documentation**: Xem folder `/docs` (nếu có)\n- **Issues**: [GitHub Issues](https://github.com/F12FLASH/WeddingSite/issues)\n- **Email**: support@example.com\n\n---\n\n## 📄 License\n\nMIT License - Tự do sử dụng cho mục đích cá nhân và thương mại.\n\n---\n\n## 💝 Credits\n\nDeveloped with ❤️ for Vietnamese weddings.\n\n**Special Thanks:**\n- Shadcn/UI for beautiful components\n- Vercel for free hosting\n- Neon for serverless PostgreSQL\n- All open-source contributors\n\n---\n\n<div align=\"center\">\n\n**🎊 Chúc bạn một đám cưới thật hoàn hảo! 🎊**\n\nMade with 💕 in Vietnam\n\n</div>\n","size_bytes":10641},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"server/backup.ts":{"content":"import { db } from \"./db\";\nimport { users, coupleInfo, scheduleEvents, photos, guestMessages, rsvps, registryItems, settings, weddingParty, faqs, popups } from \"@shared/schema\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n/**\n * Database Backup Script\n * Creates a complete backup of all database tables in JSON format\n * Run with: npx tsx server/backup.ts\n */\n\nasync function backupDatabase() {\n  try {\n    console.log(\"🚀 Starting database backup...\");\n    \n    const backup = {\n      timestamp: new Date().toISOString(),\n      data: {\n        users: await db.select().from(users),\n        coupleInfo: await db.select().from(coupleInfo),\n        scheduleEvents: await db.select().from(scheduleEvents),\n        photos: await db.select().from(photos),\n        guestMessages: await db.select().from(guestMessages),\n        rsvps: await db.select().from(rsvps),\n        registryItems: await db.select().from(registryItems),\n        settings: await db.select().from(settings),\n        weddingParty: await db.select().from(weddingParty),\n        faqs: await db.select().from(faqs),\n        popups: await db.select().from(popups),\n      },\n    };\n\n    const backupDir = path.join(process.cwd(), \"backups\");\n    if (!fs.existsSync(backupDir)) {\n      fs.mkdirSync(backupDir, { recursive: true });\n    }\n\n    const filename = `wedding-db-backup-${new Date().toISOString().replace(/:/g, '-').split('.')[0]}.json`;\n    const filepath = path.join(backupDir, filename);\n\n    fs.writeFileSync(filepath, JSON.stringify(backup, null, 2));\n\n    console.log(\"✅ Database backup completed successfully!\");\n    console.log(`📁 Backup file: ${filepath}`);\n    console.log(`📊 Total records:`);\n    console.log(`   - Users: ${backup.data.users.length}`);\n    console.log(`   - Couple Info: ${backup.data.coupleInfo.length}`);\n    console.log(`   - Schedule Events: ${backup.data.scheduleEvents.length}`);\n    console.log(`   - Photos: ${backup.data.photos.length}`);\n    console.log(`   - Guest Messages: ${backup.data.guestMessages.length}`);\n    console.log(`   - RSVPs: ${backup.data.rsvps.length}`);\n    console.log(`   - Registry Items: ${backup.data.registryItems.length}`);\n    console.log(`   - Settings: ${backup.data.settings.length}`);\n    console.log(`   - Wedding Party: ${backup.data.weddingParty.length}`);\n    console.log(`   - FAQs: ${backup.data.faqs.length}`);\n    console.log(`   - Popups: ${backup.data.popups.length}`);\n\n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ Error creating backup:\", error);\n    process.exit(1);\n  }\n}\n\nbackupDatabase();\n","size_bytes":2586},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"scripts/refresh_database.ts":{"content":"import { storage } from \"../server/storage\";\nimport { readFileSync } from \"fs\";\nimport { join, dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nasync function refreshDatabase() {\n  console.log(\"🔄 Làm mới database với ảnh thực...\\n\");\n\n  // Load image data\n  const imagePath = join(__dirname, 'image_data.json');\n  const imageData = JSON.parse(readFileSync(imagePath, \"utf-8\"));\n  \n  console.log(\"📸 Đã tải dữ liệu ảnh:\");\n  console.log(`  - ${Object.keys(imageData.album || {}).length} ảnh album`);\n  console.log(`  - ${Object.keys(imageData.avatar || {}).length} ảnh avatar`);\n  console.log(`  - ${Object.keys(imageData.background || {}).length} ảnh nền`);\n  console.log(`  - ${Object.keys(imageData.venue || {}).length} ảnh nhà hàng`);\n  console.log(`  - ${Object.keys(imageData.bridesmaids || {}).length} ảnh phù dâu`);\n  console.log(`  - ${Object.keys(imageData.groomsmen || {}).length} ảnh phù rể`);\n  console.log(`  - ${Object.keys(imageData.qr || {}).length} ảnh QR code\\n`);\n\n  // Update couple info with real photos\n  await storage.upsertCoupleInfo({\n    brideName: \"Xuân Lâm\",\n    groomName: \"Xuân Lợi\",\n    bridePhoto: imageData.avatar[\"codau.jpg\"],\n    groomPhoto: imageData.avatar[\"chure.jpg\"],\n    brideDescription: \"Cô dâu Xuân Lâm - Người phụ nữ xinh đẹp, dịu dàng và tràn đầy năng lượng.\",\n    groomDescription: \"Chú rể Xuân Lợi - Chàng trai thông minh, trách nhiệm và luôn tươi cười.\",\n    ourStory: \"Chúng tôi gặp nhau lần đầu vào mùa xuân năm 2022. Từ cái nhìn đầu tiên, chúng tôi đã cảm nhận được sự kết nối đặc biệt. Sau những buổi hẹn hò lãng mạn, chúng tôi nhận ra rằng mình là người tri kỷ của nhau.\",\n    weddingDate: new Date(\"2026-01-01\"),\n    heroImage: imageData.background[\"anhnen.jpg\"],\n  });\n  console.log(\"✅ Cập nhật thông tin cô dâu chú rể\");\n\n  // Update settings with real venue image and QR codes\n  await storage.upsertSettings({\n    venueName: \"Rose Garden Estate\",\n    venueAddress: \"Khu đô thị Cổ Nhuế, Phường Cổ Nhuế 1, Quận Bắc Từ Liêm, Hà Nội\",\n    venueMapLink: \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3724.4803982916854!2d105.84117207503217!3d21.01332968063466\",\n    venuePhone: \"024 3868 9999\",\n    venueEmail: \"contact@rosegarden.vn\",\n    venueImage: imageData.venue[\"1.jpg\"],\n    eventStartTime: new Date(\"2026-01-01T17:00:00\"),\n    eventEndTime: new Date(\"2026-01-01T21:00:00\"),\n    backgroundMusicUrl: \"https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3\",\n    backgroundMusicType: \"upload\",\n    brideQrCodeUrl: imageData.qr[\"mungtiencodau.jpg\"],\n    groomQrCodeUrl: imageData.qr[\"mungtienchure.jpg\"],\n    brideBankInfo: \"Ngân hàng: Vietcombank\\nSố tài khoản: 1234567890\\nChủ tài khoản: Xuân Lâm\",\n    groomBankInfo: \"Ngân hàng: Techcombank\\nSố tài khoản: 0987654321\\nChủ tài khoản: Xuân Lợi\",\n  });\n  console.log(\"✅ Cập nhật thông tin địa điểm và QR code\");\n\n  // Clear existing photos and add real album photos\n  const existingPhotos = await storage.getAllPhotos();\n  for (const photo of existingPhotos) {\n    await storage.deletePhoto(photo.id);\n  }\n  \n  let order = 1;\n  for (const [filename, url] of Object.entries(imageData.album)) {\n    await storage.createPhoto({\n      url,\n      caption: `Ảnh cưới ${order}`,\n      category: \"wedding\",\n      order: order++,\n    });\n  }\n  console.log(`✅ Thêm ${Object.keys(imageData.album).length} ảnh album`);\n\n  // Update wedding party with real photos\n  const existingMembers = await storage.getAllWeddingParty();\n  for (const member of existingMembers) {\n    await storage.deleteWeddingPartyMember(member.id);\n  }\n\n  const bridesmaidsPhotos = Object.values(imageData.bridesmaids);\n  const groomsmenPhotos = Object.values(imageData.groomsmen);\n\n  const bridesmaids = [\n    { name: \"Nguyễn Thanh Tâm\", role: \"Phù Dâu\", description: \"Bạn thân từ thời cấp 2\", order: 1 },\n    { name: \"Trần Hồng Nhung\", role: \"Phù Dâu\", description: \"Chị em họ thân thiết\", order: 2 },\n    { name: \"Lê Thị Mai\", role: \"Phù Dâu\", description: \"Bạn học cùng lớp đại học\", order: 3 },\n  ];\n\n  const groomsmen = [\n    { name: \"Phạm Quốc Tuấn\", role: \"Phù Rể\", description: \"Bạn thân từ thuở nhỏ\", order: 4 },\n    { name: \"Vũ Minh Quân\", role: \"Phù Rể\", description: \"Đồng nghiệp thân thiết\", order: 5 },\n    { name: \"Hoàng Văn Nam\", role: \"Phù Rể\", description: \"Bạn cùng phòng đại học\", order: 6 },\n  ];\n\n  for (let i = 0; i < bridesmaids.length; i++) {\n    await storage.createWeddingPartyMember({\n      ...bridesmaids[i],\n      photoUrl: bridesmaidsPhotos[i] || bridesmaidsPhotos[0],\n    });\n  }\n\n  for (let i = 0; i < groomsmen.length; i++) {\n    await storage.createWeddingPartyMember({\n      ...groomsmen[i],\n      photoUrl: groomsmenPhotos[i] || groomsmenPhotos[0],\n    });\n  }\n  \n  console.log(`✅ Cập nhật ${bridesmaids.length + groomsmen.length} thành viên đoàn rước dâu`);\n\n  console.log(\"\\n🎉 Hoàn thành làm mới database với ảnh thực!\");\n}\n\nrefreshDatabase().catch(console.error);\n","size_bytes":5364},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/Gallery.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { X, ChevronLeft, ChevronRight, Heart, Download, Share2 } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport type { Photo } from \"@shared/schema\";\n\nexport default function Gallery() {\n  const [selectedPhoto, setSelectedPhoto] = useState<number | null>(null);\n  const [direction, setDirection] = useState(0);\n\n  const { data: photos = [], isLoading, isError, error } = useQuery<Photo[]>({\n    queryKey: [\"/api/photos\"],\n  });\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (selectedPhoto !== null) {\n        if (e.key === \"Escape\") closeLightbox();\n        if (e.key === \"ArrowRight\") {\n          setDirection(1);\n          nextPhoto();\n        }\n        if (e.key === \"ArrowLeft\") {\n          setDirection(-1);\n          prevPhoto();\n        }\n      }\n    };\n\n    window.addEventListener(\"keydown\", handleKeyDown);\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [selectedPhoto]);\n\n  const openLightbox = (index: number) => {\n    setSelectedPhoto(index);\n    setDirection(0);\n  };\n\n  const closeLightbox = () => setSelectedPhoto(null);\n\n  const nextPhoto = () => {\n    setDirection(1);\n    setSelectedPhoto((prev) => (prev !== null ? (prev + 1) % photos.length : 0));\n  };\n\n  const prevPhoto = () => {\n    setDirection(-1);\n    setSelectedPhoto((prev) =>\n      prev !== null ? (prev === 0 ? photos.length - 1 : prev - 1) : 0\n    );\n  };\n\n  const sharePhoto = async (photo: Photo) => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: \"Ảnh cưới Xuân Lâm & Xuân Lợi\",\n          text: photo.caption || \"Chia sẻ khoảnh khắc đặc biệt\",\n          url: photo.url,\n        });\n      } catch (err) {\n        console.log(\"Sharing cancelled\");\n      }\n    } else {\n      // Fallback: copy to clipboard\n      navigator.clipboard.writeText(photo.url);\n      // You can add a toast notification here\n    }\n  };\n\n  const downloadPhoto = async (url: string, filename: string) => {\n    try {\n      const response = await fetch(url);\n      const blob = await response.blob();\n      const downloadUrl = window.URL.createObjectURL(blob);\n      const link = document.createElement(\"a\");\n      link.href = downloadUrl;\n      link.download = filename;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(downloadUrl);\n    } catch (err) {\n      console.error(\"Download failed:\", err);\n    }\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { \n      opacity: 0, \n      scale: 0.3,\n      y: 100,\n      rotateX: -90,\n      rotateY: 20,\n      rotateZ: -15\n    },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      rotateX: 0,\n      rotateY: 0,\n      rotateZ: 0,\n      transition: {\n        type: \"spring\",\n        stiffness: 80,\n        damping: 12,\n        duration: 1.2,\n        ease: [0.6, 0.05, 0.01, 0.9]\n      }\n    }\n  };\n\n  const slideVariants = {\n    enter: (direction: number) => ({\n      x: direction > 0 ? 1000 : -1000,\n      opacity: 0,\n      scale: 0.8\n    }),\n    center: {\n      x: 0,\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    },\n    exit: (direction: number) => ({\n      x: direction < 0 ? 1000 : -1000,\n      opacity: 0,\n      scale: 0.8,\n      transition: {\n        duration: 0.3\n      }\n    })\n  };\n\n  return (\n    <section id=\"gallery\" className=\"py-20 md:py-32 px-4 bg-card overflow-hidden\">\n      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 50 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          transition={{ duration: 0.8 }}\n          viewport={{ once: true }}\n          className=\"text-center mb-16\"\n        >\n          <h2\n            className=\"font-serif text-4xl md:text-5xl mb-4 text-foreground\"\n            data-testid=\"heading-gallery\"\n          >\n            Album Ảnh\n          </h2>\n          <motion.div\n            className=\"w-24 h-1 bg-primary mx-auto mb-4\"\n            initial={{ width: 0 }}\n            whileInView={{ width: \"6rem\" }}\n            transition={{ duration: 0.8, delay: 0.3 }}\n            viewport={{ once: true }}\n          />\n          <motion.p\n            className=\"text-muted-foreground text-lg\"\n            initial={{ opacity: 0 }}\n            whileInView={{ opacity: 1 }}\n            transition={{ duration: 0.6, delay: 0.5 }}\n            viewport={{ once: true }}\n          >\n            Những kỷ niệm chúng tôi đã tạo ra cùng nhau\n          </motion.p>\n        </motion.div>\n\n        {/* Photo Carousel & Grid Hybrid */}\n        {isLoading ? (\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {[...Array(6)].map((_, i) => (\n              <motion.div\n                key={i}\n                variants={itemVariants}\n                className=\"rounded-2xl overflow-hidden bg-gradient-to-br from-muted to-muted/50 animate-pulse aspect-[4/3]\"\n                whileHover={{ scale: 1.02 }}\n                transition={{ duration: 0.3 }}\n              />\n            ))}\n          </motion.div>\n        ) : isError ? (\n          <motion.div\n            className=\"text-center py-16\"\n            initial={{ opacity: 0, scale: 0.8 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              animate={{ \n                scale: [1, 1.1, 1],\n                rotate: [0, -5, 5, 0]\n              }}\n              transition={{ duration: 2, repeat: Infinity }}\n            >\n              <Heart className=\"mx-auto mb-4 text-destructive\" size={64} />\n            </motion.div>\n            <p className=\"text-destructive text-lg mb-2\">Không thể tải ảnh</p>\n            <p className=\"text-muted-foreground\">\n              {error instanceof Error ? error.message : \"Vui lòng thử lại sau\"}\n            </p>\n          </motion.div>\n        ) : photos.length === 0 ? (\n          <motion.div\n            className=\"text-center py-16\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ duration: 0.6 }}\n          >\n            <motion.div\n              animate={{ \n                scale: [1, 1.2, 1],\n              }}\n              transition={{ duration: 3, repeat: Infinity }}\n            >\n              <Heart className=\"mx-auto mb-4 text-muted-foreground\" size={64} />\n            </motion.div>\n            <p className=\"text-muted-foreground text-lg\">Chưa có ảnh. Hãy quay lại sau!</p>\n          </motion.div>\n        ) : (\n          <motion.div\n            className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true, margin: \"-50px\" }}\n          >\n            {photos.map((photo, index) => (\n              <motion.div\n                key={photo.id}\n                variants={itemVariants}\n                className=\"group relative overflow-hidden rounded-3xl cursor-pointer shadow-2xl bg-background\"\n                style={{\n                  transformStyle: \"preserve-3d\",\n                  perspective: \"1500px\"\n                }}\n                whileHover={{ \n                  scale: 1.05,\n                  y: -20,\n                  rotateY: index % 2 === 0 ? 8 : -8,\n                  rotateX: -5,\n                  rotateZ: index % 3 === 0 ? 3 : index % 3 === 1 ? -3 : 0,\n                  zIndex: 20,\n                  boxShadow: \"0 40px 80px -15px rgba(0, 0, 0, 0.5)\",\n                }}\n                whileTap={{ \n                  scale: 0.90,\n                  rotateY: 0,\n                  rotateX: 0,\n                  rotateZ: 0\n                }}\n                transition={{ \n                  type: \"spring\", \n                  stiffness: 200, \n                  damping: 15,\n                  mass: 1\n                }}\n                onClick={() => openLightbox(index)}\n                data-testid={`photo-${index}`}\n              >\n                {/* Background Glow */}\n                <motion.div\n                  className=\"absolute -inset-1 bg-gradient-to-r from-primary via-pink-500 to-purple-500 rounded-3xl opacity-0 blur-xl\"\n                  whileHover={{ opacity: 0.6 }}\n                  transition={{ duration: 0.5 }}\n                />\n                \n                <motion.div\n                  className=\"relative w-full h-full overflow-hidden rounded-3xl\"\n                  style={{ transformStyle: \"preserve-3d\" }}\n                >\n                  {/* Image with Ken Burns Effect */}\n                  <motion.img\n                    src={photo.url}\n                    alt={photo.caption || \"Ảnh cưới\"}\n                    className=\"w-full h-auto object-contain\"\n                    style={{ transformStyle: \"preserve-3d\" }}\n                    initial={{ \n                      filter: \"brightness(0.95) saturate(0.95) contrast(1)\",\n                      scale: 1\n                    }}\n                    whileHover={{ \n                      filter: \"brightness(1.1) saturate(1.15) contrast(1.1)\",\n                      scale: 1.2\n                    }}\n                    transition={{ duration: 0.8, ease: [0.43, 0.13, 0.23, 0.96] }}\n                  />\n                  \n                  {/* Rainbow Shimmer Effect */}\n                  <motion.div\n                    className=\"absolute inset-0\"\n                    style={{\n                      background: \"linear-gradient(90deg, transparent, rgba(255,255,255,0.5), rgba(255,0,255,0.3), rgba(0,255,255,0.3), transparent)\",\n                      backgroundSize: \"200% 100%\"\n                    }}\n                    initial={{ backgroundPosition: \"-200% 0\", opacity: 0 }}\n                    whileHover={{ \n                      backgroundPosition: \"200% 0\", \n                      opacity: 0.8,\n                      transition: { duration: 1.5, ease: \"easeInOut\" }\n                    }}\n                  />\n                  \n                  {/* Radial Sparkle */}\n                  <motion.div\n                    className=\"absolute inset-0\"\n                    style={{\n                      background: \"radial-gradient(circle at center, rgba(255, 255, 255, 0.9) 0%, transparent 60%)\",\n                      mixBlendMode: \"soft-light\"\n                    }}\n                    initial={{ opacity: 0, scale: 0 }}\n                    whileHover={{ opacity: 0.6, scale: 1.5 }}\n                    transition={{ duration: 0.6 }}\n                  />\n\n                  {/* Floating Hearts */}\n                  <motion.div\n                    className=\"absolute inset-0 pointer-events-none\"\n                    initial={{ opacity: 0 }}\n                    whileHover={{ opacity: 1 }}\n                  >\n                    {[...Array(3)].map((_, i) => (\n                      <motion.div\n                        key={i}\n                        className=\"absolute text-primary/40\"\n                        style={{\n                          left: `${20 + i * 30}%`,\n                          bottom: \"10%\"\n                        }}\n                        animate={{\n                          y: [-20, -100],\n                          opacity: [0, 1, 0],\n                          scale: [0.5, 1, 0.5]\n                        }}\n                        transition={{\n                          duration: 2,\n                          delay: i * 0.3,\n                          repeat: Infinity,\n                          repeatDelay: 1\n                        }}\n                      >\n                        <Heart size={20} fill=\"currentColor\" />\n                      </motion.div>\n                    ))}\n                  </motion.div>\n                </motion.div>\n                \n                {/* Overlay with Gradient */}\n                <motion.div\n                  className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/40 to-transparent opacity-0 group-hover:opacity-100 rounded-3xl flex flex-col justify-end p-6\"\n                  initial={{ opacity: 0 }}\n                  whileHover={{ opacity: 1 }}\n                  transition={{ duration: 0.4 }}\n                >\n                  {photo.caption && (\n                    <motion.p\n                      className=\"text-white text-base font-semibold mb-3 drop-shadow-lg\"\n                      initial={{ y: 30, opacity: 0 }}\n                      whileHover={{ y: 0, opacity: 1 }}\n                      transition={{ delay: 0.1, duration: 0.3 }}\n                    >\n                      {photo.caption}\n                    </motion.p>\n                  )}\n                  <motion.div\n                    className=\"flex gap-3\"\n                    initial={{ y: 30, opacity: 0 }}\n                    whileHover={{ y: 0, opacity: 1 }}\n                    transition={{ delay: 0.15, duration: 0.3 }}\n                  >\n                    <motion.button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        sharePhoto(photo);\n                      }}\n                      className=\"p-3 bg-white/20 rounded-full backdrop-blur-md hover:bg-white/30 transition-colors\"\n                      whileHover={{ scale: 1.2, rotate: 15 }}\n                      whileTap={{ scale: 0.9 }}\n                    >\n                      <Share2 size={18} className=\"text-white\" />\n                    </motion.button>\n                  </motion.div>\n                </motion.div>\n              </motion.div>\n            ))}\n          </motion.div>\n        )}\n\n        {/* Lightbox Modal */}\n        <AnimatePresence mode=\"wait\" custom={direction}>\n          {selectedPhoto !== null && photos.length > 0 && (\n            <motion.div\n              className=\"fixed inset-0 bg-black/95 z-50 flex items-center justify-center p-4\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              onClick={closeLightbox}\n            >\n              {/* Close Button */}\n              <motion.button\n                onClick={closeLightbox}\n                className=\"absolute top-6 right-6 text-white hover:text-primary transition-colors p-3 rounded-full bg-white/10 backdrop-blur-sm z-10\"\n                data-testid=\"button-close-lightbox\"\n                whileHover={{ scale: 1.1, rotate: 90 }}\n                whileTap={{ scale: 0.9 }}\n              >\n                <X size={24} />\n              </motion.button>\n\n              {/* Navigation Buttons */}\n              <motion.button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  prevPhoto();\n                }}\n                className=\"absolute left-6 text-white hover:text-primary transition-colors p-3 rounded-full bg-white/10 backdrop-blur-sm z-10\"\n                data-testid=\"button-prev-photo\"\n                whileHover={{ scale: 1.1, x: -2 }}\n                whileTap={{ scale: 0.9 }}\n              >\n                <ChevronLeft size={32} />\n              </motion.button>\n\n              <motion.button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  nextPhoto();\n                }}\n                className=\"absolute right-6 text-white hover:text-primary transition-colors p-3 rounded-full bg-white/10 backdrop-blur-sm z-10\"\n                data-testid=\"button-next-photo\"\n                whileHover={{ scale: 1.1, x: 2 }}\n                whileTap={{ scale: 0.9 }}\n              >\n                <ChevronRight size={32} />\n              </motion.button>\n\n              {/* Action Buttons */}\n              <motion.button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  downloadPhoto(photos[selectedPhoto].url, `photo-${selectedPhoto + 1}.jpg`);\n                }}\n                className=\"absolute top-6 left-6 text-white hover:text-primary transition-colors p-3 rounded-full bg-white/10 backdrop-blur-sm z-10\"\n                whileHover={{ scale: 1.1 }}\n                whileTap={{ scale: 0.9 }}\n              >\n                <Download size={24} />\n              </motion.button>\n\n              {/* Photo Display */}\n              <motion.div\n                className=\"max-w-5xl max-h-[90vh] flex flex-col items-center\"\n                onClick={(e) => e.stopPropagation()}\n                custom={direction}\n                variants={slideVariants}\n                initial=\"enter\"\n                animate=\"center\"\n                exit=\"exit\"\n                key={selectedPhoto}\n              >\n                <motion.img\n                  src={photos[selectedPhoto].url}\n                  alt={photos[selectedPhoto].caption || \"Ảnh cưới\"}\n                  className=\"max-w-full max-h-[80vh] object-contain rounded-lg shadow-2xl\"\n                  data-testid=\"img-lightbox\"\n                />\n                {photos[selectedPhoto].caption && (\n                  <motion.p\n                    className=\"text-white text-center mt-4 text-lg bg-white/10 backdrop-blur-sm rounded-full px-6 py-3\"\n                    initial={{ opacity: 0, y: 20 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    transition={{ delay: 0.3 }}\n                  >\n                    {photos[selectedPhoto].caption}\n                  </motion.p>\n                )}\n              </motion.div>\n\n              {/* Photo Counter */}\n              <motion.div\n                className=\"absolute bottom-6 left-1/2 transform -translate-x-1/2 text-white/80 bg-white/10 backdrop-blur-sm rounded-full px-4 py-2\"\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: 0.4 }}\n              >\n                {selectedPhoto + 1} / {photos.length}\n              </motion.div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </section>\n  );\n}","size_bytes":18480},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"server/seed.ts":{"content":"import { hashPassword } from \"./auth\";\nimport { storage } from \"./storage\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  // Create admin user\n  const adminPassword = await hashPassword(\"admin123\");\n  await storage.upsertUser({\n    username: \"admin\",\n    password: adminPassword,\n    email: \"admin@wedding.com\",\n    firstName: \"Wedding\",\n    lastName: \"Admin\",\n  });\n  console.log(\"✅ Created admin user (username: admin, password: admin123)\");\n\n  // Create couple info with a beautiful, long love story\n  await storage.upsertCoupleInfo({\n    brideName: \"Xuân Lâm\",\n    groomName: \"Xuân Lợi\",\n    bridePhoto: \"/attached_assets/wedding_images/avatar/codau.jpg\",\n    groomPhoto: \"/attached_assets/wedding_images/avatar/chure.jpg\",\n    brideDescription: \"Cô dâu Xuân Lâm - Người phụ nữ xinh đẹp, dịu dàng với nụ cười rạng rỡ luôn tỏa sáng. Lâm là một dược sĩ tận tâm với công việc, luôn quan tâm chăm sóc sức khỏe cộng đồng. Cô yêu thích đọc sách, yoga và nấu ăn. Trong mắt Lợi, Lâm là người phụ nữ hoàn hảo với trái tim nhân hậu và sự kiên nhẫn vô bờ bến.\",\n    groomDescription: \"Chú rể Xuân Lợi - Chàng trai thông minh, trách nhiệm và luôn tươi cười. Lợi là một kiến trúc sư tài năng với niềm đam mê thiết kế không gian sống hiện đại, ấm cúng. Anh yêu thích nhiếp ảnh, du lịch và khám phá ẩm thực. Trong mắt Lâm, Lợi là người đàn ông đáng tin cậy, luôn biết cách khiến cô cảm thấy an toàn và được yêu thương.\",\n    ourStory: `Câu chuyện tình yêu của chúng tôi bắt đầu như một câu chuyện cổ tích hiện đại. \n\nXuân năm 2022, Hà Nội đang trong những ngày đẹp nhất của năm với hoa ban nở trắng trời. Lợi, một kiến trúc sư trẻ đầy đam mê, đang tham dự triển lãm nghệ thuật \"Không Gian Và Cảm Xúc\" tại Trung tâm Văn hóa Hà Nội. Còn Lâm, một dược sĩ yêu nghệ thuật, cũng ghé thăm triển lãm này sau một ngày làm việc mệt mỏi, muốn tìm chút bình yên trong thế giới tranh ảnh.\n\nĐịnh mệnh đã sắp đặt cho hai người đứng cùng ngắm một bức tranh - \"Ánh Sáng Cuối Ngày\" của họa sĩ Bùi Xuân Phái. Lợi, người yêu thích góc nhìn kiến trúc, nhận xét về cách ánh sáng tạo nên chiều sâu cho không gian. Còn Lâm, với trái tim nhạy cảm, lại cảm nhận được sự cô đơn và khát khao trong bức tranh. Hai người bắt đầu trò chuyện, và cuộc nói chuyện kéo dài đến tận khi triển lãm đóng cửa.\n\nTừ lần gặp gỡ định mệnh đó, chúng tôi bắt đầu những buổi hẹn hò lãng mạn. Lợi đưa Lâm đi khắp những con phố cổ kính của Hà Nội - từ phố sách cũ trên phố Đinh Lễ, đến những quán cà phê nhỏ ẩn mình trong ngõ nhỏ phố Hàng Bông. Mỗi cuối tuần, họ thường dạo bước quanh Hồ Gươm vào buổi sáng sớm, tay trong tay, chia sẻ những ước mơ về tương lai.\n\nMùa hè năm đó, Lợi đã lên kế hoạch cho chuyến du lịch đầu tiên của hai người - Đà Lạt, thành phố ngàn hoa. Tại đây, giữa sương mù và hoa dã quỳ nở rộ, bên bờ hồ Xuân Hương lung linh ánh đèn, Lợi đã quỳ gối cầu hôn Lâm với chiếc nhẫn đính hôn anh đã chuẩn bị từ tháng trước. Lâm đã rơi nước mắt hạnh phúc và gật đầu đồng ý, trong khi những du khách xung quanh vỗ tay chúc mừng.\n\nHai năm sau đó là khoảng thời gian chúng tôi cùng nhau vượt qua mọi thử thách. Từ những ngày làm việc bận rộn, áp lực công việc, đến những lúc ý kiến bất đồng, chúng tôi đã học cách lắng nghe, thấu hiểu và yêu thương nhau nhiều hơn mỗi ngày. Lợi đã thiết kế và xây dựng ngôi nhà nhỏ cho hai người - một không gian ấm cúng với khu vườn nhỏ mà Lâm luôn mơ ước. Còn Lâm đã luôn là chỗ dựa tinh thần vững chắc, động viên Lợi mỗi khi anh gặp khó khăn trong công việc.\n\nTết Nguyên Đán 2024, Lợi đã về xin phép gia đình Lâm, và gia đình hai bên đã vui vẻ chấp nhận. Từ đó, chúng tôi bắt đầu chuẩn bị cho ngày trọng đại nhất cuộc đời - ngày hai trái tim chính thức hòa làm một.\n\nHôm nay, ngày 01 tháng 01 năm 2026 - ngày đầu tiên của năm mới, chúng tôi sẽ chính thức là vợ chồng. Trước sự chứng kiến của gia đình, bạn bè và những người thân yêu, chúng tôi hứa sẽ luôn bên nhau, yêu thương, tôn trọng và chăm sóc lẫn nhau trọn đời. \n\nCảm ơn tất cả những ai đã và đang đồng hành cùng chúng tôi trong hành trình tình yêu này. Chúng tôi rất vinh hạnh được chia sẻ niềm hạnh phúc này cùng quý vị!`,\n    weddingDate: new Date(\"2026-01-01\"),\n    heroImage: \"/attached_assets/wedding_images/background/anhnen.jpg\",\n  });\n  console.log(\"✅ Created couple info with beautiful love story\");\n\n  // Create schedule events\n  const events = [\n    { title: \"Lễ Đón Dâu\", description: \"Đón dâu tại nhà gái theo phong tục truyền thống\", eventTime: new Date(\"2026-01-01T07:00:00\"), location: \"Nhà Gái - 88 Phố Huế, Hai Bà Trưng, Hà Nội\", icon: \"home\", order: 1 },\n    { title: \"Lễ Vu Quy\", description: \"Lễ vu quy long trọng - Tạm biệt gia đình\", eventTime: new Date(\"2026-01-01T08:30:00\"), location: \"Nhà Gái - 88 Phố Huế, Hai Bà Trưng, Hà Nội\", icon: \"heart\", order: 2 },\n    { title: \"Rước Dâu Về Nhà Trai\", description: \"Đoàn rước dâu về nhà chú rể với xe hoa lộng lẫy\", eventTime: new Date(\"2026-01-01T10:00:00\"), location: \"Từ nhà gái đến 156 Nguyễn Lương Bằng, Đống Đa, Hà Nội\", icon: \"car\", order: 3 },\n    { title: \"Lễ Thành Hôn\", description: \"Lễ thành hôn trang trọng tại nhà trai\", eventTime: new Date(\"2026-01-01T11:30:00\"), location: \"Nhà Trai - 156 Nguyễn Lương Bằng, Đống Đa, Hà Nội\", icon: \"church\", order: 4 },\n    { title: \"Tiệc Cưới Chiều\", description: \"Tiệc cưới long trọng chiêu đãi khách mời\", eventTime: new Date(\"2026-01-01T17:00:00\"), location: \"Rose Garden Estate - Cổ Nhuế, Bắc Từ Liêm, Hà Nội\", icon: \"glass\", order: 5 },\n    { title: \"Văn Nghệ & Ca Nhạc\", description: \"Chương trình ca nhạc, văn nghệ và trò chơi vui nhộn\", eventTime: new Date(\"2026-01-01T19:00:00\"), location: \"Rose Garden Estate\", icon: \"music\", order: 6 },\n  ];\n  for (const event of events) {\n    await storage.createScheduleEvent(event);\n  }\n  console.log(`✅ Created ${events.length} schedule events`);\n\n  // Create photos\n  const photos = [\n    { url: \"/attached_assets/wedding_images/album/1.jpg\", caption: \"Khoảnh khắc ngọt ngào của đôi uyên ương\", category: \"pre-wedding\", order: 1 },\n    { url: \"/attached_assets/wedding_images/album/2.jpg\", caption: \"Nụ cười rạng rỡ trong ngày trọng đại\", category: \"engagement\", order: 2 },\n    { url: \"/attached_assets/wedding_images/album/3.jpg\", caption: \"Tình yêu vượt thời gian\", category: \"ceremony\", order: 3 },\n    { url: \"/attached_assets/wedding_images/album/4.jpg\", caption: \"Xuân Lâm & Xuân Lợi - Một tình yêu đẹp như mơ\", category: \"wedding\", order: 4 },\n    { url: \"/attached_assets/wedding_images/album/5.jpg\", caption: \"Kỷ niệm khó quên bên nhau\", category: \"portrait\", order: 5 },\n    { url: \"/attached_assets/wedding_images/album/6.jpg\", caption: \"Hạnh phúc tràn ngập trong từng khoảnh khắc\", category: \"portrait\", order: 6 },\n  ];\n  for (const photo of photos) {\n    await storage.createPhoto(photo);\n  }\n  console.log(`✅ Created ${photos.length} photos`);\n\n  // Create guest messages\n  const messages = [\n    { guestName: \"Trần Minh Tuấn\", message: \"Chúc hai bạn trăm năm hạnh phúc, sớm có tin vui! Mãi bên nhau nhé!\", approved: true },\n    { guestName: \"Nguyễn Thu Hương\", message: \"Chúc mừng đám cưới Lâm và Lợi! Mãi bên nhau hạnh phúc, yêu thương nhau nhiều hơn mỗi ngày!\", approved: true },\n    { guestName: \"Lê Văn Hải\", message: \"Chúc hai bạn luôn yêu thương, thấu hiểu và hỗ trợ nhau trong mọi hoàn cảnh!\", approved: true },\n    { guestName: \"Phạm Thị Lan\", message: \"Chúc cho tình yêu của hai bạn mãi xanh tươi như thuở ban đầu, hạnh phúc trọn đời!\", approved: true },\n    { guestName: \"Hoàng Minh Đức\", message: \"Hạnh phúc lắm nha! Chúc mừng Lâm và Lợi có một đám cưới thật ý nghĩa!\", approved: true },\n    { guestName: \"Vũ Thị Mai\", message: \"Chúc hai bạn sớm có thiên thần nhỏ xinh đẹp, gia đình hạnh phúc!\", approved: true },\n    { guestName: \"Đỗ Thanh Tùng\", message: \"Chúc mừng cặp đôi trai tài gái sắc! Mãi yêu và hạnh phúc!\", approved: true },\n  ];\n  for (const message of messages) {\n    await storage.createGuestMessage(message);\n  }\n  console.log(`✅ Created ${messages.length} guest messages`);\n\n  // Create RSVPs\n  const rsvps = [\n    { guestName: \"Nguyễn Văn Anh\", email: \"nva@example.com\", phone: \"0901234567\", attending: true, guestCount: 3, mealPreference: \"Thịt bò\", specialRequirements: \"Không ăn hành\" },\n    { guestName: \"Trần Thị Bích\", email: \"ttb@example.com\", phone: \"0912345678\", attending: true, guestCount: 2, mealPreference: \"Gà\", specialRequirements: \"\" },\n    { guestName: \"Lê Hoàng Cường\", email: \"lhc@example.com\", phone: \"0923456789\", attending: false, guestCount: 1, mealPreference: \"Chay\", specialRequirements: \"Ăn chay\" },\n    { guestName: \"Phạm Minh Đức\", email: \"pmd@example.com\", phone: \"0934567890\", attending: true, guestCount: 4, mealPreference: \"Cá\", specialRequirements: \"Có trẻ em 2 tuổi\" },\n    { guestName: \"Vũ Thu Hà\", email: \"vth@example.com\", phone: \"0945678901\", attending: true, guestCount: 2, mealPreference: \"Tôm\", specialRequirements: \"\" },\n  ];\n  for (const rsvp of rsvps) {\n    await storage.createRsvp(rsvp);\n  }\n  console.log(`✅ Created ${rsvps.length} RSVPs`);\n\n  // Create registry items (Optional - Vietnamese style prefers bank transfer)\n  const registryItems = [\n    { name: \"Máy Giặt Inverter\", description: \"Máy giặt cửa trước inverter tiết kiệm điện 10kg\", price: 15000000, imageUrl: \"https://placehold.co/400x300/4a90e2/white?text=Máy+Giặt\", purchaseUrl: \"https://example.com\", order: 1, isPurchased: false },\n    { name: \"Tủ Lạnh Side By Side\", description: \"Tủ lạnh side by side 600L công nghệ inverter\", price: 25000000, imageUrl: \"https://placehold.co/400x300/50c878/white?text=Tủ+Lạnh\", purchaseUrl: \"https://example.com\", order: 2, isPurchased: false },\n    { name: \"Bộ Bàn Ăn Gỗ Sồi\", description: \"Bộ bàn ăn gỗ sồi tự nhiên 6 ghế cao cấp\", price: 18000000, imageUrl: \"https://placehold.co/400x300/d2691e/white?text=Bàn+Ăn\", purchaseUrl: \"https://example.com\", order: 3, isPurchased: true },\n    { name: \"Nồi Chiên Không Dầu\", description: \"Nồi chiên không dầu điện tử 7L cao cấp\", price: 4500000, imageUrl: \"https://placehold.co/400x300/ff6347/white?text=Nồi+Chiên\", purchaseUrl: \"https://example.com\", order: 4, isPurchased: false },\n    { name: \"Máy Hút Bụi Robot\", description: \"Máy hút bụi robot thông minh tự động lau nhà\", price: 12000000, imageUrl: \"https://placehold.co/400x300/9370db/white?text=Robot+Hút+Bụi\", purchaseUrl: \"https://example.com\", order: 5, isPurchased: false },\n  ];\n  for (const item of registryItems) {\n    await storage.createRegistryItem(item);\n  }\n  console.log(`✅ Created ${registryItems.length} registry items`);\n\n  // Create wedding party members\n  const weddingParty = [\n    { name: \"Nguyễn Thanh Tâm\", role: \"Phù Dâu\", description: \"Bạn thân từ thời cấp 2 của cô dâu, luôn đồng hành trong mọi khoảnh khắc\", photoUrl: \"/attached_assets/wedding_images/bridesmaids/1.jpg\", order: 1 },\n    { name: \"Trần Hồng Nhung\", role: \"Phù Dâu\", description: \"Chị em họ thân thiết của cô dâu, người chị luôn yêu thương\", photoUrl: \"/attached_assets/wedding_images/bridesmaids/2.jpg\", order: 2 },\n    { name: \"Lê Thị Mai\", role: \"Phù Dâu\", description: \"Bạn học cùng lớp đại học, cùng chia sẻ bao kỷ niệm đẹp\", photoUrl: \"/attached_assets/wedding_images/bridesmaids/3.jpeg\", order: 3 },\n    { name: \"Phạm Quốc Tuấn\", role: \"Phù Rể\", description: \"Bạn thân từ thuở nhỏ của chú rể, anh em tâm giao\", photoUrl: \"/attached_assets/wedding_images/groomsmen/1.jpg\", order: 4 },\n    { name: \"Vũ Minh Quân\", role: \"Phù Rể\", description: \"Đồng nghiệp thân thiết của chú rể tại công ty kiến trúc\", photoUrl: \"/attached_assets/wedding_images/groomsmen/2.jpg\", order: 5 },\n    { name: \"Hoàng Văn Nam\", role: \"Phù Rể\", description: \"Bạn cùng phòng thời đại học, cùng trải qua bao kỷ niệm\", photoUrl: \"/attached_assets/wedding_images/groomsmen/3.jpg\", order: 6 },\n  ];\n  for (const member of weddingParty) {\n    await storage.createWeddingPartyMember(member);\n  }\n  console.log(`✅ Created ${weddingParty.length} wedding party members`);\n\n  // Create settings with bank transfer info\n  await storage.upsertSettings({\n    venueName: \"Rose Garden Estate\",\n    venueAddress: \"Khu đô thị Cổ Nhuế, Phường Cổ Nhuế 1, Quận Bắc Từ Liêm, Hà Nội\",\n    venueMapLink: \"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3724.4803982916854!2d105.84117207503217!3d21.01332968063466!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3135ab953357c995%3A0x847d6c860524e5b7!2zSMOgIE7hu5lp!5e0!3m2!1svi!2s!4v1234567890\",\n    venuePhone: \"024 3868 9999\",\n    venueEmail: \"contact@rosegarden.vn\",\n    venueImage: \"/attached_assets/wedding_images/venue/1.jpg\",\n    eventStartTime: new Date(\"2026-01-01T17:00:00\"),\n    eventEndTime: new Date(\"2026-01-01T21:00:00\"),\n    backgroundMusicUrl: \"/attached_assets/wedding_music/Beautiful in white.mp3\",\n    backgroundMusicType: \"upload\",\n    backgroundMusicUrls: [],\n    backgroundMusicNames: [],\n    // Bank transfer info (Vietnamese wedding tradition)\n    brideQrCodeUrl: \"/attached_assets/wedding_images/qr/mungtiencodau.jpg\",\n    groomQrCodeUrl: \"/attached_assets/wedding_images/qr/mungtienchure.jpg\",\n    brideBankInfo: \"Ngân hàng Vietcombank\\nChi nhánh Hà Nội\\nSTK: 0123456789\\nChủ TK: Nguyễn Thị Xuân Lâm\",\n    groomBankInfo: \"Ngân hàng Techcombank\\nChi nhánh Đống Đa\\nSTK: 9876543210\\nChủ TK: Trần Xuân Lợi\",\n    // Footer info\n    footerText: \"Cảm ơn bạn đã đến chung vui cùng chúng tôi trong ngày trọng đại!\",\n    facebookUrl: \"\",\n    instagramUrl: \"\",\n    twitterUrl: \"\",\n    hashtag: \"#XuânLâmXuânLợi2026\",\n  });\n  console.log(\"✅ Created settings\");\n\n  // Create FAQs\n  const faqs = [\n    { question: \"Đám cưới diễn ra vào lúc mấy giờ?\", answer: \"Tiệc cưới sẽ bắt đầu lúc 17:00 (5 giờ chiều) ngày 01/01/2026 tại Rose Garden Estate. Quý khách vui lòng có mặt trước 16:45 để tham gia lễ chào đón và checkin.\", order: 1 },\n    { question: \"Trang phục nên mặc như thế nào?\", answer: \"Chúng tôi khuyến khích quý khách mặc trang phục lịch sự, trang trọng. Nam giới có thể mặc vest, áo sơ mi kết hợp quần tây. Nữ giới có thể mặc váy dạ hội, áo dài hoặc trang phục cocktail. Tránh mặc quá trắng hoặc quá đen.\", order: 2 },\n    { question: \"Có chỗ đậu xe không?\", answer: \"Rose Garden Estate có bãi đậu xe rộng rãi, an toàn và hoàn toàn miễn phí cho tất cả khách mời. Ngoài ra còn có nhân viên bảo vệ và valet parking hỗ trợ 24/7.\", order: 3 },\n    { question: \"Tôi có thể mang theo trẻ em được không?\", answer: \"Chúng tôi rất vui lòng đón tiếp các em nhỏ! Vui lòng ghi chính xác số lượng trẻ em trong form RSVP để chúng tôi chuẩn bị ghế ngồi, thức ăn và các hoạt động vui chơi phù hợp cho các bé.\", order: 4 },\n    { question: \"Mừng cưới như thế nào?\", answer: \"Theo truyền thống Việt Nam, quý khách có thể gửi mừng cưới qua chuyển khoản ngân hàng (xem thông tin trong mục Mừng Cưới) hoặc trao trực tiếp tại tiệc cưới. Chúng tôi trân trọng mọi tấm lòng của quý khách dù nhiều hay ít!\", order: 5 },\n    { question: \"Làm thế nào để xác nhận tham dự?\", answer: \"Quý khách vui lòng điền form RSVP trên website trước ngày 25/12/2025 để chúng tôi có thể chuẩn bị chu đáo. Nếu có thay đổi kế hoạch, vui lòng liên hệ với chúng tôi sớm nhất có thể qua số điện thoại hoặc email.\", order: 6 },\n    { question: \"Tôi có cần mang theo thiệp mời không?\", answer: \"Không bắt buộc phải mang thiệp mời. Quý khách chỉ cần báo tên tại quầy lễ tân để được hướng dẫn vào sảnh tiệc. Tuy nhiên nếu quý khách muốn giữ thiệp làm kỷ niệm thì có thể mang theo.\", order: 7 },\n    { question: \"Có phục vụ đồ uống có cồn không?\", answer: \"Có. Chúng tôi có phục vụ rượu vang, bia và các loại cocktail. Tuy nhiên, chúng tôi khuyến khích quý khách uống có trách nhiệm và không lái xe sau khi uống rượu. Có dịch vụ taxi sẵn sàng hỗ trợ.\", order: 8 },\n  ];\n  for (const faq of faqs) {\n    await storage.createFaq(faq);\n  }\n  console.log(`✅ Created ${faqs.length} FAQs`);\n\n  // Create popups\n  const popups = [\n    {\n      type: \"welcome\",\n      imageUrl: \"/attached_assets/wedding_images/popup/dautrang.gif\",\n      isActive: true,\n      title: \"Chào Mừng Đến Với Đám Cưới Của Chúng Tôi!\",\n      description: \"Xuân Lâm & Xuân Lợi trân trọng kính mời quý khách\",\n    },\n    {\n      type: \"scroll_end\",\n      imageUrl: \"/attached_assets/wedding_images/popup/cuoitrang.gif\",\n      isActive: true,\n      title: \"Cảm Ơn Bạn Đã Ghé Thăm!\",\n      description: \"Hẹn gặp bạn tại đám cưới của chúng tôi\",\n    },\n  ];\n  for (const popup of popups) {\n    await storage.createPopup(popup);\n  }\n  console.log(`✅ Created ${popups.length} popups`);\n\n  // Create music track for Beautiful in white\n  await storage.createMusicTrack({\n    title: \"Beautiful in White\",\n    filename: \"Beautiful in white.mp3\",\n    artist: \"Shane Filan\",\n    duration: 240, // 4 minutes approx\n    displayOrder: 1,\n    isActive: true,\n  });\n  console.log(\"✅ Created music track: Beautiful in White\");\n\n\n  // Create guest photos (sample data - need actual photos uploaded by guests)\n  const guestPhotoSamples = [\n    { url: \"https://placehold.co/800x600/ff6b9d/white?text=Guest+Photo+1\", caption: \"Khoảnh khắc đẹp trong tiệc!\", guestName: \"Nguyễn Anh\", approved: true },\n    { url: \"https://placehold.co/800x600/c44569/white?text=Guest+Photo+2\", caption: \"Cô dâu chú rể xinh đẹp quá!\", guestName: \"Trần Bình\", approved: true },\n    { url: \"https://placehold.co/800x600/6c5ce7/white?text=Guest+Photo+3\", caption: \"Ảnh chụp cùng cặp đôi\", guestName: \"Lê Cường\", approved: false },\n  ];\n  for (const photo of guestPhotoSamples) {\n    await storage.createGuestPhoto(photo);\n  }\n  console.log(`✅ Created ${guestPhotoSamples.length} guest photo samples`);\n\n  // Create livestream info\n  await storage.upsertLivestreamInfo({\n    isActive: true,\n    platform: \"youtube\",\n    streamUrl: \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    streamTitle: \"Trực Tiếp Đám Cưới Xuân Lâm & Xuân Lợi\",\n    streamDescription: \"Theo dõi trực tiếp lễ cưới của chúng tôi! Buổi lễ sẽ bắt đầu lúc 17:00 ngày 01/01/2026.\",\n    startTime: new Date(\"2026-01-01T17:00:00\"),\n    endTime: new Date(\"2026-01-01T21:00:00\"),\n    thumbnailUrl: \"/attached_assets/wedding_images/background/anhnen.jpg\",\n    chatEnabled: true,\n  });\n  console.log(\"✅ Created livestream info\");\n\n  console.log(\"🎉 Database seeding completed successfully!\");\n  console.log(\"📝 Summary:\");\n  console.log(\"   - Admin user created\");\n  console.log(\"   - Couple info with beautiful love story\");\n  console.log(\"   - 6 schedule events\");\n  console.log(\"   - 6 photos\");\n  console.log(\"   - 7 guest messages\");\n  console.log(\"   - 5 RSVPs\");\n  console.log(\"   - 5 registry items\");\n  console.log(\"   - 6 wedding party members\");\n  console.log(\"   - 8 FAQs\");\n  console.log(\"   - 2 popups\");\n  console.log(\"   - 1 music track\");\n  console.log(\"   - Settings configured\");\n  console.log(\"   - 3 guest photo samples\");\n  console.log(\"   - Livestream info configured\");\n}\n\nseed().catch(console.error);\n","size_bytes":21215},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { whileHover, whileTap, ...restProps } = props as any;\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...restProps}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2428},"client/src/pages/Landing.tsx":{"content":"import Hero from \"@/components/Hero\";\nimport About from \"@/components/About\";\nimport Schedule from \"@/components/Schedule\";\nimport WeddingParty from \"@/components/WeddingParty\";\nimport Gallery from \"@/components/Gallery\";\nimport Messages from \"@/components/Messages\";\nimport RSVP from \"@/components/RSVP\";\nimport Location from \"@/components/Location\";\nimport Registry from \"@/components/Registry\";\nimport Navigation from \"@/components/Navigation\";\nimport Footer from \"@/components/Footer\";\nimport MusicPlayer from \"@/components/MusicPlayer\";\nimport PopupManager from \"@/components/PopupManager\";\nimport Livestream from \"@/components/Livestream\";\nimport GuestPhotoUpload from \"@/components/GuestPhotoUpload\";\nimport GuestPhotoGallery from \"@/components/GuestPhotoGallery\";\nimport { motion, useScroll, useSpring } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\n\nexport default function Landing() {\n  const { scrollYProgress } = useScroll();\n  const scaleX = useSpring(scrollYProgress, {\n    stiffness: 100,\n    damping: 30,\n    restDelta: 0.001\n  });\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulate loading time for assets\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n      \n      // Request fullscreen after loading (only on user interaction)\n      // Note: Browsers require user interaction before allowing fullscreen\n      const requestFullscreen = () => {\n        const elem = document.documentElement;\n        if (elem.requestFullscreen) {\n          elem.requestFullscreen().catch(() => {\n            // Fullscreen request failed - user may have denied or browser doesn't support it\n          });\n        }\n      };\n      \n      // Try to go fullscreen on first user interaction\n      const enableFullscreenOnInteraction = () => {\n        requestFullscreen();\n        // Remove listeners after first interaction\n        document.removeEventListener('click', enableFullscreenOnInteraction);\n        document.removeEventListener('touchstart', enableFullscreenOnInteraction);\n        document.removeEventListener('keydown', enableFullscreenOnInteraction);\n      };\n      \n      // Add listeners for user interaction\n      document.addEventListener('click', enableFullscreenOnInteraction, { once: true });\n      document.addEventListener('touchstart', enableFullscreenOnInteraction, { once: true });\n      document.addEventListener('keydown', enableFullscreenOnInteraction, { once: true });\n    }, 100);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const sectionVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.4,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-primary/10\">\n        <motion.div\n          initial={{ scale: 0, rotate: -180 }}\n          animate={{ scale: 1, rotate: 0 }}\n          transition={{ \n            type: \"spring\", \n            stiffness: 200, \n            damping: 15 \n          }}\n          className=\"text-center\"\n        >\n          <motion.div\n            animate={{\n              scale: [1, 1.2, 1],\n              rotate: [0, 10, -10, 0]\n            }}\n            transition={{\n              duration: 2,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n            className=\"text-6xl mb-4\"\n          >\n            💍\n          </motion.div>\n          <motion.h1\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5 }}\n            className=\"font-cursive text-4xl md:text-6xl text-foreground mb-4\"\n          >\n            Trang Web Cưới\n          </motion.h1>\n          <motion.p\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.8 }}\n            className=\"text-muted-foreground text-lg\"\n          >\n            Đang tải trang web cưới...\n          </motion.p>\n          <motion.div\n            className=\"mt-8 w-48 h-1 bg-primary/20 rounded-full mx-auto overflow-hidden\"\n            initial={{ width: 0 }}\n            animate={{ width: \"12rem\" }}\n            transition={{ delay: 0.3, duration: 1.5 }}\n          >\n            <motion.div\n              className=\"h-full bg-primary rounded-full\"\n              initial={{ x: \"-100%\" }}\n              animate={{ x: \"0%\" }}\n              transition={{ \n                delay: 0.5, \n                duration: 2, \n                ease: \"easeInOut\" \n              }}\n            />\n          </motion.div>\n        </motion.div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen scroll-smooth bg-background\" id=\"home\">\n      {/* Global Progress Bar */}\n      <motion.div\n        className=\"fixed top-0 left-0 right-0 h-1 bg-gradient-to-r from-primary to-primary/60 z-50 origin-left\"\n        style={{ scaleX }}\n      />\n\n      {/* Navigation */}\n      <motion.div\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        transition={{ duration: 0.6, ease: \"easeOut\" }}\n      >\n        <Navigation />\n      </motion.div>\n\n      {/* Hero Section */}\n      <motion.section\n        initial=\"hidden\"\n        animate=\"visible\"\n        variants={sectionVariants}\n      >\n        <Hero />\n      </motion.section>\n\n      {/* About Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <About />\n      </motion.section>\n\n      {/* Livestream Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <Livestream />\n      </motion.section>\n\n      {/* Schedule Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <Schedule />\n      </motion.section>\n\n      {/* Wedding Party Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <WeddingParty />\n      </motion.section>\n\n      {/* Gallery Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <Gallery />\n      </motion.section>\n\n      {/* Guest Photo Gallery Section - Moved below Gallery */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <GuestPhotoGallery />\n      </motion.section>\n\n      {/* Guest Photo Upload Section - Moved below GuestPhotoGallery */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <GuestPhotoUpload />\n      </motion.section>\n\n      {/* Messages Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <Messages />\n      </motion.section>\n\n      {/* RSVP Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <RSVP />\n      </motion.section>\n\n      {/* Location Section */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true, margin: \"-100px\" }}\n        variants={sectionVariants}\n      >\n        <Location />\n      </motion.section>\n\n\n      {/* Footer */}\n      <motion.section\n        initial=\"hidden\"\n        whileInView=\"visible\"\n        viewport={{ once: true }}\n        variants={sectionVariants}\n      >\n        <Footer />\n      </motion.section>\n\n      {/* Music Player */}\n      <motion.div\n        initial={{ scale: 0, opacity: 0 }}\n        animate={{ scale: 1, opacity: 1 }}\n        transition={{ delay: 0.5, type: \"spring\", stiffness: 200 }}\n      >\n        <MusicPlayer />\n      </motion.div>\n\n      {/* Popup Manager */}\n      <PopupManager />\n\n      {/* Scroll to Top Button */}\n      <ScrollToTop />\n\n      {/* Background Decorations */}\n      <BackgroundElements />\n    </div>\n  );\n}\n\n// Scroll to Top Component\nfunction ScrollToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > 300) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility);\n    return () => window.removeEventListener(\"scroll\", toggleVisibility);\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\"\n    });\n  };\n\n  return (\n    <motion.button\n      className={`fixed bottom-6 left-6 z-40 p-3 rounded-full bg-primary text-primary-foreground shadow-2xl hover:shadow-3xl transition-all duration-300 ${\n        isVisible ? \"opacity-100\" : \"opacity-0 pointer-events-none\"\n      }`}\n      onClick={scrollToTop}\n      whileHover={{ scale: 1.1 }}\n      whileTap={{ scale: 0.9 }}\n      initial={{ scale: 0 }}\n      animate={{ scale: isVisible ? 1 : 0 }}\n      transition={{ type: \"spring\", stiffness: 300 }}\n    >\n      <motion.svg\n        width=\"20\"\n        height=\"20\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        animate={{ y: [0, -2, 0] }}\n        transition={{ duration: 1.5, repeat: Infinity }}\n      >\n        <path d=\"m18 15-6-6-6 6\"/>\n      </motion.svg>\n    </motion.button>\n  );\n}\n\n// Background Elements Component\nfunction BackgroundElements() {\n  return (\n    <div className=\"fixed inset-0 pointer-events-none overflow-hidden z-0\">\n      {/* Floating Hearts */}\n      {[...Array(8)].map((_, i) => (\n        <motion.div\n          key={i}\n          className=\"absolute text-primary/10\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n          }}\n          animate={{\n            y: [0, -30, 0],\n            rotate: [0, 180, 360],\n            scale: [0.8, 1.2, 0.8],\n          }}\n          transition={{\n            duration: 15 + Math.random() * 10,\n            delay: i * 2,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        >\n          <motion.svg\n            width=\"40\"\n            height=\"40\"\n            viewBox=\"0 0 24 24\"\n            fill=\"currentColor\"\n            animate={{\n              scale: [1, 1.1, 1],\n            }}\n            transition={{\n              duration: 3,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          >\n            <path d=\"M19 14c1.49-1.46 3-3.21 3-5.5A5.5 5.5 0 0 0 16.5 3c-1.76 0-3 .5-4.5 2-1.5-1.5-2.74-2-4.5-2A5.5 5.5 0 0 0 2 8.5c0 2.3 1.5 4.05 3 5.5l7 7Z\"/>\n          </motion.svg>\n        </motion.div>\n      ))}\n\n      {/* Floating Circles */}\n      {[...Array(12)].map((_, i) => (\n        <motion.div\n          key={`circle-${i}`}\n          className=\"absolute rounded-full bg-primary/5\"\n          style={{\n            left: `${Math.random() * 100}%`,\n            top: `${Math.random() * 100}%`,\n            width: `${20 + Math.random() * 30}px`,\n            height: `${20 + Math.random() * 30}px`,\n          }}\n          animate={{\n            y: [0, -40, 0],\n            x: [0, Math.random() * 50 - 25, 0],\n            scale: [1, 1.2, 1],\n            opacity: [0.3, 0.7, 0.3],\n          }}\n          transition={{\n            duration: 20 + Math.random() * 10,\n            delay: i * 1.5,\n            repeat: Infinity,\n            ease: \"easeInOut\"\n          }}\n        />\n      ))}\n\n      {/* Gradient Orbs */}\n      <motion.div\n        className=\"absolute top-1/4 -left-20 w-80 h-80 rounded-full bg-gradient-to-r from-primary/10 to-primary/5 blur-3xl\"\n        animate={{\n          scale: [1, 1.1, 1],\n          opacity: [0.3, 0.5, 0.3],\n        }}\n        transition={{\n          duration: 8,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n      <motion.div\n        className=\"absolute bottom-1/4 -right-20 w-80 h-80 rounded-full bg-gradient-to-l from-primary/10 to-primary/5 blur-3xl\"\n        animate={{\n          scale: [1.1, 1, 1.1],\n          opacity: [0.4, 0.6, 0.4],\n        }}\n        transition={{\n          duration: 10,\n          repeat: Infinity,\n          ease: \"easeInOut\"\n        }}\n      />\n    </div>\n  );\n}","size_bytes":12848},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/Navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Menu, X, Heart, ChevronDown, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { CoupleInfo } from \"@shared/schema\";\n\nconst navLinks = [\n  { name: \"Trang chủ\", href: \"#home\" },\n  { name: \"Chúng tôi\", href: \"#about\" },\n  { name: \"Lịch cưới\", href: \"#schedule\" },\n  { name: \"Ảnh\", href: \"#gallery\" },\n  { name: \"Lời chúc\", href: \"#messages\" },\n  { name: \"Tham gia\", href: \"#rsvp\" },\n  { name: \"Địa điểm\", href: \"#location\" },\n];\n\nexport default function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [activeSection, setActiveSection] = useState(\"home\");\n  \n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 50);\n      \n      // Update active section based on scroll position\n      const sections = navLinks.map(link => link.href.substring(1));\n      const current = sections.find(section => {\n        const element = document.getElementById(section);\n        if (element) {\n          const rect = element.getBoundingClientRect();\n          return rect.top <= 100 && rect.bottom >= 100;\n        }\n        return false;\n      });\n      \n      if (current) {\n        setActiveSection(current);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const scrollToSection = (href: string) => {\n    const element = document.querySelector(href);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n    setIsOpen(false);\n  };\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: -20 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.5,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const mobileMenuVariants = {\n    closed: {\n      opacity: 0,\n      height: 0,\n      transition: {\n        duration: 0.3,\n        ease: \"easeInOut\"\n      }\n    },\n    open: {\n      opacity: 1,\n      height: \"auto\",\n      transition: {\n        duration: 0.4,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  return (\n    <motion.nav\n      className={`fixed top-0 left-0 right-0 z-50 transition-all duration-500 ${\n        isScrolled\n          ? \"bg-background/95 backdrop-blur-xl shadow-2xl border-b border-border/50\"\n          : \"bg-transparent\"\n      }`}\n      initial={{ y: -100 }}\n      animate={{ y: 0 }}\n      transition={{ duration: 0.6, ease: \"easeOut\" }}\n    >\n      <div className=\"max-w-7xl mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16 md:h-20\">\n          {/* Logo */}\n          <motion.a\n            href=\"#home\"\n            className=\"flex items-center gap-3 group\"\n            onClick={(e) => {\n              e.preventDefault();\n              scrollToSection(\"#home\");\n            }}\n            data-testid=\"link-home\"\n            whileHover={{ scale: 1.05 }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <motion.div\n              className=\"relative\"\n              animate={{\n                rotate: [0, 10, -10, 0],\n              }}\n              transition={{\n                duration: 4,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n            >\n              <Heart \n                size={32} \n                className=\"text-primary drop-shadow-lg\" \n                fill=\"currentColor\" \n              />\n            </motion.div>\n            <div className=\"flex flex-col\">\n              <span className=\"font-cursive text-2xl md:text-3xl text-primary bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent font-medium\">\n                {coupleInfo ? `${coupleInfo.brideName.split(' ').pop()} & ${coupleInfo.groomName.split(' ').pop()}` : \"Trang Web Cưới\"}\n              </span>\n              <span className=\"text-xs text-muted-foreground -mt-1\">\n                {coupleInfo?.weddingDate \n                  ? new Date(coupleInfo.weddingDate).toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit', year: 'numeric' }).replace(/\\//g, '.')\n                  : \"\"}\n              </span>\n            </div>\n          </motion.a>\n\n          {/* Desktop Navigation */}\n          <motion.div \n            className=\"hidden lg:flex items-center gap-0.5\"\n            variants={containerVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n          >\n            {navLinks.map((link) => {\n              const isActive = activeSection === link.href.substring(1);\n              return (\n                <motion.a\n                  key={link.name}\n                  href={link.href}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    scrollToSection(link.href);\n                  }}\n                  className={`relative px-3 py-2 rounded-xl transition-all duration-300 group text-base ${\n                    isActive\n                      ? \"text-primary font-bold\"\n                      : \"text-foreground hover:text-primary font-semibold\"\n                  }`}\n                  data-testid={`nav-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  variants={itemVariants}\n                  whileHover={{ y: -2 }}\n                  whileTap={{ y: 0 }}\n                >\n                  {link.name}\n                  \n                  {/* Active indicator */}\n                  {isActive && (\n                    <motion.div\n                      className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full\"\n                      layoutId=\"activeIndicator\"\n                      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                    />\n                  )}\n                  \n                  {/* Hover effect */}\n                  <div className=\"absolute inset-0 bg-primary/5 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                </motion.a>\n              );\n            })}\n          </motion.div>\n\n          {/* Mobile Menu Button */}\n          <motion.div\n            className=\"lg:hidden\"\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"relative w-10 h-10\"\n              onClick={() => setIsOpen(!isOpen)}\n              data-testid=\"button-menu-toggle\"\n            >\n              <AnimatePresence mode=\"wait\">\n                {isOpen ? (\n                  <motion.div\n                    key=\"close\"\n                    initial={{ rotate: -90, opacity: 0 }}\n                    animate={{ rotate: 0, opacity: 1 }}\n                    exit={{ rotate: 90, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <X size={24} />\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"menu\"\n                    initial={{ rotate: 90, opacity: 0 }}\n                    animate={{ rotate: 0, opacity: 1 }}\n                    exit={{ rotate: -90, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                  >\n                    <Menu size={24} />\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </Button>\n          </motion.div>\n        </div>\n      </div>\n\n      {/* Mobile Menu */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            className=\"lg:hidden bg-background/95 backdrop-blur-xl border-t border-border/50 overflow-hidden\"\n            variants={mobileMenuVariants}\n            initial=\"closed\"\n            animate=\"open\"\n            exit=\"closed\"\n          >\n            <motion.div \n              className=\"px-4 py-6 space-y-2\"\n              variants={containerVariants}\n              initial=\"hidden\"\n              animate=\"visible\"\n            >\n              {navLinks.map((link, index) => {\n                const isActive = activeSection === link.href.substring(1);\n                return (\n                  <motion.a\n                    key={link.name}\n                    href={link.href}\n                    onClick={(e) => {\n                      e.preventDefault();\n                      scrollToSection(link.href);\n                    }}\n                    className={`block px-4 py-4 rounded-xl transition-all duration-300 text-lg ${\n                      isActive\n                        ? \"bg-primary/10 text-primary font-bold\"\n                        : \"text-foreground hover:bg-card hover:text-primary font-semibold\"\n                    }`}\n                    data-testid={`mobile-nav-${link.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                    variants={itemVariants}\n                    whileHover={{ x: 8 }}\n                    transition={{ delay: index * 0.1 }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <span>{link.name}</span>\n                      {isActive && (\n                        <motion.div\n                          initial={{ scale: 0 }}\n                          animate={{ scale: 1 }}\n                          transition={{ type: \"spring\", stiffness: 500 }}\n                        >\n                          <Heart size={16} className=\"text-primary\" fill=\"currentColor\" />\n                        </motion.div>\n                      )}\n                    </div>\n                  </motion.a>\n                );\n              })}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Scroll Progress Bar */}\n      <motion.div\n        className=\"absolute bottom-0 left-0 h-0.5 bg-gradient-to-r from-primary to-primary/60\"\n        initial={{ scaleX: 0 }}\n        animate={{ scaleX: (window.scrollY / (document.body.scrollHeight - window.innerHeight)) }}\n        transition={{ duration: 0.1 }}\n      />\n    </motion.nav>\n  );\n}","size_bytes":10400},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: '0.0.0.0',\n    port: 5000,\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1141},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/Hero.tsx":{"content":"import { Heart, Calendar, MapPin, Clock, X } from \"lucide-react\";\nimport { motion, useMotionValue, useTransform, animate, AnimatePresence } from \"framer-motion\";\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { CoupleInfo, Settings, Popup } from \"@shared/schema\";\n\nexport default function Hero() {\n  const [isVisible, setIsVisible] = useState(false);\n  const count = useMotionValue(0);\n  const rounded = useTransform(count, Math.round);\n  const [showInvitation, setShowInvitation] = useState(false);\n\n  const { data: coupleInfo } = useQuery<CoupleInfo | null>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  const { data: settings } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const { data: popups } = useQuery<Popup[]>({\n    queryKey: [\"/api/popups\"],\n  });\n\n  const welcomePopup = popups?.find((p) => p.type === \"welcome\" && p.isActive);\n\n  const [timeLeft, setTimeLeft] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    setIsVisible(true);\n    \n    const calculateTimeLeft = () => {\n      const weddingDate = coupleInfo?.weddingDate \n        ? new Date(coupleInfo.weddingDate)\n        : new Date('2025-06-15T00:00:00');\n      const now = new Date();\n      const difference = weddingDate.getTime() - now.getTime();\n      \n      if (difference > 0) {\n        return {\n          days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n          hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n          minutes: Math.floor((difference / 1000 / 60) % 60),\n          seconds: Math.floor((difference / 1000) % 60)\n        };\n      }\n      return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n    };\n\n    setTimeLeft(calculateTimeLeft());\n    \n    const timer = setInterval(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [coupleInfo?.weddingDate]);\n\n  // Animate numbers\n  useEffect(() => {\n    Object.entries(timeLeft).forEach(([key, value]) => {\n      const controls = animate(0, value, {\n        duration: 1,\n        onUpdate: (latest) => {\n          // You would need separate motion values for each counter\n          // This is simplified for demonstration\n        }\n      });\n      return controls.stop;\n    });\n  }, [timeLeft]);\n\n  const countdownItems = [\n    { value: timeLeft.days, label: \"Ngày\", icon: Calendar },\n    { value: timeLeft.hours, label: \"Giờ\", icon: Clock },\n    { value: timeLeft.minutes, label: \"Phút\", icon: Clock },\n    { value: timeLeft.seconds, label: \"Giây\", icon: Clock }\n  ];\n\n  const floatingHearts = [...Array(12)].map((_, i) => ({\n    id: i,\n    left: Math.random() * 100,\n    delay: i * 1.5,\n    duration: 18 + Math.random() * 10,\n    size: 24 + Math.random() * 32\n  }));\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.3,\n        delayChildren: 0.2\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 50 },\n    visible: {\n      opacity: 1,\n      y: 0,\n      transition: {\n        duration: 0.8,\n        ease: \"easeOut\"\n      }\n    }\n  };\n\n  const countdownVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        type: \"spring\",\n        stiffness: 100,\n        damping: 15\n      }\n    }\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden pt-24\">\n      {/* Background Image with Gradient Overlay */}\n      {/* Background Image - using img tag for better control */}\n      {coupleInfo?.heroImage && (\n        <motion.img\n          src={coupleInfo.heroImage}\n          alt=\"Wedding Background\"\n          className=\"absolute inset-0 w-full h-full object-cover object-center\"\n          initial={{ scale: 1.1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 1.5, ease: \"easeOut\" }}\n        />\n      )}\n      {!coupleInfo?.heroImage && (\n        <motion.div\n          className=\"absolute inset-0\"\n          style={{ background: 'linear-gradient(135deg, hsl(var(--primary) / 0.3), hsl(var(--primary) / 0.1))' }}\n          initial={{ scale: 1.1 }}\n          animate={{ scale: 1 }}\n          transition={{ duration: 1.5, ease: \"easeOut\" }}\n        />\n      )}\n      <motion.div\n        className=\"absolute inset-0 bg-gradient-to-b from-primary/40 via-primary/20 to-background/90\"\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ duration: 1.2 }}\n      />\n\n      {/* Animated Background Elements */}\n      <div className=\"absolute inset-0 pointer-events-none overflow-hidden\">\n        {/* Floating Hearts */}\n        {floatingHearts.map((heart) => (\n          <motion.div\n            key={heart.id}\n            className=\"absolute text-primary/20\"\n            style={{\n              left: `${heart.left}%`,\n              top: '110%',\n              fontSize: `${heart.size}px`\n            }}\n            animate={{\n              y: [-100, -window.innerHeight - 100],\n              x: [0, Math.random() * 100 - 50],\n              rotate: [0, 360],\n              opacity: [0, 0.8, 0]\n            }}\n            transition={{\n              duration: heart.duration,\n              delay: heart.delay,\n              repeat: Infinity,\n              ease: \"linear\"\n            }}\n          >\n            <Heart fill=\"currentColor\" />\n          </motion.div>\n        ))}\n\n        {/* Floating Particles */}\n        {[...Array(20)].map((_, i) => (\n          <motion.div\n            key={`particle-${i}`}\n            className=\"absolute w-1 h-1 bg-primary/30 rounded-full\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n            }}\n            animate={{\n              y: [0, -100],\n              opacity: [0, 1, 0],\n              scale: [0, 1, 0]\n            }}\n            transition={{\n              duration: 4 + Math.random() * 4,\n              delay: Math.random() * 5,\n              repeat: Infinity,\n              ease: \"easeInOut\"\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Main Content */}\n      <motion.div\n        className=\"relative z-10 text-center px-4 max-w-4xl mx-auto\"\n        variants={containerVariants}\n        initial=\"hidden\"\n        animate=\"visible\"\n      >\n        {/* Wedding Announcement */}\n        <motion.div\n          className=\"mb-6\"\n          variants={containerVariants}\n        >\n          <motion.h1\n            className=\"font-cursive text-6xl md:text-8xl lg:text-9xl mb-6 text-foreground relative font-normal\"\n            data-testid=\"text-couple-names\"\n            variants={itemVariants}\n          >\n            <motion.span \n              className=\"bg-gradient-to-r from-primary via-pink-400 to-rose-500 bg-clip-text text-transparent inline-block font-normal\"\n              initial={{ opacity: 0, y: 50, rotateX: 90 }}\n              animate={{ \n                opacity: 1, \n                y: 0, \n                rotateX: 0,\n                scale: [1, 1.02, 1],\n                backgroundPosition: [\"0% 50%\", \"100% 50%\", \"0% 50%\"],\n              }}\n              transition={{\n                opacity: { duration: 0.8 },\n                y: { duration: 0.8, type: \"spring\", stiffness: 100 },\n                rotateX: { duration: 1, type: \"spring\", stiffness: 100 },\n                scale: { duration: 4, repeat: Infinity, ease: \"easeInOut\" },\n                backgroundPosition: { duration: 8, repeat: Infinity, ease: \"linear\" }\n              }}\n              style={{\n                backgroundSize: \"200% 200%\",\n                transformStyle: \"preserve-3d\",\n                perspective: \"1000px\"\n              }}\n            >\n              {coupleInfo ? `${coupleInfo.brideName} & ${coupleInfo.groomName}` : \"Xuân Lâm & Xuân Lợi\"}\n            </motion.span>\n            {/* Character count display */}\n            <motion.div\n              className=\"absolute -top-8 right-0 text-xs text-muted-foreground/60 font-sans\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1.5 }}\n            >\n              {coupleInfo ? (coupleInfo.brideName + \" & \" + coupleInfo.groomName).length : 17} ký tự\n            </motion.div>\n            {/* Decorative underline with shimmer */}\n            <motion.div\n              className=\"absolute -bottom-4 left-1/2 transform -translate-x-1/2 w-32 h-1 bg-gradient-to-r from-primary/50 via-primary to-primary/50 rounded-full\"\n              initial={{ scaleX: 0, opacity: 0 }}\n              animate={{ scaleX: 1, opacity: 1 }}\n              transition={{ delay: 1, duration: 0.8 }}\n            >\n              {/* Shimmer effect */}\n              <motion.div\n                className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/60 to-transparent\"\n                animate={{\n                  x: [\"-100%\", \"100%\"]\n                }}\n                transition={{\n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"linear\"\n                }}\n              />\n            </motion.div>\n            {/* Sparkle effects */}\n            {[...Array(6)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute text-primary/40\"\n                style={{\n                  left: `${20 + i * 15}%`,\n                  top: `${-10 + Math.sin(i) * 10}%`,\n                }}\n                animate={{\n                  scale: [0, 1, 0],\n                  rotate: [0, 180, 360],\n                  opacity: [0, 1, 0]\n                }}\n                transition={{\n                  duration: 3,\n                  delay: i * 0.4,\n                  repeat: Infinity,\n                }}\n              >\n                ✨\n              </motion.div>\n            ))}\n          </motion.h1>\n\n          <motion.div\n            className=\"flex flex-col md:flex-row items-center justify-center gap-4 md:gap-8 text-foreground mb-6\"\n            variants={itemVariants}\n          >\n            <motion.div\n              className=\"flex items-center gap-3 text-xl md:text-3xl\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <Calendar className=\"text-primary\" size={32} />\n              <span className=\"font-serif font-medium\">\n                {coupleInfo?.weddingDate \n                  ? new Date(coupleInfo.weddingDate).toLocaleDateString('vi-VN', { \n                      day: 'numeric', \n                      month: 'long', \n                      year: 'numeric' \n                    })\n                  : \"15 Tháng 6, 2025\"}\n              </span>\n            </motion.div>\n            \n            <motion.div\n              className=\"flex items-center gap-3 text-xl md:text-3xl\"\n              whileHover={{ scale: 1.05 }}\n            >\n              <MapPin className=\"text-primary\" size={32} />\n              <span className=\"font-serif font-medium\">\n                {settings?.venueName || \"Grand Ballroom\"}\n              </span>\n            </motion.div>\n          </motion.div>\n        </motion.div>\n\n        {/* Countdown Timer */}\n        <motion.div\n          className=\"flex justify-center gap-2 md:gap-4 mb-4\"\n          data-testid=\"countdown-timer\"\n          variants={containerVariants}\n        >\n          {countdownItems.map((item, index) => (\n            <motion.div\n              key={item.label}\n              className=\"text-center backdrop-blur-xl bg-card/60 rounded-xl md:rounded-2xl lg:rounded-3xl p-2 sm:p-3 md:p-4 lg:p-6 border border-card-border/50 shadow-2xl relative overflow-hidden min-w-[60px] sm:min-w-[70px] md:min-w-[90px] lg:min-w-[120px]\"\n              variants={countdownVariants}\n              whileHover={{ \n                scale: 1.05,\n                y: -5,\n                transition: { type: \"spring\", stiffness: 400 }\n              }}\n            >\n              {/* Background glow effect */}\n              <div className=\"absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent rounded-3xl\" />\n              \n              <motion.div\n                className=\"text-lg sm:text-xl md:text-3xl lg:text-4xl xl:text-5xl font-serif font-bold text-primary relative z-10\"\n                key={item.value}\n                initial={{ scale: 1.2, opacity: 0 }}\n                animate={{ scale: 1, opacity: 1 }}\n                transition={{ type: \"spring\", stiffness: 200 }}\n              >\n                {item.value.toString().padStart(2, '0')}\n              </motion.div>\n              <div className=\"text-[10px] sm:text-xs md:text-sm lg:text-base text-muted-foreground mt-0.5 sm:mt-1 md:mt-2 font-medium relative z-10 flex items-center justify-center gap-1\">\n                <item.icon size={12} className=\"hidden lg:inline\" />\n                {item.label}\n              </div>\n            </motion.div>\n          ))}\n        </motion.div>\n\n        {/* CTA Buttons */}\n        <motion.div\n          className=\"flex flex-col sm:flex-row gap-4 justify-center\"\n          variants={containerVariants}\n        >\n          <motion.a\n            href=\"#rsvp\"\n            className=\"group relative inline-flex items-center justify-center min-h-10 md:min-h-12 px-6 md:px-10 rounded-full bg-primary text-primary-foreground border border-primary-border font-medium shadow-2xl overflow-hidden\"\n            data-testid=\"button-rsvp\"\n            variants={itemVariants}\n            whileHover={{ \n              scale: 1.05,\n              y: -2\n            }}\n            whileTap={{ scale: 0.95 }}\n          >\n            {/* Button shine effect */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000\" />\n            <span className=\"relative z-10 text-base md:text-lg font-semibold\">\n              Xác Nhận Tham Dự\n            </span>\n          </motion.a>\n\n          <motion.a\n            href=\"#livestream\"\n            className=\"group relative inline-flex items-center justify-center min-h-10 md:min-h-12 px-6 md:px-10 rounded-full bg-red-600 text-white border border-red-700 font-medium shadow-2xl overflow-hidden\"\n            data-testid=\"button-livestream\"\n            variants={itemVariants}\n            whileHover={{ \n              scale: 1.05,\n              y: -2\n            }}\n            whileTap={{ scale: 0.95 }}\n          >\n            {/* Button shine effect */}\n            <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 transform translate-x-[-100%] group-hover:translate-x-[100%] transition-transform duration-1000\" />\n            <span className=\"relative z-10 text-base md:text-lg font-semibold flex items-center gap-2\">\n              <span className=\"w-2 h-2 bg-white rounded-full animate-pulse\"></span>\n              Xem Livestream\n            </span>\n          </motion.a>\n\n          <motion.button\n            onClick={() => setShowInvitation(true)}\n            className=\"group inline-flex items-center justify-center min-h-10 md:min-h-12 px-6 md:px-10 rounded-full backdrop-blur-xl bg-background/70 text-foreground border border-border/50 font-medium shadow-xl hover:shadow-2xl transition-all duration-300\"\n            data-testid=\"button-invitation\"\n            variants={itemVariants}\n            whileHover={{ \n              scale: 1.05,\n              y: -2\n            }}\n            whileTap={{ scale: 0.95 }}\n          >\n            <span className=\"text-base md:text-lg font-semibold\">\n              Xem Thiệp Cưới\n            </span>\n          </motion.button>\n        </motion.div>\n      </motion.div>\n\n      {/* Scroll Indicator */}\n      <motion.div\n        className=\"absolute bottom-8 left-1/2 -translate-x-1/2\"\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 2, duration: 0.8 }}\n      >\n        <motion.div\n          className=\"w-6 h-10 border-2 border-foreground/30 rounded-full flex justify-center relative cursor-pointer\"\n          animate={{ y: [0, 10, 0] }}\n          transition={{ duration: 2, repeat: Infinity }}\n          whileHover={{ scale: 1.1 }}\n        >\n          <motion.div\n            className=\"w-1 h-3 bg-foreground/50 rounded-full mt-2\"\n            animate={{ opacity: [0.3, 1, 0.3] }}\n            transition={{ duration: 1.5, repeat: Infinity }}\n          />\n        </motion.div>\n        <motion.p\n          className=\"text-foreground/60 text-sm mt-2 text-center\"\n          animate={{ opacity: [0.5, 1, 0.5] }}\n          transition={{ duration: 2, repeat: Infinity }}\n        >\n          Cuộn xuống\n        </motion.p>\n      </motion.div>\n\n      {/* Wedding Invitation Popup */}\n      <AnimatePresence>\n        {showInvitation && welcomePopup && (\n          <motion.div\n            className=\"fixed inset-0 z-[100] flex items-center justify-center bg-black/70 backdrop-blur-sm p-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setShowInvitation(false)}\n            data-testid=\"popup-overlay-invitation\"\n          >\n            <motion.div\n              className=\"relative max-w-2xl w-full bg-white dark:bg-gray-900 rounded-3xl shadow-2xl overflow-hidden\"\n              initial={{ scale: 0.8, y: 50 }}\n              animate={{ scale: 1, y: 0 }}\n              exit={{ scale: 0.8, y: 50 }}\n              transition={{ type: \"spring\", duration: 0.5 }}\n              onClick={(e) => e.stopPropagation()}\n              data-testid=\"popup-content-invitation\"\n            >\n              <button\n                onClick={() => setShowInvitation(false)}\n                className=\"absolute top-4 right-4 z-10 w-10 h-10 bg-black/50 hover:bg-black/70 rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110\"\n                data-testid=\"button-close-invitation\"\n              >\n                <X className=\"text-white\" size={24} />\n              </button>\n              \n              <div className=\"relative\">\n                <img\n                  src={welcomePopup.imageUrl}\n                  alt={welcomePopup.title || \"Thiệp Cưới\"}\n                  className=\"w-full max-h-[80vh] object-contain\"\n                  data-testid=\"img-invitation\"\n                />\n                \n                {(welcomePopup.title || welcomePopup.description) && (\n                  <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6 text-white\">\n                    {welcomePopup.title && (\n                      <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"heading-invitation-title\">\n                        {welcomePopup.title}\n                      </h3>\n                    )}\n                    {welcomePopup.description && (\n                      <p className=\"text-lg\" data-testid=\"text-invitation-description\">\n                        {welcomePopup.description}\n                      </p>\n                    )}\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </section>\n  );\n}","size_bytes":19319},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/AdminPopups.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Image as ImageIcon, Upload, Trash2, Eye } from \"lucide-react\";\nimport type { Popup } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\nimport { motion } from \"framer-motion\";\n\nexport default function AdminPopups() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [uploadingWelcome, setUploadingWelcome] = useState(false);\n  const [uploadingScrollEnd, setUploadingScrollEnd] = useState(false);\n\n  const { data: popups, isLoading } = useQuery<Popup[]>({\n    queryKey: [\"/api/popups\"],\n  });\n\n  const welcomePopup = popups?.find((p) => p.type === \"welcome\");\n  const scrollEndPopup = popups?.find((p) => p.type === \"scroll_end\");\n\n  const createMutation = useMutation({\n    mutationFn: async (data: { type: string; imageUrl: string; isActive: boolean }) =>\n      await apiRequest(\"POST\", \"/api/popups\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/popups\"] });\n      toast({ title: \"✅ Popup đã được tạo\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Lỗi tạo popup\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, ...data }: { id: string; isActive?: boolean; imageUrl?: string }) =>\n      await apiRequest(\"PATCH\", `/api/popups/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/popups\"] });\n      toast({ title: \"✅ Popup đã được cập nhật\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Lỗi cập nhật popup\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => await apiRequest(\"DELETE\", `/api/popups/${id}`, {}),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/popups\"] });\n      toast({ title: \"✅ Popup đã được xóa\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Lỗi xóa popup\", variant: \"destructive\" });\n    },\n  });\n\n  const handleImageUpload = async (file: File, type: string) => {\n    const setUploading = type === \"welcome\" ? setUploadingWelcome : setUploadingScrollEnd;\n    \n    try {\n      setUploading(true);\n      const imageUrl = await uploadImageToCloudinary(file, (progress) => {\n        console.log(`Upload progress: ${progress}%`);\n      });\n\n      const existingPopup = type === \"welcome\" ? welcomePopup : scrollEndPopup;\n\n      if (existingPopup) {\n        await updateMutation.mutateAsync({ id: existingPopup.id, imageUrl });\n      } else {\n        await createMutation.mutateAsync({ type, imageUrl, isActive: true });\n      }\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi upload ảnh\",\n        description: \"Vui lòng thử lại\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n    }\n  };\n\n  const toggleActive = (popup: Popup) => {\n    updateMutation.mutate({ id: popup.id, isActive: !popup.isActive });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-muted-foreground\">Đang tải...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-6xl\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n      >\n        <div className=\"mb-6\">\n          <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"heading-popup-management\">\n            Quản Lý Popup\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Cài đặt hình ảnh popup hiển thị khi khách truy cập website\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-6\">\n          {/* Welcome Popup */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ImageIcon className=\"text-primary\" size={20} />\n                Popup Chào Mừng\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Hiển thị khi khách lần đầu truy cập trang web\n              </p>\n\n              {welcomePopup?.imageUrl && (\n                <div className=\"relative group\">\n                  <img\n                    src={welcomePopup.imageUrl}\n                    alt=\"Welcome Popup\"\n                    className=\"w-full h-48 object-cover rounded-lg\"\n                    data-testid=\"img-welcome-popup-preview\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => deleteMutation.mutate(welcomePopup.id)}\n                      data-testid=\"button-delete-welcome-popup\"\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"welcome-upload\">Upload Hình Ảnh</Label>\n                <Input\n                  id=\"welcome-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) handleImageUpload(file, \"welcome\");\n                  }}\n                  disabled={uploadingWelcome}\n                  data-testid=\"input-upload-welcome-popup\"\n                />\n              </div>\n\n              {welcomePopup && (\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"welcome-active\">Kích hoạt</Label>\n                  <Switch\n                    id=\"welcome-active\"\n                    checked={welcomePopup.isActive}\n                    onCheckedChange={() => toggleActive(welcomePopup)}\n                    data-testid=\"switch-welcome-active\"\n                  />\n                </div>\n              )}\n\n              {uploadingWelcome && (\n                <p className=\"text-sm text-primary\">Đang upload...</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Scroll End Popup */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <ImageIcon className=\"text-primary\" size={20} />\n                Popup Cuối Trang\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Hiển thị khi khách lướt đến cuối trang web\n              </p>\n\n              {scrollEndPopup?.imageUrl && (\n                <div className=\"relative group\">\n                  <img\n                    src={scrollEndPopup.imageUrl}\n                    alt=\"Scroll End Popup\"\n                    className=\"w-full h-48 object-cover rounded-lg\"\n                    data-testid=\"img-scrollend-popup-preview\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity rounded-lg flex items-center justify-center gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      onClick={() => deleteMutation.mutate(scrollEndPopup.id)}\n                      data-testid=\"button-delete-scrollend-popup\"\n                    >\n                      <Trash2 size={16} />\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              <div>\n                <Label htmlFor=\"scrollend-upload\">Upload Hình Ảnh</Label>\n                <Input\n                  id=\"scrollend-upload\"\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={(e) => {\n                    const file = e.target.files?.[0];\n                    if (file) handleImageUpload(file, \"scroll_end\");\n                  }}\n                  disabled={uploadingScrollEnd}\n                  data-testid=\"input-upload-scrollend-popup\"\n                />\n              </div>\n\n              {scrollEndPopup && (\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"scrollend-active\">Kích hoạt</Label>\n                  <Switch\n                    id=\"scrollend-active\"\n                    checked={scrollEndPopup.isActive}\n                    onCheckedChange={() => toggleActive(scrollEndPopup)}\n                    data-testid=\"switch-scrollend-active\"\n                  />\n                </div>\n              )}\n\n              {uploadingScrollEnd && (\n                <p className=\"text-sm text-primary\">Đang upload...</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Info Card */}\n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Eye className=\"text-blue-500\" size={20} />\n              Hướng Dẫn\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n            <p>✨ <strong>Popup Chào Mừng:</strong> Hiển thị 1 lần duy nhất khi khách lần đầu vào trang (lưu trong localStorage)</p>\n            <p>✨ <strong>Popup Cuối Trang:</strong> Hiển thị khi khách lướt xuống hết 95% trang web</p>\n            <p>💡 <strong>Tip:</strong> Sử dụng hình ảnh có kích thước phù hợp (tối đa 20MB) để tải nhanh hơn</p>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":10360},"client/src/components/FontProvider.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { Settings } from \"@shared/schema\";\nimport { useEffect } from \"react\";\n\nexport function FontProvider({ children }: { children: React.ReactNode }) {\n  const { data: settings } = useQuery<Settings | null>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  useEffect(() => {\n    if (settings) {\n      const fontsToLoad: string[] = [];\n      \n      // Collect all selected fonts\n      if (settings.fontHeading && settings.fontHeading !== 'Georgia' && settings.fontHeading !== 'Times New Roman') {\n        fontsToLoad.push(settings.fontHeading);\n      }\n      if (settings.fontBody && settings.fontBody !== 'Georgia' && settings.fontBody !== 'Times New Roman') {\n        fontsToLoad.push(settings.fontBody);\n      }\n      if (settings.fontCursive) {\n        fontsToLoad.push(settings.fontCursive);\n      }\n      if (settings.fontSerif && settings.fontSerif !== 'Georgia' && settings.fontSerif !== 'Times New Roman') {\n        fontsToLoad.push(settings.fontSerif);\n      }\n\n      // Remove duplicates\n      const uniqueFonts = Array.from(new Set(fontsToLoad));\n\n      // Remove existing Google Fonts link if present\n      const existingLink = document.getElementById('google-fonts-dynamic');\n      if (existingLink) {\n        existingLink.remove();\n      }\n\n      // Load fonts from Google Fonts if there are any to load\n      if (uniqueFonts.length > 0) {\n        const link = document.createElement('link');\n        link.id = 'google-fonts-dynamic';\n        link.rel = 'stylesheet';\n        \n        // Build Google Fonts URL with Vietnamese subset\n        const fontFamilies = uniqueFonts\n          .map(font => `family=${encodeURIComponent(font)}:wght@400;500;600;700`)\n          .join('&');\n        link.href = `https://fonts.googleapis.com/css2?${fontFamilies}&display=swap&subset=vietnamese`;\n        \n        document.head.appendChild(link);\n      }\n\n      // Apply fonts to CSS variables\n      const root = document.documentElement;\n      \n      if (settings.fontHeading) {\n        root.style.setProperty('--font-serif', `'${settings.fontHeading}', 'Noto Serif', Georgia, serif`);\n      }\n      \n      if (settings.fontBody) {\n        root.style.setProperty('--font-body', `'${settings.fontBody}', 'Noto Serif', Georgia, serif`);\n        root.style.setProperty('--font-sans', `'${settings.fontBody}', 'Noto Serif', Georgia, serif`);\n      }\n      \n      if (settings.fontCursive) {\n        root.style.setProperty('--font-cursive', `'${settings.fontCursive}', 'Dancing Script', cursive`);\n      }\n      \n      if (settings.fontSerif) {\n        root.style.setProperty('--font-serif-alt', `'${settings.fontSerif}', 'Noto Serif', Georgia, serif`);\n      }\n    }\n  }, [settings]);\n\n  return <>{children}</>;\n}\n","size_bytes":2763},"client/src/components/FontPreview.tsx":{"content":"import { useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface FontPreviewProps {\n  fontFamily: string;\n  previewType: 'heading' | 'body' | 'cursive' | 'serif';\n  className?: string;\n}\n\nconst previewContent = {\n  heading: {\n    title: \"Tiêu đề chính\",\n    description: \"Font này hiển thị ở phần Hero (đầu trang) và các tiêu đề lớn\",\n    examples: [\n      { text: \"Xuân Lâm & Xuân Lợi\", size: \"32px\", label: \"Tên cặp đôi trên Hero\" },\n      { text: \"Câu Chuyện Tình Yêu\", size: \"28px\", label: \"Tiêu đề các phần\" },\n      { text: \"Lời Chúc Mừng\", size: \"24px\", label: \"Tiêu đề phụ\" },\n    ],\n    icon: \"🎨\",\n    color: \"from-purple-500/10 to-purple-500/5\",\n    borderColor: \"border-purple-200\",\n  },\n  body: {\n    title: \"Nội dung chính\",\n    description: \"Font này dùng cho tất cả đoạn văn và nội dung thông tin\",\n    examples: [\n      { text: \"Chúng tôi rất vui mừng được chia sẻ niềm hạnh phúc này cùng bạn.\", size: \"16px\", label: \"Đoạn văn giới thiệu\" },\n      { text: \"Địa điểm: Trung tâm hội nghị ABC, TP. Hồ Chí Minh\", size: \"15px\", label: \"Thông tin sự kiện\" },\n      { text: \"Thời gian: 10:00 - 25/12/2025\", size: \"14px\", label: \"Chi tiết nhỏ\" },\n    ],\n    icon: \"📝\",\n    color: \"from-blue-500/10 to-blue-500/5\",\n    borderColor: \"border-blue-200\",\n  },\n  cursive: {\n    title: \"Chữ nghệ thuật\",\n    description: \"Font chữ viết tay lãng mạn dùng cho tên cô dâu/chú rể\",\n    examples: [\n      { text: \"Xuân Lâm\", size: \"36px\", label: \"Tên chú rể\" },\n      { text: \"Xuân Lợi\", size: \"36px\", label: \"Tên cô dâu\" },\n      { text: \"Trân trọng kính mời\", size: \"20px\", label: \"Lời mời đặc biệt\" },\n    ],\n    icon: \"✨\",\n    color: \"from-pink-500/10 to-pink-500/5\",\n    borderColor: \"border-pink-200\",\n  },\n  serif: {\n    title: \"Font phụ trợ\",\n    description: \"Font serif bổ sung cho các phần văn bản đặc biệt, lời cảm ơn\",\n    examples: [\n      { text: \"Chân thành cảm ơn sự hiện diện của quý khách!\", size: \"18px\", label: \"Lời cảm ơn\" },\n      { text: \"Đám cưới của chúng tôi sẽ được tổ chức vào ngày 25/12/2025\", size: \"16px\", label: \"Thông tin quan trọng\" },\n      { text: \"Rất mong được đón tiếp\", size: \"15px\", label: \"Tin nhắn đặc biệt\" },\n    ],\n    icon: \"📜\",\n    color: \"from-green-500/10 to-green-500/5\",\n    borderColor: \"border-green-200\",\n  },\n};\n\nexport function FontPreview({ fontFamily, previewType, className = '' }: FontPreviewProps) {\n  useEffect(() => {\n    if (!fontFamily || fontFamily === 'Georgia' || fontFamily === 'Times New Roman') {\n      return;\n    }\n\n    const linkId = `font-preview-${fontFamily.replace(/\\s+/g, '-')}`;\n    const existingLink = document.getElementById(linkId);\n    \n    if (!existingLink) {\n      const link = document.createElement('link');\n      link.id = linkId;\n      link.rel = 'stylesheet';\n      link.href = `https://fonts.googleapis.com/css2?family=${encodeURIComponent(fontFamily)}:wght@400;500;600;700&display=swap&subset=vietnamese`;\n      document.head.appendChild(link);\n    }\n  }, [fontFamily]);\n\n  const content = previewContent[previewType];\n\n  return (\n    <motion.div \n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      className={`mt-3 p-5 bg-gradient-to-br ${content.color} rounded-xl border-2 ${content.borderColor} ${className}`}\n    >\n      <div className=\"flex items-center gap-2 mb-3 pb-3 border-b border-gray-200 dark:border-gray-700\">\n        <span className=\"text-2xl\">{content.icon}</span>\n        <div>\n          <p className=\"text-sm font-semibold text-gray-900 dark:text-gray-100\">{content.title}</p>\n          <p className=\"text-xs text-gray-600 dark:text-gray-400\">{content.description}</p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {content.examples.map((example, index) => (\n          <motion.div \n            key={index}\n            initial={{ opacity: 0, x: -10 }}\n            animate={{ opacity: 1, x: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className=\"bg-white dark:bg-gray-900 rounded-lg p-4 border border-gray-200 dark:border-gray-700\"\n          >\n            <p className=\"text-xs text-gray-500 dark:text-gray-400 mb-2 font-medium\">\n              📍 {example.label}\n            </p>\n            <p \n              style={{ \n                fontFamily: `'${fontFamily}', serif`, \n                fontSize: example.size,\n                lineHeight: '1.4'\n              }}\n              className=\"text-gray-900 dark:text-gray-100\"\n            >\n              {example.text}\n            </p>\n          </motion.div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 pt-3 border-t border-gray-200 dark:border-gray-700\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          Font đang dùng: <span className=\"font-semibold text-gray-700 dark:text-gray-300\">{fontFamily}</span>\n        </p>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":5128},"setup_and_run.sh":{"content":"\n#!/bin/bash\n\n# File đánh dấu đã setup\nSETUP_FLAG=\".setup_complete\"\n\necho \"🚀 Wedding Site - Auto Setup & Run Script\"\necho \"==========================================\"\n\n# Kiểm tra xem đã setup chưa\nif [ ! -f \"$SETUP_FLAG\" ]; then\n    echo \"📦 Lần chạy đầu tiên - Đang setup môi trường...\"\n    \n    # 1. Cài đặt dependencies\n    echo \"📥 Đang cài đặt dependencies...\"\n    npm install\n    if [ $? -ne 0 ]; then\n        echo \"❌ Lỗi khi cài đặt dependencies!\"\n        exit 1\n    fi\n    \n    # 2. Kiểm tra file .env\n    if [ ! -f \".env\" ]; then\n        echo \"⚠️  Chưa có file .env!\"\n        echo \"📝 Đang tạo file .env từ .env.example...\"\n        cp .env.example .env\n        echo \"\"\n        echo \"⚠️  QUAN TRỌNG: Vui lòng cập nhật các giá trị trong file .env:\"\n        echo \"   - DATABASE_URL: Connection string PostgreSQL\"\n        echo \"   - SESSION_SECRET: Random secret key\"\n        echo \"\"\n        read -p \"Nhấn Enter sau khi đã cập nhật file .env...\"\n    fi\n    \n    # 3. Push database schema\n    echo \"🗄️  Đang tạo database schema...\"\n    npm run db:push\n    if [ $? -ne 0 ]; then\n        echo \"❌ Lỗi khi tạo database schema!\"\n        exit 1\n    fi\n    \n    # 4. Seed database\n    echo \"🌱 Đang nạp dữ liệu mẫu vào database...\"\n    npx tsx server/seed.ts\n    if [ $? -ne 0 ]; then\n        echo \"❌ Lỗi khi nạp dữ liệu!\"\n        exit 1\n    fi\n    \n    # Đánh dấu đã setup xong\n    echo \"✅ Setup hoàn tất!\" > \"$SETUP_FLAG\"\n    echo \"\"\n    echo \"🎉 Setup thành công!\"\n    echo \"📋 Thông tin đăng nhập admin:\"\n    echo \"   Username: admin\"\n    echo \"   Password: admin123\"\n    echo \"\"\nelse\n    echo \"✅ Đã setup trước đó - Bỏ qua bước setup\"\nfi\n\n# Chạy development server\necho \"🌐 Đang khởi động web server...\"\necho \"📍 Web sẽ chạy tại: http://0.0.0.0:5000\"\necho \"🔑 Đăng nhập admin tại: http://0.0.0.0:5000/admin/login\"\necho \"\"\necho \"Nhấn Ctrl+C để dừng server\"\necho \"==========================================\"\n\nnpm run dev\n","size_bytes":2112},"client/src/components/GuestPhotoUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, Camera, Check, Image as ImageIcon, FileImage } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\n\nexport default function GuestPhotoUpload() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [formData, setFormData] = useState({\n    url: \"\",\n    caption: \"\",\n    guestName: \"\",\n  });\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"POST\", \"/api/guest-photos\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/guest-photos\"] });\n      toast({\n        title: \"✅ Upload Thành Công!\",\n        description: \"Ảnh của bạn đang chờ được duyệt và sẽ xuất hiện trong gallery sớm.\",\n      });\n      setShowSuccess(true);\n      setFormData({ url: \"\", caption: \"\", guestName: \"\" });\n      setTimeout(() => setShowSuccess(false), 3000);\n    },\n    onError: () => {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể upload ảnh. Vui lòng thử lại.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(0);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file, (progress) => {\n        setUploadProgress(progress);\n      });\n\n      setFormData({ ...formData, url: imageUrl });\n\n      toast({\n        title: \"✅ Tải lên thành công!\",\n        description: \"Ảnh đã được tải lên, hãy điền thông tin và gửi\",\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.url.trim()) {\n      toast({\n        title: \"⚠️ Thiếu thông tin\",\n        description: \"Vui lòng tải ảnh lên hoặc nhập link ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    uploadMutation.mutate(formData);\n  };\n\n  return (\n    <section id=\"guest-photos\" data-testid=\"section-guest-photo-upload\" className=\"py-20 bg-gradient-to-br from-indigo-50 to-purple-50 dark:from-indigo-950/20 dark:to-purple-950/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-block mb-4\">\n            <Camera className=\"w-12 h-12 text-primary mx-auto\" />\n          </div>\n          <h2 className=\"font-heading text-4xl md:text-5xl lg:text-6xl font-bold mb-4\">\n            📸 Chia Sẻ Khoảnh Khắc\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Hãy upload ảnh của bạn chụp trong tiệc để chia sẻ những khoảnh khắc đáng nhớ!\n          </p>\n        </div>\n\n        <div className=\"max-w-2xl mx-auto\">\n          <Card className=\"shadow-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Upload className=\"w-5 h-5\" />\n                Upload Ảnh Của Bạn\n              </CardTitle>\n              <CardDescription>\n                Ảnh của bạn sẽ được kiểm duyệt và xuất hiện trong gallery kỷ niệm\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <AnimatePresence mode=\"wait\">\n                {showSuccess ? (\n                  <motion.div\n                    key=\"success\"\n                    initial={{ opacity: 0, scale: 0.8 }}\n                    animate={{ opacity: 1, scale: 1 }}\n                    exit={{ opacity: 0, scale: 0.8 }}\n                    className=\"text-center py-12\"\n                  >\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      transition={{ type: \"spring\", stiffness: 200, damping: 10 }}\n                    >\n                      <Check className=\"w-20 h-20 text-green-500 mx-auto mb-4\" />\n                    </motion.div>\n                    <h3 className=\"text-2xl font-bold text-green-600 mb-2\">\n                      Upload Thành Công!\n                    </h3>\n                    <p className=\"text-muted-foreground\">\n                      Cảm ơn bạn đã chia sẻ khoảnh khắc đẹp\n                    </p>\n                  </motion.div>\n                ) : (\n                  <motion.form\n                    key=\"form\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    onSubmit={handleSubmit}\n                    className=\"space-y-6\"\n                  >\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"photo-upload\">Tải Ảnh Lên *</Label>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          className=\"flex-1 gap-2\"\n                          onClick={() => fileInputRef.current?.click()}\n                          disabled={uploading}\n                          data-testid=\"button-upload-from-device\"\n                        >\n                          {uploading ? (\n                            <>\n                              <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                              Đang tải {uploadProgress}%\n                            </>\n                          ) : (\n                            <>\n                              <FileImage className=\"w-4 h-4\" />\n                              Chọn Ảnh Từ Thiết Bị\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                      <input\n                        type=\"file\"\n                        ref={fileInputRef}\n                        onChange={handleFileSelect}\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                      />\n                      <p className=\"text-xs text-muted-foreground\">\n                        Hoặc nhập link ảnh bên dưới nếu ảnh đã được upload lên dịch vụ khác\n                      </p>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"url\">Link Ảnh (Tùy chọn)</Label>\n                      <Input\n                        data-testid=\"input-photo-url\"\n                        id=\"url\"\n                        type=\"url\"\n                        placeholder=\"https://example.com/your-photo.jpg\"\n                        value={formData.url}\n                        onChange={(e) => setFormData({ ...formData, url: e.target.value })}\n                      />\n                    </div>\n\n                    {formData.url && (\n                      <motion.div\n                        initial={{ opacity: 0, height: 0 }}\n                        animate={{ opacity: 1, height: \"auto\" }}\n                        className=\"rounded-lg overflow-hidden border\"\n                      >\n                        <img\n                          src={formData.url}\n                          alt=\"Preview\"\n                          className=\"w-full max-h-64 object-contain bg-muted\"\n                          onError={(e) => {\n                            (e.target as HTMLImageElement).style.display = \"none\";\n                          }}\n                        />\n                      </motion.div>\n                    )}\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"guestName\">Tên Của Bạn</Label>\n                      <Input\n                        data-testid=\"input-guest-name\"\n                        id=\"guestName\"\n                        placeholder=\"Tên bạn...\"\n                        value={formData.guestName}\n                        onChange={(e) => setFormData({ ...formData, guestName: e.target.value })}\n                      />\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"caption\">Chú Thích</Label>\n                      <Textarea\n                        data-testid=\"textarea-caption\"\n                        id=\"caption\"\n                        placeholder=\"Mô tả về bức ảnh...\"\n                        value={formData.caption}\n                        onChange={(e) => setFormData({ ...formData, caption: e.target.value })}\n                        rows={3}\n                      />\n                    </div>\n\n                    <Button\n                      data-testid=\"button-submit-photo\"\n                      type=\"submit\"\n                      className=\"w-full gap-2\"\n                      size=\"lg\"\n                      disabled={uploadMutation.isPending}\n                    >\n                      {uploadMutation.isPending ? (\n                        <>\n                          <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                          Đang Upload...\n                        </>\n                      ) : (\n                        <>\n                          <Upload className=\"w-5 h-5\" />\n                          Upload Ảnh\n                        </>\n                      )}\n                    </Button>\n                  </motion.form>\n                )}\n              </AnimatePresence>\n            </CardContent>\n          </Card>\n\n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            <p>💡 <strong>Mẹo:</strong> Bạn có thể upload nhiều ảnh bằng cách gửi form nhiều lần</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":11349},"client/src/pages/AdminLivestream.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Video, Save, ExternalLink, Calendar, MessageCircle, Upload, X } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LivestreamInfo, CoupleInfo } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { uploadImageToCloudinary } from \"@/lib/imageUpload\";\n\nexport default function AdminLivestream() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n\n  const { data: livestream, isLoading } = useQuery<LivestreamInfo>({\n    queryKey: [\"/api/livestream\"],\n  });\n\n  const { data: coupleInfo } = useQuery<CoupleInfo>({\n    queryKey: [\"/api/couple\"],\n  });\n\n  const [formData, setFormData] = useState({\n    isActive: true,\n    platform: \"youtube\",\n    streamUrl: \"\",\n    streamTitle: \"\",\n    streamDescription: \"\",\n    startTime: \"\",\n    endTime: \"\",\n    thumbnailUrl: \"\",\n    chatEnabled: true,\n  });\n\n  useEffect(() => {\n    if (livestream) {\n      setFormData({\n        isActive: livestream.isActive,\n        platform: livestream.platform,\n        streamUrl: livestream.streamUrl,\n        streamTitle: livestream.streamTitle || \"\",\n        streamDescription: livestream.streamDescription || \"\",\n        startTime: livestream.startTime ? new Date(livestream.startTime).toISOString().slice(0, 16) : \"\",\n        endTime: livestream.endTime ? new Date(livestream.endTime).toISOString().slice(0, 16) : \"\",\n        thumbnailUrl: livestream.thumbnailUrl || coupleInfo?.heroImage || \"\",\n        chatEnabled: livestream.chatEnabled,\n      });\n    }\n  }, [livestream, coupleInfo]);\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"POST\", \"/api/livestream\", {\n        ...data,\n        startTime: data.startTime ? new Date(data.startTime) : undefined,\n        endTime: data.endTime ? new Date(data.endTime) : undefined,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/livestream\"] });\n      toast({ \n        title: \"✅ Đã lưu\",\n        description: \"Thông tin livestream đã được cập nhật\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật thông tin livestream\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Vui lòng chọn file hình ảnh\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Kích thước file không được vượt quá 5MB\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(0);\n\n    try {\n      const imageUrl = await uploadImageToCloudinary(file, (progress) => {\n        setUploadProgress(progress);\n      });\n\n      setFormData({ ...formData, thumbnailUrl: imageUrl });\n\n      toast({\n        title: \"✅ Tải lên thành công!\",\n        description: \"Ảnh thumbnail đã được tải lên\",\n      });\n    } catch (error) {\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể tải lên ảnh\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setUploading(false);\n      if (event.target) {\n        event.target.value = '';\n      }\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    saveMutation.mutate(formData);\n  };\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"loading-spinner\" className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"page-admin-livestream\" className=\"space-y-6 p-6 max-w-4xl mx-auto\">\n      <div>\n        <h1 className=\"text-3xl font-bold bg-gradient-to-r from-red-500 to-pink-600 bg-clip-text text-transparent\">\n          🎥 Quản Lý Livestream\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">Cài đặt trực tiếp đám cưới cho khách mời xem online</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Cài Đặt Livestream</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"isActive\" className=\"text-base\">Kích Hoạt Livestream</Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Bật/tắt tính năng xem trực tiếp trên website\n                </p>\n              </div>\n              <Switch\n                data-testid=\"switch-is-active\"\n                id=\"isActive\"\n                checked={formData.isActive}\n                onCheckedChange={(checked) => setFormData({ ...formData, isActive: checked })}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"platform\">Nền Tảng</Label>\n                <Select \n                  value={formData.platform} \n                  onValueChange={(value) => setFormData({ ...formData, platform: value })}\n                >\n                  <SelectTrigger data-testid=\"select-platform\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"youtube\">YouTube</SelectItem>\n                    <SelectItem value=\"facebook\">Facebook</SelectItem>\n                    <SelectItem value=\"zoom\">Zoom</SelectItem>\n                    <SelectItem value=\"custom\">Khác</SelectItem>\n                  </SelectContent>\n                </Select>\n                <p className=\"text-xs text-muted-foreground\">\n                  Chọn nền tảng livestream bạn sử dụng\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"streamUrl\">Link Xem Trực Tiếp *</Label>\n                <div className=\"flex gap-2\">\n                  <Input\n                    data-testid=\"input-stream-url\"\n                    id=\"streamUrl\"\n                    type=\"url\"\n                    placeholder=\"https://youtube.com/watch?v=...\"\n                    value={formData.streamUrl}\n                    onChange={(e) => setFormData({ ...formData, streamUrl: e.target.value })}\n                    required\n                  />\n                  {formData.streamUrl && (\n                    <Button\n                      data-testid=\"button-test-link\"\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"icon\"\n                      onClick={() => window.open(formData.streamUrl, '_blank')}\n                    >\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"streamTitle\">Tiêu Đề Livestream</Label>\n              <Input\n                data-testid=\"input-stream-title\"\n                id=\"streamTitle\"\n                placeholder=\"Trực Tiếp Đám Cưới...\"\n                value={formData.streamTitle}\n                onChange={(e) => setFormData({ ...formData, streamTitle: e.target.value })}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"streamDescription\">Mô Tả</Label>\n              <Textarea\n                data-testid=\"textarea-stream-description\"\n                id=\"streamDescription\"\n                placeholder=\"Thông tin về buổi livestream...\"\n                value={formData.streamDescription}\n                onChange={(e) => setFormData({ ...formData, streamDescription: e.target.value })}\n                rows={4}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"startTime\" className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  Thời Gian Bắt Đầu\n                </Label>\n                <Input\n                  data-testid=\"input-start-time\"\n                  id=\"startTime\"\n                  type=\"datetime-local\"\n                  value={formData.startTime}\n                  onChange={(e) => setFormData({ ...formData, startTime: e.target.value })}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"endTime\" className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-4 h-4\" />\n                  Thời Gian Kết Thúc\n                </Label>\n                <Input\n                  data-testid=\"input-end-time\"\n                  id=\"endTime\"\n                  type=\"datetime-local\"\n                  value={formData.endTime}\n                  onChange={(e) => setFormData({ ...formData, endTime: e.target.value })}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"thumbnailUrl\">Ảnh Thumbnail</Label>\n              <p className=\"text-xs text-muted-foreground\">\n                Mặc định sử dụng ảnh background đám cưới. Bạn có thể tải ảnh mới hoặc nhập URL.\n              </p>\n              <div className=\"flex gap-2\">\n                <Input\n                  data-testid=\"input-thumbnail-url\"\n                  id=\"thumbnailUrl\"\n                  type=\"url\"\n                  placeholder={coupleInfo?.heroImage || \"https://example.com/thumbnail.jpg\"}\n                  value={formData.thumbnailUrl}\n                  onChange={(e) => setFormData({ ...formData, thumbnailUrl: e.target.value })}\n                />\n                <input\n                  type=\"file\"\n                  ref={fileInputRef}\n                  onChange={handleFileSelect}\n                  accept=\"image/*\"\n                  className=\"hidden\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => fileInputRef.current?.click()}\n                  disabled={uploading}\n                  data-testid=\"button-upload-thumbnail\"\n                >\n                  {uploading ? (\n                    <>\n                      <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2\" />\n                      {uploadProgress}%\n                    </>\n                  ) : (\n                    <>\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Tải lên\n                    </>\n                  )}\n                </Button>\n                {formData.thumbnailUrl && formData.thumbnailUrl !== coupleInfo?.heroImage && (\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={() => setFormData({ ...formData, thumbnailUrl: coupleInfo?.heroImage || \"\" })}\n                    data-testid=\"button-reset-thumbnail\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </Button>\n                )}\n              </div>\n              {formData.thumbnailUrl && (\n                <div className=\"mt-2 rounded-lg overflow-hidden border\">\n                  <img\n                    src={formData.thumbnailUrl}\n                    alt=\"Thumbnail preview\"\n                    className=\"w-full max-h-48 object-contain bg-muted\"\n                    data-testid=\"img-thumbnail-preview\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 border rounded-lg\">\n              <div className=\"space-y-0.5\">\n                <Label htmlFor=\"chatEnabled\" className=\"text-base flex items-center gap-2\">\n                  <MessageCircle className=\"w-4 h-4\" />\n                  Cho Phép Chat\n                </Label>\n                <p className=\"text-sm text-muted-foreground\">\n                  Bật/tắt khả năng chat trong livestream\n                </p>\n              </div>\n              <Switch\n                data-testid=\"switch-chat-enabled\"\n                id=\"chatEnabled\"\n                checked={formData.chatEnabled}\n                onCheckedChange={(checked) => setFormData({ ...formData, chatEnabled: checked })}\n              />\n            </div>\n\n            <div className=\"flex gap-4 pt-4\">\n              <Button\n                data-testid=\"button-save\"\n                type=\"submit\"\n                className=\"flex-1 gap-2\"\n                disabled={saveMutation.isPending}\n              >\n                <Save className=\"w-4 h-4\" />\n                {saveMutation.isPending ? \"Đang lưu...\" : \"Lưu Cài Đặt\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {formData.isActive && formData.streamUrl && (\n        <Card>\n          <CardHeader>\n            <CardTitle>Xem Trước Livestream</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"aspect-video bg-muted rounded-lg overflow-hidden relative\">\n              {formData.thumbnailUrl ? (\n                <>\n                  <img\n                    src={formData.thumbnailUrl}\n                    alt=\"Livestream preview\"\n                    className=\"w-full h-full object-contain\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                    <div className=\"text-center text-white\">\n                      <Video className=\"w-16 h-16 mx-auto mb-4\" />\n                      <p className=\"text-xl font-semibold\">\n                        Xem Trước Livestream\n                      </p>\n                    </div>\n                  </div>\n                </>\n              ) : (\n                <div className=\"flex items-center justify-center h-full\">\n                  <div className=\"text-center space-y-2\">\n                    <Video className=\"w-16 h-16 mx-auto text-muted-foreground\" />\n                    <p className=\"text-muted-foreground\">\n                      Chưa có ảnh thumbnail\n                    </p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-3 p-4 bg-muted/50 rounded-lg\">\n              <div>\n                <h3 className=\"font-semibold text-lg\">\n                  {formData.streamTitle || \"Trực Tiếp Đám Cưới\"}\n                </h3>\n                {formData.streamDescription && (\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {formData.streamDescription}\n                  </p>\n                )}\n              </div>\n\n              {(formData.startTime || formData.endTime) && (\n                <div className=\"flex gap-4 text-sm\">\n                  {formData.startTime && (\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4 text-primary\" />\n                      <span>\n                        Bắt đầu: {new Date(formData.startTime).toLocaleString('vi-VN')}\n                      </span>\n                    </div>\n                  )}\n                  {formData.endTime && (\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"w-4 h-4 text-primary\" />\n                      <span>\n                        Kết thúc: {new Date(formData.endTime).toLocaleString('vi-VN')}\n                      </span>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <Button\n              data-testid=\"button-view-on-site\"\n              variant=\"outline\"\n              onClick={() => window.open('/', '_blank')}\n              className=\"w-full gap-2\"\n            >\n              <ExternalLink className=\"w-4 h-4\" />\n              Xem Trên Trang Web\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":17507},"client/src/pages/AdminGuestPhotos.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Check, X, Trash2, Image, Search, Eye } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { GuestPhoto } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function AdminGuestPhotos() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [previewPhoto, setPreviewPhoto] = useState<GuestPhoto | null>(null);\n\n  const { data: photos = [], isLoading } = useQuery<GuestPhoto[]>({\n    queryKey: [\"/api/guest-photos\"],\n  });\n\n  const filteredPhotos = photos.filter(photo => {\n    const matchesSearch = (photo.guestName?.toLowerCase() || \"\").includes(searchTerm.toLowerCase()) || \n                         (photo.caption?.toLowerCase() || \"\").includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"approved\" && photo.approved) ||\n                         (statusFilter === \"pending\" && !photo.approved);\n    return matchesSearch && matchesStatus;\n  });\n\n  const stats = {\n    total: photos.length,\n    approved: photos.filter(p => p.approved).length,\n    pending: photos.filter(p => !p.approved).length,\n  };\n\n  const approveMutation = useMutation({\n    mutationFn: async ({ id, approved }: { id: string; approved: boolean }) => {\n      return await apiRequest(\"PATCH\", `/api/guest-photos/${id}/approve`, { approved });\n    },\n    onSuccess: (_, variables) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/guest-photos\"] });\n      toast({ \n        title: variables.approved ? \"✅ Đã phê duyệt\" : \"🔄 Đã hủy duyệt\",\n        description: `Ảnh đã được ${variables.approved ? 'phê duyệt' : 'hủy duyệt'}`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật ảnh\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/guest-photos/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/guest-photos\"] });\n      toast({ \n        title: \"🗑️ Đã xóa ảnh\",\n        description: \"Ảnh đã được xóa thành công\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa ảnh\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"loading-spinner\" className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"page-admin-guest-photos\" className=\"space-y-6 p-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-purple-500 to-pink-600 bg-clip-text text-transparent\">\n            📸 Ảnh Khách Mời Upload\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">Quản lý ảnh do khách mời tải lên trong tiệc</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card data-testid=\"stat-total\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Tổng Ảnh</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400\">\n              {stats.total}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-approved\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Đã Duyệt</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-green-600 dark:text-green-400\">\n              {stats.approved}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-pending\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Chờ Duyệt</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-orange-600 dark:text-orange-400\">\n              {stats.pending}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            data-testid=\"input-search\"\n            placeholder=\"Tìm kiếm theo tên hoặc chú thích...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={statusFilter} onValueChange={setStatusFilter}>\n          <SelectTrigger data-testid=\"select-status-filter\" className=\"w-48\">\n            <SelectValue placeholder=\"Lọc trạng thái\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Tất cả</SelectItem>\n            <SelectItem value=\"approved\">Đã duyệt</SelectItem>\n            <SelectItem value=\"pending\">Chờ duyệt</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        <AnimatePresence>\n          {filteredPhotos.map((photo) => (\n            <motion.div\n              key={photo.id}\n              data-testid={`photo-card-${photo.id}`}\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.9 }}\n              className=\"group relative\"\n            >\n              <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                <div className=\"relative aspect-square bg-muted\">\n                  <img\n                    src={photo.url}\n                    alt={photo.caption || \"Guest photo\"}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute top-2 right-2 flex gap-2\">\n                    {photo.approved ? (\n                      <Badge className=\"bg-green-500\">Đã duyệt</Badge>\n                    ) : (\n                      <Badge variant=\"secondary\">Chờ duyệt</Badge>\n                    )}\n                  </div>\n                  <div className=\"absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n                    <Button\n                      data-testid={`button-preview-${photo.id}`}\n                      variant=\"secondary\"\n                      size=\"sm\"\n                      onClick={() => setPreviewPhoto(photo)}\n                      className=\"gap-2\"\n                    >\n                      <Eye className=\"w-4 h-4\" />\n                      Xem\n                    </Button>\n                  </div>\n                </div>\n                <CardContent className=\"p-4 space-y-3\">\n                  <div className=\"min-h-[60px]\">\n                    {photo.caption && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {photo.caption}\n                      </p>\n                    )}\n                    {photo.guestName && (\n                      <p className=\"text-xs font-medium text-primary mt-1\">\n                        - {photo.guestName}\n                      </p>\n                    )}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    {!photo.approved && (\n                      <Button\n                        data-testid={`button-approve-${photo.id}`}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 gap-2 border-green-500 text-green-600 hover:bg-green-50\"\n                        onClick={() => approveMutation.mutate({ id: photo.id, approved: true })}\n                      >\n                        <Check className=\"w-4 h-4\" />\n                        Duyệt\n                      </Button>\n                    )}\n                    {photo.approved && (\n                      <Button\n                        data-testid={`button-unapprove-${photo.id}`}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1 gap-2 border-orange-500 text-orange-600 hover:bg-orange-50\"\n                        onClick={() => approveMutation.mutate({ id: photo.id, approved: false })}\n                      >\n                        <X className=\"w-4 h-4\" />\n                        Hủy\n                      </Button>\n                    )}\n                    <Button\n                      data-testid={`button-delete-${photo.id}`}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-red-500 text-red-600 hover:bg-red-50\"\n                      onClick={() => {\n                        if (confirm(\"Bạn có chắc muốn xóa ảnh này?\")) {\n                          deleteMutation.mutate(photo.id);\n                        }\n                      }}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n\n      {filteredPhotos.length === 0 && (\n        <Card>\n          <CardContent className=\"py-12 text-center text-muted-foreground\">\n            <Image className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n            <p>Chưa có ảnh nào được upload</p>\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={!!previewPhoto} onOpenChange={() => setPreviewPhoto(null)}>\n        <DialogContent data-testid=\"dialog-photo-preview\" className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle>Xem Ảnh</DialogTitle>\n          </DialogHeader>\n          {previewPhoto && (\n            <div className=\"space-y-4\">\n              <img\n                src={previewPhoto.url}\n                alt={previewPhoto.caption || \"Guest photo\"}\n                className=\"w-full rounded-lg\"\n              />\n              {previewPhoto.caption && (\n                <div>\n                  <p className=\"font-medium\">Chú thích:</p>\n                  <p className=\"text-muted-foreground\">{previewPhoto.caption}</p>\n                </div>\n              )}\n              {previewPhoto.guestName && (\n                <div>\n                  <p className=\"font-medium\">Người upload:</p>\n                  <p className=\"text-muted-foreground\">{previewPhoto.guestName}</p>\n                </div>\n              )}\n              <div>\n                <p className=\"font-medium\">Trạng thái:</p>\n                <Badge className={previewPhoto.approved ? \"bg-green-500\" : \"\"}>\n                  {previewPhoto.approved ? \"Đã duyệt\" : \"Chờ duyệt\"}\n                </Badge>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":12374},"client/src/components/Livestream.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { LivestreamInfo } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Video, ExternalLink, Clock, Calendar, MessageCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { vi } from \"date-fns/locale\";\n\nexport default function Livestream() {\n  const { data: livestream } = useQuery<LivestreamInfo>({\n    queryKey: [\"/api/livestream\"],\n  });\n\n  if (!livestream?.isActive || !livestream?.streamUrl) {\n    return null;\n  }\n\n  const now = new Date();\n  const startTime = livestream.startTime ? new Date(livestream.startTime) : null;\n  const endTime = livestream.endTime ? new Date(livestream.endTime) : null;\n\n  const isLive = startTime && endTime && now >= startTime && now <= endTime;\n  const isUpcoming = startTime && now < startTime;\n  const isEnded = endTime && now > endTime;\n\n  const getPlatformEmoji = (platform: string) => {\n    switch (platform) {\n      case \"youtube\": return \"📺\";\n      case \"facebook\": return \"📘\";\n      case \"zoom\": return \"💻\";\n      default: return \"🎥\";\n    }\n  };\n\n  const getEmbedUrl = (url: string, platform: string) => {\n    if (platform === \"youtube\") {\n      const videoId = url.match(/(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([^&]+)/)?.[1];\n      return videoId ? `https://www.youtube.com/embed/${videoId}?autoplay=1&mute=1&controls=1&rel=0&modestbranding=1` : url;\n    }\n    if (platform === \"facebook\") {\n      return url.includes('facebook.com') ? url.replace('watch', 'embed') + '?autoplay=true&muted=1' : url;\n    }\n    return url;\n  };\n\n  return (\n    <section id=\"livestream\" data-testid=\"section-livestream\" className=\"py-20 bg-gradient-to-br from-red-50 to-pink-50 dark:from-red-950/20 dark:to-pink-950/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-block mb-4\">\n            <Badge variant={isLive ? \"default\" : \"secondary\"} className=\"text-lg px-4 py-2\">\n              {getPlatformEmoji(livestream.platform)} {isLive && \"🔴 ĐANG TRỰC TIẾP\"}\n              {isUpcoming && \"⏳ SẮP DIỄN RA\"}\n              {isEnded && \"✅ ĐÃ KẾT THÚC\"}\n            </Badge>\n          </div>\n          <h2 className=\"font-heading text-4xl md:text-5xl lg:text-6xl font-bold mb-4\">\n            {livestream.streamTitle || \"Xem Trực Tiếp Đám Cưới\"}\n          </h2>\n          {livestream.streamDescription && (\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              {livestream.streamDescription}\n            </p>\n          )}\n        </div>\n\n        <div className=\"max-w-5xl mx-auto\">\n          <Card className=\"overflow-hidden shadow-2xl\">\n            <CardContent className=\"p-0\">\n              {isLive && (\n                <div className=\"aspect-video bg-black\">\n                  <iframe\n                    src={getEmbedUrl(livestream.streamUrl, livestream.platform)}\n                    title={livestream.streamTitle || \"Wedding Livestream\"}\n                    className=\"w-full h-full\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen\"\n                    allowFullScreen\n                    data-testid=\"iframe-livestream\"\n                  />\n                </div>\n              )}\n\n              {!isLive && livestream.thumbnailUrl && (\n                <div className=\"aspect-video bg-muted relative\">\n                  <img\n                    src={livestream.thumbnailUrl}\n                    alt=\"Livestream thumbnail\"\n                    className=\"w-full h-full object-contain\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/40 flex items-center justify-center\">\n                    <div className=\"text-center text-white\">\n                      <Video className=\"w-16 h-16 mx-auto mb-4\" />\n                      <p className=\"text-xl font-semibold\">\n                        {isUpcoming && \"Livestream sẽ bắt đầu sớm\"}\n                        {isEnded && \"Livestream đã kết thúc\"}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"p-6 space-y-4\">\n                {(startTime || endTime) && (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {startTime && (\n                      <div className=\"flex items-center gap-3\">\n                        <Calendar className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Bắt đầu</p>\n                          <p className=\"font-medium\">\n                            {format(startTime, \"dd/MM/yyyy - HH:mm\", { locale: vi })}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                    {endTime && (\n                      <div className=\"flex items-center gap-3\">\n                        <Clock className=\"w-5 h-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Kết thúc</p>\n                          <p className=\"font-medium\">\n                            {format(endTime, \"dd/MM/yyyy - HH:mm\", { locale: vi })}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                )}\n\n                {livestream.chatEnabled && (\n                  <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                    <MessageCircle className=\"w-4 h-4\" />\n                    <span>Chat trực tiếp đang được bật</span>\n                  </div>\n                )}\n\n                <Button\n                  data-testid=\"button-watch-livestream\"\n                  onClick={() => window.open(livestream.streamUrl, '_blank')}\n                  className=\"w-full gap-2\"\n                  size=\"lg\"\n                >\n                  <ExternalLink className=\"w-5 h-5\" />\n                  {isLive ? \"Xem Trực Tiếp Ngay\" : \"Mở Link Livestream\"}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6452},"client/src/components/GuestPhotoGallery.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { GuestPhoto } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Image as ImageIcon, Heart, User } from \"lucide-react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nexport default function GuestPhotoGallery() {\n  const [selectedPhoto, setSelectedPhoto] = useState<GuestPhoto | null>(null);\n\n  const { data: photos = [], isLoading } = useQuery<GuestPhoto[]>({\n    queryKey: [\"/api/guest-photos\"],\n    select: (data) => data.filter(photo => photo.approved),\n  });\n\n  if (isLoading) {\n    return (\n      <section id=\"guest-gallery\" data-testid=\"section-guest-photo-gallery\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto\"></div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  if (photos.length === 0) {\n    return null;\n  }\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, scale: 0.8 },\n    visible: {\n      opacity: 1,\n      scale: 1,\n      transition: {\n        duration: 0.4\n      }\n    }\n  };\n\n  return (\n    <section id=\"guest-gallery\" data-testid=\"section-guest-photo-gallery\" className=\"py-20 bg-gradient-to-br from-purple-50 via-pink-50 to-rose-50 dark:from-purple-950/20 dark:via-pink-950/20 dark:to-rose-950/20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-block mb-4\">\n            <ImageIcon className=\"w-12 h-12 text-primary mx-auto\" />\n          </div>\n          <h2 className=\"font-heading text-4xl md:text-5xl lg:text-6xl font-bold mb-4\">\n            📷 Khoảnh Khắc Từ Khách Mời\n          </h2>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Những bức ảnh đẹp do khách mời chụp và chia sẻ trong tiệc cưới\n          </p>\n          <Badge variant=\"secondary\" className=\"mt-4\">\n            {photos.length} ảnh\n          </Badge>\n        </div>\n\n        <motion.div\n          variants={containerVariants}\n          initial=\"hidden\"\n          whileInView=\"visible\"\n          viewport={{ once: true }}\n          className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n        >\n          <AnimatePresence>\n            {photos.map((photo) => (\n              <motion.div\n                key={photo.id}\n                variants={itemVariants}\n                data-testid={`guest-photo-${photo.id}`}\n                whileHover={{ scale: 1.05, zIndex: 10 }}\n                className=\"cursor-pointer\"\n                onClick={() => setSelectedPhoto(photo)}\n              >\n                <Card className=\"overflow-hidden group hover:shadow-2xl transition-shadow\">\n                  <div className=\"relative\">\n                    <img\n                      src={photo.url}\n                      alt={photo.caption || \"Guest photo\"}\n                      className=\"w-full h-auto object-contain transition-transform duration-300 group-hover:scale-110\"\n                    />\n                    <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-black/0 to-black/0 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <div className=\"absolute bottom-0 left-0 right-0 p-4 text-white\">\n                        {photo.caption && (\n                          <p className=\"text-sm font-medium line-clamp-2 mb-2\">\n                            {photo.caption}\n                          </p>\n                        )}\n                        {photo.guestName && (\n                          <div className=\"flex items-center gap-2 text-xs\">\n                            <User className=\"w-3 h-3\" />\n                            <span>{photo.guestName}</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </motion.div>\n            ))}\n          </AnimatePresence>\n        </motion.div>\n      </div>\n\n      <Dialog open={!!selectedPhoto} onOpenChange={() => setSelectedPhoto(null)}>\n        <DialogContent data-testid=\"dialog-photo-detail\" className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Heart className=\"w-5 h-5 text-red-500\" />\n              Khoảnh Khắc Đẹp\n            </DialogTitle>\n          </DialogHeader>\n          {selectedPhoto && (\n            <div className=\"space-y-4\">\n              <div className=\"rounded-lg overflow-hidden\">\n                <img\n                  src={selectedPhoto.url}\n                  alt={selectedPhoto.caption || \"Guest photo\"}\n                  className=\"w-full max-h-[70vh] object-contain bg-muted\"\n                />\n              </div>\n              {selectedPhoto.caption && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Chú thích</p>\n                  <p className=\"text-base\">{selectedPhoto.caption}</p>\n                </div>\n              )}\n              {selectedPhoto.guestName && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground mb-1\">Người chia sẻ</p>\n                  <div className=\"flex items-center gap-2\">\n                    <User className=\"w-4 h-4 text-primary\" />\n                    <p className=\"font-medium\">{selectedPhoto.guestName}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </section>\n  );\n}\n","size_bytes":6029},"client/src/pages/AdminGiftMoney.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Plus, Trash2, Edit, DollarSign, Search, TrendingUp, Gift as GiftIcon } from \"lucide-react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { GiftMoney } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\nexport default function AdminGiftMoney() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sideFilter, setSideFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingGift, setEditingGift] = useState<GiftMoney | null>(null);\n\n  const { data: gifts = [], isLoading } = useQuery<GiftMoney[]>({\n    queryKey: [\"/api/gift-money\"],\n  });\n\n  const filteredGifts = gifts.filter(gift => {\n    const matchesSearch = gift.guestName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesSide = sideFilter === \"all\" || gift.side === sideFilter;\n    return matchesSearch && matchesSide;\n  });\n\n  const stats = {\n    total: gifts.reduce((sum, g) => sum + (g.giftType === \"money\" ? g.amount : 0), 0),\n    bride: gifts.filter(g => g.side === \"bride\").reduce((sum, g) => sum + (g.giftType === \"money\" ? g.amount : 0), 0),\n    groom: gifts.filter(g => g.side === \"groom\").reduce((sum, g) => sum + (g.giftType === \"money\" ? g.amount : 0), 0),\n    both: gifts.filter(g => g.side === \"both\").reduce((sum, g) => sum + (g.giftType === \"money\" ? g.amount : 0), 0),\n    count: gifts.length,\n  };\n\n  const [formData, setFormData] = useState({\n    guestName: \"\",\n    amount: 0,\n    relationship: \"\",\n    notes: \"\",\n    giftType: \"money\" as \"money\" | \"gift\",\n    giftDescription: \"\",\n    side: \"both\" as \"bride\" | \"groom\" | \"both\",\n  });\n\n  const resetForm = () => {\n    setFormData({\n      guestName: \"\",\n      amount: 0,\n      relationship: \"\",\n      notes: \"\",\n      giftType: \"money\",\n      giftDescription: \"\",\n      side: \"both\",\n    });\n    setEditingGift(null);\n  };\n\n  const createMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      return await apiRequest(\"POST\", \"/api/gift-money\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gift-money\"] });\n      toast({ \n        title: \"✅ Đã thêm\",\n        description: \"Thông tin mừng cưới đã được thêm thành công\",\n      });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể thêm thông tin mừng cưới\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<typeof formData> }) => {\n      return await apiRequest(\"PATCH\", `/api/gift-money/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gift-money\"] });\n      toast({ \n        title: \"✅ Đã cập nhật\",\n        description: \"Thông tin mừng cưới đã được cập nhật\",\n      });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể cập nhật thông tin\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/gift-money/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/gift-money\"] });\n      toast({ \n        title: \"🗑️ Đã xóa\",\n        description: \"Thông tin đã được xóa thành công\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        window.location.href = \"/api/login\";\n        return;\n      }\n      toast({\n        title: \"❌ Lỗi\",\n        description: \"Không thể xóa thông tin\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingGift) {\n      updateMutation.mutate({ id: editingGift.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (gift: GiftMoney) => {\n    setEditingGift(gift);\n    setFormData({\n      guestName: gift.guestName,\n      amount: gift.amount,\n      relationship: gift.relationship || \"\",\n      notes: gift.notes || \"\",\n      giftType: gift.giftType as \"money\" | \"gift\",\n      giftDescription: gift.giftDescription || \"\",\n      side: gift.side as \"bride\" | \"groom\" | \"both\",\n    });\n    setIsDialogOpen(true);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(amount);\n  };\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"loading-spinner\" className=\"flex items-center justify-center h-screen\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div data-testid=\"page-admin-gift-money\" className=\"space-y-6 p-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold bg-gradient-to-r from-rose-500 to-pink-600 bg-clip-text text-transparent\">\n            💝 Sổ Mừng Cưới\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">Quản lý tiền mừng và quà tặng từ khách mời</p>\n        </div>\n        <Button \n          data-testid=\"button-add-gift\"\n          onClick={() => {\n            resetForm();\n            setIsDialogOpen(true);\n          }}\n          className=\"gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          Thêm Mới\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card data-testid=\"stat-total\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Tổng Thu</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                {formatCurrency(stats.total)}\n              </div>\n              <TrendingUp className=\"w-8 h-8 text-green-500 opacity-50\" />\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">{stats.count} lượt mừng</p>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-bride\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Phía Cô Dâu</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold text-pink-600 dark:text-pink-400\">\n              {formatCurrency(stats.bride)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-groom\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Phía Chú Rể</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">\n              {formatCurrency(stats.groom)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card data-testid=\"stat-both\">\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium text-muted-foreground\">Chung</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-xl font-bold text-purple-600 dark:text-purple-400\">\n              {formatCurrency(stats.both)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n          <Input\n            data-testid=\"input-search\"\n            placeholder=\"Tìm kiếm theo tên...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Select value={sideFilter} onValueChange={setSideFilter}>\n          <SelectTrigger data-testid=\"select-side-filter\" className=\"w-48\">\n            <SelectValue placeholder=\"Lọc theo phía\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">Tất cả</SelectItem>\n            <SelectItem value=\"bride\">Cô dâu</SelectItem>\n            <SelectItem value=\"groom\">Chú rể</SelectItem>\n            <SelectItem value=\"both\">Chung</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>Danh Sách ({filteredGifts.length})</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left p-4 font-medium\">Tên Khách</th>\n                  <th className=\"text-left p-4 font-medium\">Số Tiền</th>\n                  <th className=\"text-left p-4 font-medium\">Quan Hệ</th>\n                  <th className=\"text-left p-4 font-medium\">Phía</th>\n                  <th className=\"text-left p-4 font-medium\">Ghi Chú</th>\n                  <th className=\"text-right p-4 font-medium\">Thao Tác</th>\n                </tr>\n              </thead>\n              <tbody>\n                <AnimatePresence>\n                  {filteredGifts.map((gift) => (\n                    <motion.tr\n                      key={gift.id}\n                      data-testid={`gift-row-${gift.id}`}\n                      initial={{ opacity: 0, y: 20 }}\n                      animate={{ opacity: 1, y: 0 }}\n                      exit={{ opacity: 0, x: -20 }}\n                      className=\"border-b hover:bg-muted/50\"\n                    >\n                      <td className=\"p-4 font-medium\">{gift.guestName}</td>\n                      <td className=\"p-4\">\n                        {gift.giftType === \"money\" ? (\n                          <span className=\"font-semibold text-green-600 dark:text-green-400\">\n                            {formatCurrency(gift.amount)}\n                          </span>\n                        ) : (\n                          <Badge variant=\"outline\">Quà tặng</Badge>\n                        )}\n                      </td>\n                      <td className=\"p-4 text-muted-foreground\">{gift.relationship || \"-\"}</td>\n                      <td className=\"p-4\">\n                        <Badge \n                          variant={gift.side === \"bride\" ? \"default\" : gift.side === \"groom\" ? \"secondary\" : \"outline\"}\n                        >\n                          {gift.side === \"bride\" ? \"Cô dâu\" : gift.side === \"groom\" ? \"Chú rể\" : \"Chung\"}\n                        </Badge>\n                      </td>\n                      <td className=\"p-4 text-sm text-muted-foreground max-w-xs truncate\">\n                        {gift.notes || gift.giftDescription || \"-\"}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex gap-2 justify-end\">\n                          <Button\n                            data-testid={`button-edit-${gift.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(gift)}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            data-testid={`button-delete-${gift.id}`}\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => {\n                              if (confirm(\"Bạn có chắc muốn xóa?\")) {\n                                deleteMutation.mutate(gift.id);\n                              }\n                            }}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-red-500\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </motion.tr>\n                  ))}\n                </AnimatePresence>\n              </tbody>\n            </table>\n            {filteredGifts.length === 0 && (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                Chưa có dữ liệu\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent data-testid=\"dialog-gift-form\" className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingGift ? \"Chỉnh Sửa Thông Tin\" : \"Thêm Mừng Cưới\"}\n            </DialogTitle>\n            <DialogDescription>\n              Nhập thông tin về tiền mừng hoặc quà tặng từ khách mời\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"guestName\">Tên Khách Mời *</Label>\n                <Input\n                  data-testid=\"input-guest-name\"\n                  id=\"guestName\"\n                  value={formData.guestName}\n                  onChange={(e) => setFormData({ ...formData, guestName: e.target.value })}\n                  required\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"side\">Phía</Label>\n                <Select value={formData.side} onValueChange={(value: any) => setFormData({ ...formData, side: value })}>\n                  <SelectTrigger data-testid=\"select-side\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"both\">Chung</SelectItem>\n                    <SelectItem value=\"bride\">Cô dâu</SelectItem>\n                    <SelectItem value=\"groom\">Chú rể</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"giftType\">Loại</Label>\n                <Select value={formData.giftType} onValueChange={(value: any) => setFormData({ ...formData, giftType: value })}>\n                  <SelectTrigger data-testid=\"select-gift-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"money\">Tiền mừng</SelectItem>\n                    <SelectItem value=\"gift\">Quà tặng</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"amount\">Số Tiền (VNĐ)</Label>\n                <Input\n                  data-testid=\"input-amount\"\n                  id=\"amount\"\n                  type=\"number\"\n                  value={formData.amount}\n                  onChange={(e) => setFormData({ ...formData, amount: parseInt(e.target.value) || 0 })}\n                  disabled={formData.giftType === \"gift\"}\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"relationship\">Quan Hệ</Label>\n              <Input\n                data-testid=\"input-relationship\"\n                id=\"relationship\"\n                placeholder=\"Bạn bè, đồng nghiệp, họ hàng...\"\n                value={formData.relationship}\n                onChange={(e) => setFormData({ ...formData, relationship: e.target.value })}\n              />\n            </div>\n\n            {formData.giftType === \"gift\" && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"giftDescription\">Mô Tả Quà Tặng</Label>\n                <Input\n                  data-testid=\"input-gift-description\"\n                  id=\"giftDescription\"\n                  value={formData.giftDescription}\n                  onChange={(e) => setFormData({ ...formData, giftDescription: e.target.value })}\n                />\n              </div>\n            )}\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"notes\">Ghi Chú</Label>\n              <Textarea\n                data-testid=\"textarea-notes\"\n                id=\"notes\"\n                value={formData.notes}\n                onChange={(e) => setFormData({ ...formData, notes: e.target.value })}\n                rows={3}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button\n                data-testid=\"button-cancel\"\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDialogOpen(false);\n                  resetForm();\n                }}\n              >\n                Hủy\n              </Button>\n              <Button \n                data-testid=\"button-submit\"\n                type=\"submit\"\n                disabled={createMutation.isPending || updateMutation.isPending}\n              >\n                {editingGift ? \"Cập Nhật\" : \"Thêm Mới\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":18613}},"version":2}